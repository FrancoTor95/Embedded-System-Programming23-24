
hc_sr05_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029bc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b9c  08002b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b9c  08002b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ba4  08002ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ba4  08002ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ba8  08002ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002bb8  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b94  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001748  00000000  00000000  00028c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  0002a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000058f  00000000  00000000  0002aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020360  00000000  00000000  0002b037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009757  00000000  00000000  0004b397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c499b  00000000  00000000  00054aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d8c  00000000  00000000  0011948c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002b6c 	.word	0x08002b6c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002b6c 	.word	0x08002b6c

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b970 	b.w	8000b6c <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9e08      	ldr	r6, [sp, #32]
 80008aa:	460d      	mov	r5, r1
 80008ac:	4604      	mov	r4, r0
 80008ae:	460f      	mov	r7, r1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d14a      	bne.n	800094a <__udivmoddi4+0xa6>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4694      	mov	ip, r2
 80008b8:	d965      	bls.n	8000986 <__udivmoddi4+0xe2>
 80008ba:	fab2 f382 	clz	r3, r2
 80008be:	b143      	cbz	r3, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008c4:	f1c3 0220 	rsb	r2, r3, #32
 80008c8:	409f      	lsls	r7, r3
 80008ca:	fa20 f202 	lsr.w	r2, r0, r2
 80008ce:	4317      	orrs	r7, r2
 80008d0:	409c      	lsls	r4, r3
 80008d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008d6:	fa1f f58c 	uxth.w	r5, ip
 80008da:	fbb7 f1fe 	udiv	r1, r7, lr
 80008de:	0c22      	lsrs	r2, r4, #16
 80008e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008e8:	fb01 f005 	mul.w	r0, r1, r5
 80008ec:	4290      	cmp	r0, r2
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x62>
 80008f0:	eb1c 0202 	adds.w	r2, ip, r2
 80008f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008f8:	f080 811c 	bcs.w	8000b34 <__udivmoddi4+0x290>
 80008fc:	4290      	cmp	r0, r2
 80008fe:	f240 8119 	bls.w	8000b34 <__udivmoddi4+0x290>
 8000902:	3902      	subs	r1, #2
 8000904:	4462      	add	r2, ip
 8000906:	1a12      	subs	r2, r2, r0
 8000908:	b2a4      	uxth	r4, r4
 800090a:	fbb2 f0fe 	udiv	r0, r2, lr
 800090e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000912:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000916:	fb00 f505 	mul.w	r5, r0, r5
 800091a:	42a5      	cmp	r5, r4
 800091c:	d90a      	bls.n	8000934 <__udivmoddi4+0x90>
 800091e:	eb1c 0404 	adds.w	r4, ip, r4
 8000922:	f100 32ff 	add.w	r2, r0, #4294967295
 8000926:	f080 8107 	bcs.w	8000b38 <__udivmoddi4+0x294>
 800092a:	42a5      	cmp	r5, r4
 800092c:	f240 8104 	bls.w	8000b38 <__udivmoddi4+0x294>
 8000930:	4464      	add	r4, ip
 8000932:	3802      	subs	r0, #2
 8000934:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000938:	1b64      	subs	r4, r4, r5
 800093a:	2100      	movs	r1, #0
 800093c:	b11e      	cbz	r6, 8000946 <__udivmoddi4+0xa2>
 800093e:	40dc      	lsrs	r4, r3
 8000940:	2300      	movs	r3, #0
 8000942:	e9c6 4300 	strd	r4, r3, [r6]
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	428b      	cmp	r3, r1
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0xbc>
 800094e:	2e00      	cmp	r6, #0
 8000950:	f000 80ed 	beq.w	8000b2e <__udivmoddi4+0x28a>
 8000954:	2100      	movs	r1, #0
 8000956:	e9c6 0500 	strd	r0, r5, [r6]
 800095a:	4608      	mov	r0, r1
 800095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000960:	fab3 f183 	clz	r1, r3
 8000964:	2900      	cmp	r1, #0
 8000966:	d149      	bne.n	80009fc <__udivmoddi4+0x158>
 8000968:	42ab      	cmp	r3, r5
 800096a:	d302      	bcc.n	8000972 <__udivmoddi4+0xce>
 800096c:	4282      	cmp	r2, r0
 800096e:	f200 80f8 	bhi.w	8000b62 <__udivmoddi4+0x2be>
 8000972:	1a84      	subs	r4, r0, r2
 8000974:	eb65 0203 	sbc.w	r2, r5, r3
 8000978:	2001      	movs	r0, #1
 800097a:	4617      	mov	r7, r2
 800097c:	2e00      	cmp	r6, #0
 800097e:	d0e2      	beq.n	8000946 <__udivmoddi4+0xa2>
 8000980:	e9c6 4700 	strd	r4, r7, [r6]
 8000984:	e7df      	b.n	8000946 <__udivmoddi4+0xa2>
 8000986:	b902      	cbnz	r2, 800098a <__udivmoddi4+0xe6>
 8000988:	deff      	udf	#255	; 0xff
 800098a:	fab2 f382 	clz	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8090 	bne.w	8000ab4 <__udivmoddi4+0x210>
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2101      	movs	r1, #1
 80009a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009a4:	fb07 2015 	mls	r0, r7, r5, r2
 80009a8:	0c22      	lsrs	r2, r4, #16
 80009aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ae:	fb0e f005 	mul.w	r0, lr, r5
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x124>
 80009b6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x122>
 80009c0:	4290      	cmp	r0, r2
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2b8>
 80009c6:	4645      	mov	r5, r8
 80009c8:	1a12      	subs	r2, r2, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d0:	fb07 2210 	mls	r2, r7, r0, r2
 80009d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x14e>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x14c>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2c2>
 80009f0:	4610      	mov	r0, r2
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009fa:	e79f      	b.n	800093c <__udivmoddi4+0x98>
 80009fc:	f1c1 0720 	rsb	r7, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a12:	40fd      	lsrs	r5, r7
 8000a14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a1e:	fa1f fe8c 	uxth.w	lr, ip
 8000a22:	fb09 5518 	mls	r5, r9, r8, r5
 8000a26:	0c1c      	lsrs	r4, r3, #16
 8000a28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	fa02 f201 	lsl.w	r2, r2, r1
 8000a36:	fa00 f001 	lsl.w	r0, r0, r1
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b0>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2b4>
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2b4>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4464      	add	r4, ip
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	b29d      	uxth	r5, r3
 8000a58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1da>
 8000a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2ac>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2ac>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4464      	add	r4, ip
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fba3 9502 	umull	r9, r5, r3, r2
 8000a86:	eba4 040e 	sub.w	r4, r4, lr
 8000a8a:	42ac      	cmp	r4, r5
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46ae      	mov	lr, r5
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x29c>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x298>
 8000a94:	b156      	cbz	r6, 8000aac <__udivmoddi4+0x208>
 8000a96:	ebb0 0208 	subs.w	r2, r0, r8
 8000a9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000aa2:	40ca      	lsrs	r2, r1
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	e9c6 7400 	strd	r7, r4, [r6]
 8000aac:	4618      	mov	r0, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	f1c3 0120 	rsb	r1, r3, #32
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ac4:	409d      	lsls	r5, r3
 8000ac6:	432a      	orrs	r2, r5
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ad8:	0c11      	lsrs	r1, r2, #16
 8000ada:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ade:	fb00 f50e 	mul.w	r5, r0, lr
 8000ae2:	428d      	cmp	r5, r1
 8000ae4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x258>
 8000aea:	eb1c 0101 	adds.w	r1, ip, r1
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000af4:	428d      	cmp	r5, r1
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4461      	add	r1, ip
 8000afc:	1b49      	subs	r1, r1, r5
 8000afe:	b292      	uxth	r2, r2
 8000b00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b04:	fb07 1115 	mls	r1, r7, r5, r1
 8000b08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b10:	4291      	cmp	r1, r2
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x282>
 8000b14:	eb1c 0202 	adds.w	r2, ip, r2
 8000b18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000b22:	3d02      	subs	r5, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a52      	subs	r2, r2, r1
 8000b28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0xfc>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4630      	mov	r0, r6
 8000b32:	e708      	b.n	8000946 <__udivmoddi4+0xa2>
 8000b34:	4639      	mov	r1, r7
 8000b36:	e6e6      	b.n	8000906 <__udivmoddi4+0x62>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	e6fb      	b.n	8000934 <__udivmoddi4+0x90>
 8000b3c:	4548      	cmp	r0, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f0>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f0>
 8000b4c:	4645      	mov	r5, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x282>
 8000b50:	462b      	mov	r3, r5
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1da>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x258>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b0>
 8000b5c:	3d02      	subs	r5, #2
 8000b5e:	4462      	add	r2, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x124>
 8000b62:	4608      	mov	r0, r1
 8000b64:	e70a      	b.n	800097c <__udivmoddi4+0xd8>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x14e>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0c      	blt.n	8000bd8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <__NVIC_ClearPendingIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	3360      	adds	r3, #96	; 0x60
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <TIM6_DAC_IRQHandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t time_elapsed = 0;
uint16_t counter = 0;
void TIM6_DAC_IRQHandler() {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	if((TIM6->SR >> TIM_SR_UIF_Pos) & 0x01) {
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <TIM6_DAC_IRQHandler+0x38>)
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d011      	beq.n	8000c70 <TIM6_DAC_IRQHandler+0x34>
		NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 8000c4c:	2036      	movs	r0, #54	; 0x36
 8000c4e:	f7ff ffad 	bl	8000bac <__NVIC_ClearPendingIRQ>
		time_elapsed = 1;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <TIM6_DAC_IRQHandler+0x3c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
		TIM6->CR1 &= ~(1 << TIM_CR1_CEN_Pos);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <TIM6_DAC_IRQHandler+0x38>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <TIM6_DAC_IRQHandler+0x38>)
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	6013      	str	r3, [r2, #0]
		TIM6->SR &= ~(1 << TIM_SR_UIF_Pos);
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <TIM6_DAC_IRQHandler+0x38>)
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	4a02      	ldr	r2, [pc, #8]	; (8000c74 <TIM6_DAC_IRQHandler+0x38>)
 8000c6a:	f023 0301 	bic.w	r3, r3, #1
 8000c6e:	6113      	str	r3, [r2, #16]
	}
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40001000 	.word	0x40001000
 8000c78:	20000070 	.word	0x20000070

08000c7c <EXTI1_IRQHandler>:

uint8_t measure_collected = 0;
uint32_t measure = 0;
void EXTI1_IRQHandler() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8000c80:	2007      	movs	r0, #7
 8000c82:	f7ff ff93 	bl	8000bac <__NVIC_ClearPendingIRQ>
	if((GPIOC->IDR >> 1) & 0x01) {
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <EXTI1_IRQHandler+0x64>)
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d010      	beq.n	8000cb4 <EXTI1_IRQHandler+0x38>
		TIM6->ARR = 65000;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <EXTI1_IRQHandler+0x68>)
 8000c94:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM6->CNT = 0;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <EXTI1_IRQHandler+0x68>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM6->CR1 |= (1 << TIM_CR1_CEN_Pos);
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <EXTI1_IRQHandler+0x68>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <EXTI1_IRQHandler+0x68>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]
		measure_collected = 0;
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <EXTI1_IRQHandler+0x6c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e00c      	b.n	8000cce <EXTI1_IRQHandler+0x52>
	} else {
		TIM6->CR1 &= ~(1 << TIM_CR1_CEN_Pos);
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <EXTI1_IRQHandler+0x68>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <EXTI1_IRQHandler+0x68>)
 8000cba:	f023 0301 	bic.w	r3, r3, #1
 8000cbe:	6013      	str	r3, [r2, #0]
		measure = TIM6->CNT;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <EXTI1_IRQHandler+0x68>)
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <EXTI1_IRQHandler+0x70>)
 8000cc6:	6013      	str	r3, [r2, #0]
		measure_collected = 1;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <EXTI1_IRQHandler+0x6c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
	}
	EXTI->PR |= (0x01 << EXTI_PR_PR1_Pos);
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <EXTI1_IRQHandler+0x74>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <EXTI1_IRQHandler+0x74>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6153      	str	r3, [r2, #20]
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40001000 	.word	0x40001000
 8000ce8:	20000071 	.word	0x20000071
 8000cec:	20000074 	.word	0x20000074
 8000cf0:	40013c00 	.word	0x40013c00

08000cf4 <TIM6_basic_setup>:


void TIM6_basic_setup() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1 << RCC_APB1ENR_TIM6EN_Pos); 		// Clock to TIM6
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <TIM6_basic_setup+0x4c>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <TIM6_basic_setup+0x4c>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40

	TIM6->CR1 &= ~(1 << TIM_CR1_UDIS_Pos); 		// Update event enable
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <TIM6_basic_setup+0x50>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <TIM6_basic_setup+0x50>)
 8000d0a:	f023 0302 	bic.w	r3, r3, #2
 8000d0e:	6013      	str	r3, [r2, #0]
	TIM6->CR1 |= (1 << TIM_CR1_URS_Pos);		// Update event generated only by overflow/underflow
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <TIM6_basic_setup+0x50>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <TIM6_basic_setup+0x50>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6013      	str	r3, [r2, #0]
	TIM6->PSC = 90 - 1; 						// CNT incremented every nanoseconds
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <TIM6_basic_setup+0x50>)
 8000d1e:	2259      	movs	r2, #89	; 0x59
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28

	TIM6->DIER |= (1 << TIM_DIER_UIE_Pos); 		// Trigger an interrupt every update event
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <TIM6_basic_setup+0x50>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <TIM6_basic_setup+0x50>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM6_DAC_IRQn);				// Enable interrupt for TIM6
 8000d2e:	2036      	movs	r0, #54	; 0x36
 8000d30:	f7ff ff1e 	bl	8000b70 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM6_DAC_IRQn, 0); 		// Set Priority
 8000d34:	2100      	movs	r1, #0
 8000d36:	2036      	movs	r0, #54	; 0x36
 8000d38:	f7ff ff56 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40001000 	.word	0x40001000

08000d48 <delay_micro_s>:

void delay_micro_s(uint16_t delay) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
	TIM6->ARR = delay - 1;
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	1e5a      	subs	r2, r3, #1
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <delay_micro_s+0x44>)
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->CNT = 0;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <delay_micro_s+0x44>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1 |= (1 << TIM_CR1_CEN_Pos);
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <delay_micro_s+0x44>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <delay_micro_s+0x44>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]
	while(!time_elapsed) {};
 8000d6c:	bf00      	nop
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <delay_micro_s+0x48>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0fa      	beq.n	8000d6e <delay_micro_s+0x26>
	time_elapsed = 0;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <delay_micro_s+0x48>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40001000 	.word	0x40001000
 8000d90:	20000070 	.word	0x20000070

08000d94 <hc_sr04_init>:


void hc_sr04_init() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1 << RCC_AHB1ENR_GPIOCEN_Pos);
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <hc_sr04_init+0x7c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <hc_sr04_init+0x7c>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6313      	str	r3, [r2, #48]	; 0x30

	/** Trigger pin configuration **/
	GPIOC->MODER |= (0x01 << 0);  // Set Output
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <hc_sr04_init+0x80>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <hc_sr04_init+0x80>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6013      	str	r3, [r2, #0]
	// Push-Pull output
	GPIOC->OTYPER &= ~(0x1 << 0);
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <hc_sr04_init+0x80>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <hc_sr04_init+0x80>)
 8000db6:	f023 0301 	bic.w	r3, r3, #1
 8000dba:	6053      	str	r3, [r2, #4]

	/**Echo pin configuration **/
	GPIOC->MODER  &= ~(0x03 << 2); // Set Input
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <hc_sr04_init+0x80>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <hc_sr04_init+0x80>)
 8000dc2:	f023 030c 	bic.w	r3, r3, #12
 8000dc6:	6013      	str	r3, [r2, #0]

	/* SYStem ConFiGuration (Multiplexer) */
	SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <hc_sr04_init+0x84>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <hc_sr04_init+0x84>)
 8000dce:	f043 0320 	orr.w	r3, r3, #32
 8000dd2:	6093      	str	r3, [r2, #8]

	/* EXTernal Interrupt configuration */
	EXTI->IMR  |= (EXTI_IMR_IM1);
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <hc_sr04_init+0x88>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <hc_sr04_init+0x88>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= (0x01 << EXTI_FTSR_TR1_Pos);
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <hc_sr04_init+0x88>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <hc_sr04_init+0x88>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR |= (0x01 << EXTI_RTSR_TR1_Pos);
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <hc_sr04_init+0x88>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <hc_sr04_init+0x88>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	6093      	str	r3, [r2, #8]

	/* NVIC Configuration */
	NVIC_EnableIRQ(EXTI1_IRQn);
 8000df8:	2007      	movs	r0, #7
 8000dfa:	f7ff feb9 	bl	8000b70 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI1_IRQn, 0);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2007      	movs	r0, #7
 8000e02:	f7ff fef1 	bl	8000be8 <__NVIC_SetPriority>

	TIM6_basic_setup();
 8000e06:	f7ff ff75 	bl	8000cf4 <TIM6_basic_setup>
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40013800 	.word	0x40013800
 8000e1c:	40013c00 	.word	0x40013c00

08000e20 <set_triger>:

void set_triger() {
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	GPIOC->ODR |= (1 << 0);
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <set_triger+0x1c>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <set_triger+0x1c>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6153      	str	r3, [r2, #20]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40020800 	.word	0x40020800

08000e40 <clear_triger>:

void clear_triger() {
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~(1 << 0);
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <clear_triger+0x1c>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <clear_triger+0x1c>)
 8000e4a:	f023 0301 	bic.w	r3, r3, #1
 8000e4e:	6153      	str	r3, [r2, #20]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40020800 	.word	0x40020800

08000e60 <meas_dist>:

float meas_dist() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	clear_triger(); 	// keep trigger low
 8000e64:	f7ff ffec 	bl	8000e40 <clear_triger>
	delay_micro_s(3);	// for at least 3 mu_s
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f7ff ff6d 	bl	8000d48 <delay_micro_s>

	set_triger();		// set trigger high
 8000e6e:	f7ff ffd7 	bl	8000e20 <set_triger>
	delay_micro_s(10);	// for at least 10 mu_s
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff ff68 	bl	8000d48 <delay_micro_s>
	clear_triger();		// clear trigger to start ultrasonic burst transmission
 8000e78:	f7ff ffe2 	bl	8000e40 <clear_triger>

	while(!measure_collected);	// wait for measurement to be collected (look EXTI ISR)
 8000e7c:	bf00      	nop
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <meas_dist+0x60>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0fb      	beq.n	8000e7e <meas_dist+0x1e>
	return 0.5*0.000343*measure;				// return measurement
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <meas_dist+0x64>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc28 	bl	80006e0 <__aeabi_ui2d>
 8000e90:	a309      	add	r3, pc, #36	; (adr r3, 8000eb8 <meas_dist+0x58>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff f9b7 	bl	8000208 <__aeabi_dmul>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fc97 	bl	80007d4 <__aeabi_d2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	ee07 3a90 	vmov	s15, r3
}
 8000eac:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	c853c148 	.word	0xc853c148
 8000ebc:	3f267a95 	.word	0x3f267a95
 8000ec0:	20000071 	.word	0x20000071
 8000ec4:	20000074 	.word	0x20000074

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f000 f9fc 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f814 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f000 f8ae 	bl	8001034 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ed8:	f000 f882 	bl	8000fe0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  hc_sr04_init();
 8000edc:	f7ff ff5a 	bl	8000d94 <hc_sr04_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  measure_f = meas_dist();
 8000ee0:	f7ff ffbe 	bl	8000e60 <meas_dist>
 8000ee4:	eef0 7a40 	vmov.f32	s15, s0
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <main+0x30>)
 8000eea:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1000);
 8000eee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef2:	f000 fa5b 	bl	80013ac <HAL_Delay>
	  measure_f = meas_dist();
 8000ef6:	e7f3      	b.n	8000ee0 <main+0x18>
 8000ef8:	20000078 	.word	0x20000078

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2234      	movs	r2, #52	; 0x34
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fe02 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <SystemClock_Config+0xdc>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a2b      	ldr	r2, [pc, #172]	; (8000fd8 <SystemClock_Config+0xdc>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <SystemClock_Config+0xdc>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <SystemClock_Config+0xe0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <SystemClock_Config+0xe0>)
 8000f46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <SystemClock_Config+0xe0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f60:	2310      	movs	r3, #16
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f64:	2302      	movs	r3, #2
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f70:	23b4      	movs	r3, #180	; 0xb4
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 f863 	bl	8002050 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f90:	f000 f8be 	bl	8001110 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f94:	f000 fcc2 	bl	800191c <HAL_PWREx_EnableOverDrive>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f9e:	f000 f8b7 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	2105      	movs	r1, #5
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fcfb 	bl	80019bc <HAL_RCC_ClockConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fcc:	f000 f8a0 	bl	8001110 <Error_Handler>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3750      	adds	r7, #80	; 0x50
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <MX_USART2_UART_Init+0x50>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001018:	f001 fab8 	bl	800258c <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001022:	f000 f875 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000028 	.word	0x20000028
 8001030:	40004400 	.word	0x40004400

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a2c      	ldr	r2, [pc, #176]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_GPIO_Init+0xd0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a25      	ldr	r2, [pc, #148]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <MX_GPIO_Init+0xd0>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_GPIO_Init+0xd0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <MX_GPIO_Init+0xd0>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_GPIO_Init+0xd0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2120      	movs	r1, #32
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <MX_GPIO_Init+0xd4>)
 80010c0:	f000 fc12 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_GPIO_Init+0xd8>)
 80010dc:	f000 fa70 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010e0:	2320      	movs	r3, #32
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_GPIO_Init+0xd4>)
 80010f8:	f000 fa62 	bl	80015c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020800 	.word	0x40020800

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <HAL_MspInit+0x4c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_MspInit+0x4c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800115a:	2007      	movs	r0, #7
 800115c:	f000 f9fc 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <HAL_UART_MspInit+0x84>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12b      	bne.n	80011e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_UART_MspInit+0x88>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_UART_MspInit+0x88>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_UART_MspInit+0x88>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_UART_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_UART_MspInit+0x88>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_UART_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011c6:	230c      	movs	r3, #12
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d6:	2307      	movs	r3, #7
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_UART_MspInit+0x8c>)
 80011e2:	f000 f9ed 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	; 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40004400 	.word	0x40004400
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f000 f890 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001278:	f7ff ffea 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800127e:	490d      	ldr	r1, [pc, #52]	; (80012b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001294:	4c0a      	ldr	r4, [pc, #40]	; (80012c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f001 fc3f 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff fe0f 	bl	8000ec8 <main>
  bx  lr    
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012b8:	08002bac 	.word	0x08002bac
  ldr r2, =_sbss
 80012bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012c0:	20000080 	.word	0x20000080

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_Init+0x40>)
 80012d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_Init+0x40>)
 80012de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_Init+0x40>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f931 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff ff0e 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f93b 	bl	80015a6 <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f911 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	2000007c 	.word	0x2000007c

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000007c 	.word	0x2000007c

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <__NVIC_SetPriorityGrouping>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_SetPriority>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff47 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff5c 	bl	800143c <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff8e 	bl	80014ac <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5d 	bl	8001458 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffb0 	bl	8001514 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e165      	b.n	80018a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8154 	bne.w	80018a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d005      	beq.n	8001612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	2b02      	cmp	r3, #2
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b03      	cmp	r3, #3
 800167e:	d017      	beq.n	80016b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80ae 	beq.w	80018a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <HAL_GPIO_Init+0x300>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a5c      	ldr	r2, [pc, #368]	; (80018c0 <HAL_GPIO_Init+0x300>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b5a      	ldr	r3, [pc, #360]	; (80018c0 <HAL_GPIO_Init+0x300>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001762:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x308>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_GPIO_Init+0x30c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_GPIO_Init+0x310>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_GPIO_Init+0x314>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_GPIO_Init+0x318>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x20a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4a      	ldr	r2, [pc, #296]	; (80018dc <HAL_GPIO_Init+0x31c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x206>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a49      	ldr	r2, [pc, #292]	; (80018e0 <HAL_GPIO_Init+0x320>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x202>
 80017be:	2306      	movs	r3, #6
 80017c0:	e00c      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c2:	2307      	movs	r3, #7
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4935      	ldr	r1, [pc, #212]	; (80018c4 <HAL_GPIO_Init+0x304>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_GPIO_Init+0x324>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f ae96 	bls.w	80015dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40021400 	.word	0x40021400
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40013c00 	.word	0x40013c00

080018e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001904:	e003      	b.n	800190e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	041a      	lsls	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	619a      	str	r2, [r3, #24]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_PWREx_EnableOverDrive+0x90>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <HAL_PWREx_EnableOverDrive+0x90>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_PWREx_EnableOverDrive+0x90>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7ff fd24 	bl	8001394 <HAL_GetTick>
 800194c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800194e:	e009      	b.n	8001964 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001950:	f7ff fd20 	bl	8001394 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800195e:	d901      	bls.n	8001964 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e01f      	b.n	80019a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d1ee      	bne.n	8001950 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001978:	f7ff fd0c 	bl	8001394 <HAL_GetTick>
 800197c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800197e:	e009      	b.n	8001994 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001980:	f7ff fd08 	bl	8001394 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800198e:	d901      	bls.n	8001994 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e007      	b.n	80019a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019a0:	d1ee      	bne.n	8001980 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	420e0040 	.word	0x420e0040
 80019b4:	40007000 	.word	0x40007000
 80019b8:	420e0044 	.word	0x420e0044

080019bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0cc      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d90c      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	494d      	ldr	r1, [pc, #308]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d044      	beq.n	8001adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d119      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e07f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e067      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0203 	bic.w	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4934      	ldr	r1, [pc, #208]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff fc72 	bl	8001394 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7ff fc6e 	bl	8001394 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 020c 	and.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1eb      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d20c      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490e      	ldr	r1, [pc, #56]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b42:	f000 f855 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	490a      	ldr	r1, [pc, #40]	; (8001b7c <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fbd2 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08002b84 	.word	0x08002b84
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba4:	f7ff fff0 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	0a9b      	lsrs	r3, r3, #10
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	4903      	ldr	r1, [pc, #12]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08002b94 	.word	0x08002b94

08001bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bcc:	f7ff ffdc 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0b5b      	lsrs	r3, r3, #13
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08002b94 	.word	0x08002b94

08001bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf4:	b0ae      	sub	sp, #184	; 0xb8
 8001bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c16:	4bcb      	ldr	r3, [pc, #812]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	f200 8206 	bhi.w	8002030 <HAL_RCC_GetSysClockFreq+0x440>
 8001c24:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c61 	.word	0x08001c61
 8001c30:	08002031 	.word	0x08002031
 8001c34:	08002031 	.word	0x08002031
 8001c38:	08002031 	.word	0x08002031
 8001c3c:	08001c69 	.word	0x08001c69
 8001c40:	08002031 	.word	0x08002031
 8001c44:	08002031 	.word	0x08002031
 8001c48:	08002031 	.word	0x08002031
 8001c4c:	08001c71 	.word	0x08001c71
 8001c50:	08002031 	.word	0x08002031
 8001c54:	08002031 	.word	0x08002031
 8001c58:	08002031 	.word	0x08002031
 8001c5c:	08001e61 	.word	0x08001e61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4bb9      	ldr	r3, [pc, #740]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001c66:	e1e7      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c68:	4bb8      	ldr	r3, [pc, #736]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c6e:	e1e3      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c70:	4bb4      	ldr	r3, [pc, #720]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c7c:	4bb1      	ldr	r3, [pc, #708]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d071      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c88:	4bae      	ldr	r3, [pc, #696]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001cae:	4622      	mov	r2, r4
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	0159      	lsls	r1, r3, #5
 8001cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc0:	0150      	lsls	r0, r2, #5
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	1a51      	subs	r1, r2, r1
 8001cca:	6439      	str	r1, [r7, #64]	; 0x40
 8001ccc:	4629      	mov	r1, r5
 8001cce:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001ce0:	4649      	mov	r1, r9
 8001ce2:	018b      	lsls	r3, r1, #6
 8001ce4:	4641      	mov	r1, r8
 8001ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cea:	4641      	mov	r1, r8
 8001cec:	018a      	lsls	r2, r1, #6
 8001cee:	4641      	mov	r1, r8
 8001cf0:	1a51      	subs	r1, r2, r1
 8001cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001d08:	4649      	mov	r1, r9
 8001d0a:	00cb      	lsls	r3, r1, #3
 8001d0c:	4641      	mov	r1, r8
 8001d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d12:	4641      	mov	r1, r8
 8001d14:	00ca      	lsls	r2, r1, #3
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	189b      	adds	r3, r3, r2
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
 8001d22:	462b      	mov	r3, r5
 8001d24:	460a      	mov	r2, r1
 8001d26:	eb42 0303 	adc.w	r3, r2, r3
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d38:	4629      	mov	r1, r5
 8001d3a:	024b      	lsls	r3, r1, #9
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d42:	4621      	mov	r1, r4
 8001d44:	024a      	lsls	r2, r1, #9
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d5c:	f7fe fd8a 	bl	8000874 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4613      	mov	r3, r2
 8001d66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d6a:	e067      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6c:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	2200      	movs	r2, #0
 8001d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d86:	2300      	movs	r3, #0
 8001d88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001d8e:	4622      	mov	r2, r4
 8001d90:	462b      	mov	r3, r5
 8001d92:	f04f 0000 	mov.w	r0, #0
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	0159      	lsls	r1, r3, #5
 8001d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da0:	0150      	lsls	r0, r2, #5
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4621      	mov	r1, r4
 8001da8:	1a51      	subs	r1, r2, r1
 8001daa:	62b9      	str	r1, [r7, #40]	; 0x28
 8001dac:	4629      	mov	r1, r5
 8001dae:	eb63 0301 	sbc.w	r3, r3, r1
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	018b      	lsls	r3, r1, #6
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dca:	4641      	mov	r1, r8
 8001dcc:	018a      	lsls	r2, r1, #6
 8001dce:	4641      	mov	r1, r8
 8001dd0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001de6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dee:	4692      	mov	sl, r2
 8001df0:	469b      	mov	fp, r3
 8001df2:	4623      	mov	r3, r4
 8001df4:	eb1a 0303 	adds.w	r3, sl, r3
 8001df8:	623b      	str	r3, [r7, #32]
 8001dfa:	462b      	mov	r3, r5
 8001dfc:	eb4b 0303 	adc.w	r3, fp, r3
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e0e:	4629      	mov	r1, r5
 8001e10:	028b      	lsls	r3, r1, #10
 8001e12:	4621      	mov	r1, r4
 8001e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e18:	4621      	mov	r1, r4
 8001e1a:	028a      	lsls	r2, r1, #10
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e24:	2200      	movs	r2, #0
 8001e26:	673b      	str	r3, [r7, #112]	; 0x70
 8001e28:	677a      	str	r2, [r7, #116]	; 0x74
 8001e2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e2e:	f7fe fd21 	bl	8000874 <__aeabi_uldivmod>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4613      	mov	r3, r2
 8001e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e3c:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	3301      	adds	r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e5e:	e0eb      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d06b      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e78:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	2200      	movs	r2, #0
 8001e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e94:	4622      	mov	r2, r4
 8001e96:	462b      	mov	r3, r5
 8001e98:	f04f 0000 	mov.w	r0, #0
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	0159      	lsls	r1, r3, #5
 8001ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea6:	0150      	lsls	r0, r2, #5
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4621      	mov	r1, r4
 8001eae:	1a51      	subs	r1, r2, r1
 8001eb0:	61b9      	str	r1, [r7, #24]
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ec6:	4659      	mov	r1, fp
 8001ec8:	018b      	lsls	r3, r1, #6
 8001eca:	4651      	mov	r1, sl
 8001ecc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ed0:	4651      	mov	r1, sl
 8001ed2:	018a      	lsls	r2, r1, #6
 8001ed4:	4651      	mov	r1, sl
 8001ed6:	ebb2 0801 	subs.w	r8, r2, r1
 8001eda:	4659      	mov	r1, fp
 8001edc:	eb63 0901 	sbc.w	r9, r3, r1
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ef0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ef4:	4690      	mov	r8, r2
 8001ef6:	4699      	mov	r9, r3
 8001ef8:	4623      	mov	r3, r4
 8001efa:	eb18 0303 	adds.w	r3, r8, r3
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	462b      	mov	r3, r5
 8001f02:	eb49 0303 	adc.w	r3, r9, r3
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f14:	4629      	mov	r1, r5
 8001f16:	024b      	lsls	r3, r1, #9
 8001f18:	4621      	mov	r1, r4
 8001f1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f1e:	4621      	mov	r1, r4
 8001f20:	024a      	lsls	r2, r1, #9
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f34:	f7fe fc9e 	bl	8000874 <__aeabi_uldivmod>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f42:	e065      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x420>
 8001f44:	40023800 	.word	0x40023800
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f50:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	2200      	movs	r2, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f60:	653b      	str	r3, [r7, #80]	; 0x50
 8001f62:	2300      	movs	r3, #0
 8001f64:	657b      	str	r3, [r7, #84]	; 0x54
 8001f66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001f6a:	4642      	mov	r2, r8
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	f04f 0000 	mov.w	r0, #0
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	0159      	lsls	r1, r3, #5
 8001f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f7c:	0150      	lsls	r0, r2, #5
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4641      	mov	r1, r8
 8001f84:	1a51      	subs	r1, r2, r1
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	4649      	mov	r1, r9
 8001f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f9c:	4659      	mov	r1, fp
 8001f9e:	018b      	lsls	r3, r1, #6
 8001fa0:	4651      	mov	r1, sl
 8001fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	018a      	lsls	r2, r1, #6
 8001faa:	4651      	mov	r1, sl
 8001fac:	1a54      	subs	r4, r2, r1
 8001fae:	4659      	mov	r1, fp
 8001fb0:	eb63 0501 	sbc.w	r5, r3, r1
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	00eb      	lsls	r3, r5, #3
 8001fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fc2:	00e2      	lsls	r2, r4, #3
 8001fc4:	4614      	mov	r4, r2
 8001fc6:	461d      	mov	r5, r3
 8001fc8:	4643      	mov	r3, r8
 8001fca:	18e3      	adds	r3, r4, r3
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	464b      	mov	r3, r9
 8001fd0:	eb45 0303 	adc.w	r3, r5, r3
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	028b      	lsls	r3, r1, #10
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fec:	4621      	mov	r1, r4
 8001fee:	028a      	lsls	r2, r1, #10
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ffc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ffe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002002:	f7fe fc37 	bl	8000874 <__aeabi_uldivmod>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4613      	mov	r3, r2
 800200c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_RCC_GetSysClockFreq+0x458>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	0f1b      	lsrs	r3, r3, #28
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800201e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800202e:	e003      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002036:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002038:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800203c:	4618      	mov	r0, r3
 800203e:	37b8      	adds	r7, #184	; 0xb8
 8002040:	46bd      	mov	sp, r7
 8002042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	00f42400 	.word	0x00f42400

08002050 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e28d      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8083 	beq.w	8002176 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002070:	4b94      	ldr	r3, [pc, #592]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b04      	cmp	r3, #4
 800207a:	d019      	beq.n	80020b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800207c:	4b91      	ldr	r3, [pc, #580]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002084:	2b08      	cmp	r3, #8
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002088:	4b8e      	ldr	r3, [pc, #568]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002094:	d00c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002096:	4b8b      	ldr	r3, [pc, #556]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d112      	bne.n	80020c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a2:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ae:	d10b      	bne.n	80020c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	4b84      	ldr	r3, [pc, #528]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d05b      	beq.n	8002174 <HAL_RCC_OscConfig+0x124>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d157      	bne.n	8002174 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e25a      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d106      	bne.n	80020e0 <HAL_RCC_OscConfig+0x90>
 80020d2:	4b7c      	ldr	r3, [pc, #496]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7b      	ldr	r2, [pc, #492]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e01d      	b.n	800211c <HAL_RCC_OscConfig+0xcc>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0xb4>
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a75      	ldr	r2, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80020f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b73      	ldr	r3, [pc, #460]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a72      	ldr	r2, [pc, #456]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0xcc>
 8002104:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a6e      	ldr	r2, [pc, #440]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 800210a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b6c      	ldr	r3, [pc, #432]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a6b      	ldr	r2, [pc, #428]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f936 	bl	8001394 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff f932 	bl	8001394 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e21f      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b61      	ldr	r3, [pc, #388]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0xdc>
 800214a:	e014      	b.n	8002176 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff f922 	bl	8001394 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff f91e 	bl	8001394 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e20b      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x104>
 8002172:	e000      	b.n	8002176 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d06f      	beq.n	8002262 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002182:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b00      	cmp	r3, #0
 800218c:	d017      	beq.n	80021be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800218e:	4b4d      	ldr	r3, [pc, #308]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002196:	2b08      	cmp	r3, #8
 8002198:	d105      	bne.n	80021a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800219a:	4b4a      	ldr	r3, [pc, #296]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a6:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d11c      	bne.n	80021ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d116      	bne.n	80021ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_RCC_OscConfig+0x186>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e1d3      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4937      	ldr	r1, [pc, #220]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	e03a      	b.n	8002262 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_OscConfig+0x278>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff f8cb 	bl	8001394 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002202:	f7ff f8c7 	bl	8001394 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1b4      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4925      	ldr	r1, [pc, #148]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_OscConfig+0x278>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7ff f8aa 	bl	8001394 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002244:	f7ff f8a6 	bl	8001394 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e193      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d036      	beq.n	80022dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d016      	beq.n	80022a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff f88a 	bl	8001394 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff f886 	bl	8001394 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e173      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x234>
 80022a2:	e01b      	b.n	80022dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_OscConfig+0x27c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7ff f873 	bl	8001394 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	e00e      	b.n	80022d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b2:	f7ff f86f 	bl	8001394 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d907      	bls.n	80022d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e15c      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	42470000 	.word	0x42470000
 80022cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	4b8a      	ldr	r3, [pc, #552]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ea      	bne.n	80022b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8097 	beq.w	8002418 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b83      	ldr	r3, [pc, #524]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b7f      	ldr	r3, [pc, #508]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a7e      	ldr	r2, [pc, #504]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b7c      	ldr	r3, [pc, #496]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b79      	ldr	r3, [pc, #484]	; (8002500 <HAL_RCC_OscConfig+0x4b0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x4b0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a75      	ldr	r2, [pc, #468]	; (8002500 <HAL_RCC_OscConfig+0x4b0>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7ff f82f 	bl	8001394 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7ff f82b 	bl	8001394 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e118      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x4b0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x31e>
 8002360:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a65      	ldr	r2, [pc, #404]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
 800236c:	e01c      	b.n	80023a8 <HAL_RCC_OscConfig+0x358>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b05      	cmp	r3, #5
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x340>
 8002376:	4b61      	ldr	r3, [pc, #388]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a60      	ldr	r2, [pc, #384]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	4b5e      	ldr	r3, [pc, #376]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a5d      	ldr	r2, [pc, #372]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0x358>
 8002390:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a59      	ldr	r2, [pc, #356]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d015      	beq.n	80023dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe fff0 	bl	8001394 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe ffec 	bl	8001394 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0d7      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ce:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0ee      	beq.n	80023b8 <HAL_RCC_OscConfig+0x368>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe ffda 	bl	8001394 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7fe ffd6 	bl	8001394 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0c1      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fa:	4b40      	ldr	r3, [pc, #256]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ee      	bne.n	80023e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	4a3a      	ldr	r2, [pc, #232]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80ad 	beq.w	800257c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002422:	4b36      	ldr	r3, [pc, #216]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b08      	cmp	r3, #8
 800242c:	d060      	beq.n	80024f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d145      	bne.n	80024c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b33      	ldr	r3, [pc, #204]	; (8002504 <HAL_RCC_OscConfig+0x4b4>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe ffaa 	bl	8001394 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe ffa6 	bl	8001394 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e093      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	071b      	lsls	r3, r3, #28
 800248e:	491b      	ldr	r1, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x4b4>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe ff7b 	bl	8001394 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a2:	f7fe ff77 	bl	8001394 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e064      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x452>
 80024c0:	e05c      	b.n	800257c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_RCC_OscConfig+0x4b4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe ff64 	bl	8001394 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe ff60 	bl	8001394 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e04d      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x480>
 80024ee:	e045      	b.n	800257c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e040      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000
 8002504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <HAL_RCC_OscConfig+0x538>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d030      	beq.n	8002578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d129      	bne.n	8002578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d122      	bne.n	8002578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002538:	4013      	ands	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002540:	4293      	cmp	r3, r2
 8002542:	d119      	bne.n	8002578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	3b01      	subs	r3, #1
 8002552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d10f      	bne.n	8002578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e042      	b.n	8002624 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe fdda 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2224      	movs	r2, #36	; 0x24
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f82b 	bl	800262c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800262c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002630:	b0c0      	sub	sp, #256	; 0x100
 8002632:	af00      	add	r7, sp, #0
 8002634:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	ea40 0301 	orr.w	r3, r0, r1
 8002654:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	431a      	orrs	r2, r3
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	431a      	orrs	r2, r3
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002684:	f021 010c 	bic.w	r1, r1, #12
 8002688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002692:	430b      	orrs	r3, r1
 8002694:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a6:	6999      	ldr	r1, [r3, #24]
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	ea40 0301 	orr.w	r3, r0, r1
 80026b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b8f      	ldr	r3, [pc, #572]	; (80028f8 <UART_SetConfig+0x2cc>)
 80026bc:	429a      	cmp	r2, r3
 80026be:	d005      	beq.n	80026cc <UART_SetConfig+0xa0>
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b8d      	ldr	r3, [pc, #564]	; (80028fc <UART_SetConfig+0x2d0>)
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d104      	bne.n	80026d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026cc:	f7ff fa7c 	bl	8001bc8 <HAL_RCC_GetPCLK2Freq>
 80026d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026d4:	e003      	b.n	80026de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026d6:	f7ff fa63 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 80026da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e8:	f040 810c 	bne.w	8002904 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026f0:	2200      	movs	r2, #0
 80026f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026fe:	4622      	mov	r2, r4
 8002700:	462b      	mov	r3, r5
 8002702:	1891      	adds	r1, r2, r2
 8002704:	65b9      	str	r1, [r7, #88]	; 0x58
 8002706:	415b      	adcs	r3, r3
 8002708:	65fb      	str	r3, [r7, #92]	; 0x5c
 800270a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800270e:	4621      	mov	r1, r4
 8002710:	eb12 0801 	adds.w	r8, r2, r1
 8002714:	4629      	mov	r1, r5
 8002716:	eb43 0901 	adc.w	r9, r3, r1
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800272a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800272e:	4690      	mov	r8, r2
 8002730:	4699      	mov	r9, r3
 8002732:	4623      	mov	r3, r4
 8002734:	eb18 0303 	adds.w	r3, r8, r3
 8002738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800273c:	462b      	mov	r3, r5
 800273e:	eb49 0303 	adc.w	r3, r9, r3
 8002742:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002752:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002756:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800275a:	460b      	mov	r3, r1
 800275c:	18db      	adds	r3, r3, r3
 800275e:	653b      	str	r3, [r7, #80]	; 0x50
 8002760:	4613      	mov	r3, r2
 8002762:	eb42 0303 	adc.w	r3, r2, r3
 8002766:	657b      	str	r3, [r7, #84]	; 0x54
 8002768:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800276c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002770:	f7fe f880 	bl	8000874 <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4b61      	ldr	r3, [pc, #388]	; (8002900 <UART_SetConfig+0x2d4>)
 800277a:	fba3 2302 	umull	r2, r3, r3, r2
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	011c      	lsls	r4, r3, #4
 8002782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800278c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002790:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002794:	4642      	mov	r2, r8
 8002796:	464b      	mov	r3, r9
 8002798:	1891      	adds	r1, r2, r2
 800279a:	64b9      	str	r1, [r7, #72]	; 0x48
 800279c:	415b      	adcs	r3, r3
 800279e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027a4:	4641      	mov	r1, r8
 80027a6:	eb12 0a01 	adds.w	sl, r2, r1
 80027aa:	4649      	mov	r1, r9
 80027ac:	eb43 0b01 	adc.w	fp, r3, r1
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027c4:	4692      	mov	sl, r2
 80027c6:	469b      	mov	fp, r3
 80027c8:	4643      	mov	r3, r8
 80027ca:	eb1a 0303 	adds.w	r3, sl, r3
 80027ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027d2:	464b      	mov	r3, r9
 80027d4:	eb4b 0303 	adc.w	r3, fp, r3
 80027d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027f0:	460b      	mov	r3, r1
 80027f2:	18db      	adds	r3, r3, r3
 80027f4:	643b      	str	r3, [r7, #64]	; 0x40
 80027f6:	4613      	mov	r3, r2
 80027f8:	eb42 0303 	adc.w	r3, r2, r3
 80027fc:	647b      	str	r3, [r7, #68]	; 0x44
 80027fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002802:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002806:	f7fe f835 	bl	8000874 <__aeabi_uldivmod>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4611      	mov	r1, r2
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <UART_SetConfig+0x2d4>)
 8002812:	fba3 2301 	umull	r2, r3, r3, r1
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2264      	movs	r2, #100	; 0x64
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	1acb      	subs	r3, r1, r3
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <UART_SetConfig+0x2d4>)
 8002828:	fba3 2302 	umull	r2, r3, r3, r2
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002834:	441c      	add	r4, r3
 8002836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002840:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002844:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	1891      	adds	r1, r2, r2
 800284e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002850:	415b      	adcs	r3, r3
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002854:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002858:	4641      	mov	r1, r8
 800285a:	1851      	adds	r1, r2, r1
 800285c:	6339      	str	r1, [r7, #48]	; 0x30
 800285e:	4649      	mov	r1, r9
 8002860:	414b      	adcs	r3, r1
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002870:	4659      	mov	r1, fp
 8002872:	00cb      	lsls	r3, r1, #3
 8002874:	4651      	mov	r1, sl
 8002876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800287a:	4651      	mov	r1, sl
 800287c:	00ca      	lsls	r2, r1, #3
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4603      	mov	r3, r0
 8002884:	4642      	mov	r2, r8
 8002886:	189b      	adds	r3, r3, r2
 8002888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800288c:	464b      	mov	r3, r9
 800288e:	460a      	mov	r2, r1
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028ac:	460b      	mov	r3, r1
 80028ae:	18db      	adds	r3, r3, r3
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b2:	4613      	mov	r3, r2
 80028b4:	eb42 0303 	adc.w	r3, r2, r3
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028c2:	f7fd ffd7 	bl	8000874 <__aeabi_uldivmod>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <UART_SetConfig+0x2d4>)
 80028cc:	fba3 1302 	umull	r1, r3, r3, r2
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	2164      	movs	r1, #100	; 0x64
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	3332      	adds	r3, #50	; 0x32
 80028de:	4a08      	ldr	r2, [pc, #32]	; (8002900 <UART_SetConfig+0x2d4>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	f003 0207 	and.w	r2, r3, #7
 80028ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4422      	add	r2, r4
 80028f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028f4:	e106      	b.n	8002b04 <UART_SetConfig+0x4d8>
 80028f6:	bf00      	nop
 80028f8:	40011000 	.word	0x40011000
 80028fc:	40011400 	.word	0x40011400
 8002900:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002908:	2200      	movs	r2, #0
 800290a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800290e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002912:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002916:	4642      	mov	r2, r8
 8002918:	464b      	mov	r3, r9
 800291a:	1891      	adds	r1, r2, r2
 800291c:	6239      	str	r1, [r7, #32]
 800291e:	415b      	adcs	r3, r3
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002926:	4641      	mov	r1, r8
 8002928:	1854      	adds	r4, r2, r1
 800292a:	4649      	mov	r1, r9
 800292c:	eb43 0501 	adc.w	r5, r3, r1
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	00eb      	lsls	r3, r5, #3
 800293a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293e:	00e2      	lsls	r2, r4, #3
 8002940:	4614      	mov	r4, r2
 8002942:	461d      	mov	r5, r3
 8002944:	4643      	mov	r3, r8
 8002946:	18e3      	adds	r3, r4, r3
 8002948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800294c:	464b      	mov	r3, r9
 800294e:	eb45 0303 	adc.w	r3, r5, r3
 8002952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002962:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002972:	4629      	mov	r1, r5
 8002974:	008b      	lsls	r3, r1, #2
 8002976:	4621      	mov	r1, r4
 8002978:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800297c:	4621      	mov	r1, r4
 800297e:	008a      	lsls	r2, r1, #2
 8002980:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002984:	f7fd ff76 	bl	8000874 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4b60      	ldr	r3, [pc, #384]	; (8002b10 <UART_SetConfig+0x4e4>)
 800298e:	fba3 2302 	umull	r2, r3, r3, r2
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	011c      	lsls	r4, r3, #4
 8002996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800299a:	2200      	movs	r2, #0
 800299c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029a8:	4642      	mov	r2, r8
 80029aa:	464b      	mov	r3, r9
 80029ac:	1891      	adds	r1, r2, r2
 80029ae:	61b9      	str	r1, [r7, #24]
 80029b0:	415b      	adcs	r3, r3
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b8:	4641      	mov	r1, r8
 80029ba:	1851      	adds	r1, r2, r1
 80029bc:	6139      	str	r1, [r7, #16]
 80029be:	4649      	mov	r1, r9
 80029c0:	414b      	adcs	r3, r1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029d0:	4659      	mov	r1, fp
 80029d2:	00cb      	lsls	r3, r1, #3
 80029d4:	4651      	mov	r1, sl
 80029d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029da:	4651      	mov	r1, sl
 80029dc:	00ca      	lsls	r2, r1, #3
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	4603      	mov	r3, r0
 80029e4:	4642      	mov	r2, r8
 80029e6:	189b      	adds	r3, r3, r2
 80029e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029ec:	464b      	mov	r3, r9
 80029ee:	460a      	mov	r2, r1
 80029f0:	eb42 0303 	adc.w	r3, r2, r3
 80029f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a10:	4649      	mov	r1, r9
 8002a12:	008b      	lsls	r3, r1, #2
 8002a14:	4641      	mov	r1, r8
 8002a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a1a:	4641      	mov	r1, r8
 8002a1c:	008a      	lsls	r2, r1, #2
 8002a1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a22:	f7fd ff27 	bl	8000874 <__aeabi_uldivmod>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <UART_SetConfig+0x4e4>)
 8002a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2264      	movs	r2, #100	; 0x64
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	1acb      	subs	r3, r1, r3
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	3332      	adds	r3, #50	; 0x32
 8002a40:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <UART_SetConfig+0x4e4>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4c:	441c      	add	r4, r3
 8002a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a52:	2200      	movs	r2, #0
 8002a54:	673b      	str	r3, [r7, #112]	; 0x70
 8002a56:	677a      	str	r2, [r7, #116]	; 0x74
 8002a58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a5c:	4642      	mov	r2, r8
 8002a5e:	464b      	mov	r3, r9
 8002a60:	1891      	adds	r1, r2, r2
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	415b      	adcs	r3, r3
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a6c:	4641      	mov	r1, r8
 8002a6e:	1851      	adds	r1, r2, r1
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	4649      	mov	r1, r9
 8002a74:	414b      	adcs	r3, r1
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a84:	4659      	mov	r1, fp
 8002a86:	00cb      	lsls	r3, r1, #3
 8002a88:	4651      	mov	r1, sl
 8002a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a8e:	4651      	mov	r1, sl
 8002a90:	00ca      	lsls	r2, r1, #3
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	4603      	mov	r3, r0
 8002a98:	4642      	mov	r2, r8
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	eb42 0303 	adc.w	r3, r2, r3
 8002aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ab2:	667a      	str	r2, [r7, #100]	; 0x64
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ac0:	4649      	mov	r1, r9
 8002ac2:	008b      	lsls	r3, r1, #2
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aca:	4641      	mov	r1, r8
 8002acc:	008a      	lsls	r2, r1, #2
 8002ace:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ad2:	f7fd fecf 	bl	8000874 <__aeabi_uldivmod>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <UART_SetConfig+0x4e4>)
 8002adc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	2164      	movs	r1, #100	; 0x64
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	3332      	adds	r3, #50	; 0x32
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <UART_SetConfig+0x4e4>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	f003 020f 	and.w	r2, r3, #15
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4422      	add	r2, r4
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b10:	51eb851f 	.word	0x51eb851f

08002b14 <memset>:
 8002b14:	4402      	add	r2, r0
 8002b16:	4603      	mov	r3, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	4d0d      	ldr	r5, [pc, #52]	; (8002b5c <__libc_init_array+0x38>)
 8002b28:	4c0d      	ldr	r4, [pc, #52]	; (8002b60 <__libc_init_array+0x3c>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	2600      	movs	r6, #0
 8002b30:	42a6      	cmp	r6, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	4d0b      	ldr	r5, [pc, #44]	; (8002b64 <__libc_init_array+0x40>)
 8002b36:	4c0c      	ldr	r4, [pc, #48]	; (8002b68 <__libc_init_array+0x44>)
 8002b38:	f000 f818 	bl	8002b6c <_init>
 8002b3c:	1b64      	subs	r4, r4, r5
 8002b3e:	10a4      	asrs	r4, r4, #2
 8002b40:	2600      	movs	r6, #0
 8002b42:	42a6      	cmp	r6, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4c:	4798      	blx	r3
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b56:	4798      	blx	r3
 8002b58:	3601      	adds	r6, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	08002ba4 	.word	0x08002ba4
 8002b60:	08002ba4 	.word	0x08002ba4
 8002b64:	08002ba4 	.word	0x08002ba4
 8002b68:	08002ba8 	.word	0x08002ba8

08002b6c <_init>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	bf00      	nop
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr

08002b78 <_fini>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	bf00      	nop
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr
