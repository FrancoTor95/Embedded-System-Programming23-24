
mpu_i2c_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cdc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec0  08002ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002ed4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002ed4  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000884b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001800  00000000  00000000  000288ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  0002a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000598  00000000  00000000  0002a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020560  00000000  00000000  0002adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f90  00000000  00000000  0004b320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4a7d  00000000  00000000  000552b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001db8  00000000  00000000  00119d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e88 	.word	0x08002e88

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002e88 	.word	0x08002e88

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2f>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a8:	bf24      	itt	cs
 80009aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b2:	d90d      	bls.n	80009d0 <__aeabi_d2f+0x30>
 80009b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c8:	bf08      	it	eq
 80009ca:	f020 0001 	biceq.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d4:	d121      	bne.n	8000a1a <__aeabi_d2f+0x7a>
 80009d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009da:	bfbc      	itt	lt
 80009dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	4770      	bxlt	lr
 80009e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ea:	f1c2 0218 	rsb	r2, r2, #24
 80009ee:	f1c2 0c20 	rsb	ip, r2, #32
 80009f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f6:	fa20 f002 	lsr.w	r0, r0, r2
 80009fa:	bf18      	it	ne
 80009fc:	f040 0001 	orrne.w	r0, r0, #1
 8000a00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a0c:	ea40 000c 	orr.w	r0, r0, ip
 8000a10:	fa23 f302 	lsr.w	r3, r3, r2
 8000a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a18:	e7cc      	b.n	80009b4 <__aeabi_d2f+0x14>
 8000a1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1e:	d107      	bne.n	8000a30 <__aeabi_d2f+0x90>
 8000a20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a24:	bf1e      	ittt	ne
 8000a26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2e:	4770      	bxne	lr
 8000a30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_uldivmod>:
 8000a40:	b953      	cbnz	r3, 8000a58 <__aeabi_uldivmod+0x18>
 8000a42:	b94a      	cbnz	r2, 8000a58 <__aeabi_uldivmod+0x18>
 8000a44:	2900      	cmp	r1, #0
 8000a46:	bf08      	it	eq
 8000a48:	2800      	cmpeq	r0, #0
 8000a4a:	bf1c      	itt	ne
 8000a4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a50:	f04f 30ff 	movne.w	r0, #4294967295
 8000a54:	f000 b970 	b.w	8000d38 <__aeabi_idiv0>
 8000a58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a60:	f000 f806 	bl	8000a70 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr

08000a70 <__udivmoddi4>:
 8000a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a74:	9e08      	ldr	r6, [sp, #32]
 8000a76:	460d      	mov	r5, r1
 8000a78:	4604      	mov	r4, r0
 8000a7a:	460f      	mov	r7, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d14a      	bne.n	8000b16 <__udivmoddi4+0xa6>
 8000a80:	428a      	cmp	r2, r1
 8000a82:	4694      	mov	ip, r2
 8000a84:	d965      	bls.n	8000b52 <__udivmoddi4+0xe2>
 8000a86:	fab2 f382 	clz	r3, r2
 8000a8a:	b143      	cbz	r3, 8000a9e <__udivmoddi4+0x2e>
 8000a8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a90:	f1c3 0220 	rsb	r2, r3, #32
 8000a94:	409f      	lsls	r7, r3
 8000a96:	fa20 f202 	lsr.w	r2, r0, r2
 8000a9a:	4317      	orrs	r7, r2
 8000a9c:	409c      	lsls	r4, r3
 8000a9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aa2:	fa1f f58c 	uxth.w	r5, ip
 8000aa6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000aaa:	0c22      	lsrs	r2, r4, #16
 8000aac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ab0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ab4:	fb01 f005 	mul.w	r0, r1, r5
 8000ab8:	4290      	cmp	r0, r2
 8000aba:	d90a      	bls.n	8000ad2 <__udivmoddi4+0x62>
 8000abc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ac4:	f080 811c 	bcs.w	8000d00 <__udivmoddi4+0x290>
 8000ac8:	4290      	cmp	r0, r2
 8000aca:	f240 8119 	bls.w	8000d00 <__udivmoddi4+0x290>
 8000ace:	3902      	subs	r1, #2
 8000ad0:	4462      	add	r2, ip
 8000ad2:	1a12      	subs	r2, r2, r0
 8000ad4:	b2a4      	uxth	r4, r4
 8000ad6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ada:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ade:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ae2:	fb00 f505 	mul.w	r5, r0, r5
 8000ae6:	42a5      	cmp	r5, r4
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x90>
 8000aea:	eb1c 0404 	adds.w	r4, ip, r4
 8000aee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af2:	f080 8107 	bcs.w	8000d04 <__udivmoddi4+0x294>
 8000af6:	42a5      	cmp	r5, r4
 8000af8:	f240 8104 	bls.w	8000d04 <__udivmoddi4+0x294>
 8000afc:	4464      	add	r4, ip
 8000afe:	3802      	subs	r0, #2
 8000b00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b04:	1b64      	subs	r4, r4, r5
 8000b06:	2100      	movs	r1, #0
 8000b08:	b11e      	cbz	r6, 8000b12 <__udivmoddi4+0xa2>
 8000b0a:	40dc      	lsrs	r4, r3
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0xbc>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f000 80ed 	beq.w	8000cfa <__udivmoddi4+0x28a>
 8000b20:	2100      	movs	r1, #0
 8000b22:	e9c6 0500 	strd	r0, r5, [r6]
 8000b26:	4608      	mov	r0, r1
 8000b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2c:	fab3 f183 	clz	r1, r3
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d149      	bne.n	8000bc8 <__udivmoddi4+0x158>
 8000b34:	42ab      	cmp	r3, r5
 8000b36:	d302      	bcc.n	8000b3e <__udivmoddi4+0xce>
 8000b38:	4282      	cmp	r2, r0
 8000b3a:	f200 80f8 	bhi.w	8000d2e <__udivmoddi4+0x2be>
 8000b3e:	1a84      	subs	r4, r0, r2
 8000b40:	eb65 0203 	sbc.w	r2, r5, r3
 8000b44:	2001      	movs	r0, #1
 8000b46:	4617      	mov	r7, r2
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d0e2      	beq.n	8000b12 <__udivmoddi4+0xa2>
 8000b4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000b50:	e7df      	b.n	8000b12 <__udivmoddi4+0xa2>
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xe6>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f382 	clz	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f040 8090 	bne.w	8000c80 <__udivmoddi4+0x210>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f fe8c 	uxth.w	lr, ip
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b70:	fb07 2015 	mls	r0, r7, r5, r2
 8000b74:	0c22      	lsrs	r2, r4, #16
 8000b76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b7a:	fb0e f005 	mul.w	r0, lr, r5
 8000b7e:	4290      	cmp	r0, r2
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x124>
 8000b82:	eb1c 0202 	adds.w	r2, ip, r2
 8000b86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x122>
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	f200 80cb 	bhi.w	8000d28 <__udivmoddi4+0x2b8>
 8000b92:	4645      	mov	r5, r8
 8000b94:	1a12      	subs	r2, r2, r0
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ba0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x14e>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb4:	d202      	bcs.n	8000bbc <__udivmoddi4+0x14c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f200 80bb 	bhi.w	8000d32 <__udivmoddi4+0x2c2>
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	eba4 040e 	sub.w	r4, r4, lr
 8000bc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bc6:	e79f      	b.n	8000b08 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0720 	rsb	r7, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000bda:	fa20 f307 	lsr.w	r3, r0, r7
 8000bde:	40fd      	lsrs	r5, r7
 8000be0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	fb09 5518 	mls	r5, r9, r8, r5
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000bfc:	42a5      	cmp	r5, r4
 8000bfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000c02:	fa00 f001 	lsl.w	r0, r0, r1
 8000c06:	d90b      	bls.n	8000c20 <__udivmoddi4+0x1b0>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c10:	f080 8088 	bcs.w	8000d24 <__udivmoddi4+0x2b4>
 8000c14:	42a5      	cmp	r5, r4
 8000c16:	f240 8085 	bls.w	8000d24 <__udivmoddi4+0x2b4>
 8000c1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c1e:	4464      	add	r4, ip
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	b29d      	uxth	r5, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1da>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c40:	d26c      	bcs.n	8000d1c <__udivmoddi4+0x2ac>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	d96a      	bls.n	8000d1c <__udivmoddi4+0x2ac>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	42ac      	cmp	r4, r5
 8000c58:	46c8      	mov	r8, r9
 8000c5a:	46ae      	mov	lr, r5
 8000c5c:	d356      	bcc.n	8000d0c <__udivmoddi4+0x29c>
 8000c5e:	d053      	beq.n	8000d08 <__udivmoddi4+0x298>
 8000c60:	b156      	cbz	r6, 8000c78 <__udivmoddi4+0x208>
 8000c62:	ebb0 0208 	subs.w	r2, r0, r8
 8000c66:	eb64 040e 	sbc.w	r4, r4, lr
 8000c6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c6e:	40ca      	lsrs	r2, r1
 8000c70:	40cc      	lsrs	r4, r1
 8000c72:	4317      	orrs	r7, r2
 8000c74:	e9c6 7400 	strd	r7, r4, [r6]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c80:	f1c3 0120 	rsb	r1, r3, #32
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	fa20 f201 	lsr.w	r2, r0, r1
 8000c8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000c90:	409d      	lsls	r5, r3
 8000c92:	432a      	orrs	r2, r5
 8000c94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c98:	fa1f fe8c 	uxth.w	lr, ip
 8000c9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca0:	fb07 1510 	mls	r5, r7, r0, r1
 8000ca4:	0c11      	lsrs	r1, r2, #16
 8000ca6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000caa:	fb00 f50e 	mul.w	r5, r0, lr
 8000cae:	428d      	cmp	r5, r1
 8000cb0:	fa04 f403 	lsl.w	r4, r4, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x258>
 8000cb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cbe:	d22f      	bcs.n	8000d20 <__udivmoddi4+0x2b0>
 8000cc0:	428d      	cmp	r5, r1
 8000cc2:	d92d      	bls.n	8000d20 <__udivmoddi4+0x2b0>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	4461      	add	r1, ip
 8000cc8:	1b49      	subs	r1, r1, r5
 8000cca:	b292      	uxth	r2, r2
 8000ccc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000cd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000cdc:	4291      	cmp	r1, r2
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x282>
 8000ce0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce8:	d216      	bcs.n	8000d18 <__udivmoddi4+0x2a8>
 8000cea:	4291      	cmp	r1, r2
 8000cec:	d914      	bls.n	8000d18 <__udivmoddi4+0x2a8>
 8000cee:	3d02      	subs	r5, #2
 8000cf0:	4462      	add	r2, ip
 8000cf2:	1a52      	subs	r2, r2, r1
 8000cf4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cf8:	e738      	b.n	8000b6c <__udivmoddi4+0xfc>
 8000cfa:	4631      	mov	r1, r6
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	e708      	b.n	8000b12 <__udivmoddi4+0xa2>
 8000d00:	4639      	mov	r1, r7
 8000d02:	e6e6      	b.n	8000ad2 <__udivmoddi4+0x62>
 8000d04:	4610      	mov	r0, r2
 8000d06:	e6fb      	b.n	8000b00 <__udivmoddi4+0x90>
 8000d08:	4548      	cmp	r0, r9
 8000d0a:	d2a9      	bcs.n	8000c60 <__udivmoddi4+0x1f0>
 8000d0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d14:	3b01      	subs	r3, #1
 8000d16:	e7a3      	b.n	8000c60 <__udivmoddi4+0x1f0>
 8000d18:	4645      	mov	r5, r8
 8000d1a:	e7ea      	b.n	8000cf2 <__udivmoddi4+0x282>
 8000d1c:	462b      	mov	r3, r5
 8000d1e:	e794      	b.n	8000c4a <__udivmoddi4+0x1da>
 8000d20:	4640      	mov	r0, r8
 8000d22:	e7d1      	b.n	8000cc8 <__udivmoddi4+0x258>
 8000d24:	46d0      	mov	r8, sl
 8000d26:	e77b      	b.n	8000c20 <__udivmoddi4+0x1b0>
 8000d28:	3d02      	subs	r5, #2
 8000d2a:	4462      	add	r2, ip
 8000d2c:	e732      	b.n	8000b94 <__udivmoddi4+0x124>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e70a      	b.n	8000b48 <__udivmoddi4+0xd8>
 8000d32:	4464      	add	r4, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e742      	b.n	8000bbe <__udivmoddi4+0x14e>

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d40:	f000 fc50 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d44:	f000 f80c 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d48:	f000 f8a6 	bl	8000e98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d4c:	f000 f87a 	bl	8000e44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // check device ID WHO_AM_I
  MPU6050_Init();
 8000d50:	f000 fac0 	bl	80012d4 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel();
 8000d54:	f000 faf0 	bl	8001338 <MPU6050_Read_Accel>
	  HAL_Delay(100);
 8000d58:	2064      	movs	r0, #100	; 0x64
 8000d5a:	f000 fcb5 	bl	80016c8 <HAL_Delay>
	  MPU6050_Read_Accel();
 8000d5e:	e7f9      	b.n	8000d54 <main+0x18>

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2234      	movs	r2, #52	; 0x34
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 f85e 	bl	8002e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <SystemClock_Config+0xdc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a2b      	ldr	r2, [pc, #172]	; (8000e3c <SystemClock_Config+0xdc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <SystemClock_Config+0xdc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <SystemClock_Config+0xe0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <SystemClock_Config+0xe0>)
 8000daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <SystemClock_Config+0xe0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000dd4:	23b4      	movs	r3, #180	; 0xb4
 8000dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fabf 	bl	800236c <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000df4:	f000 f8be 	bl	8000f74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000df8:	f000 ff1e 	bl	8001c38 <HAL_PWREx_EnableOverDrive>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e02:	f000 f8b7 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	230f      	movs	r3, #15
 8000e08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	2105      	movs	r1, #5
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 ff57 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e30:	f000 f8a0 	bl	8000f74 <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3750      	adds	r7, #80	; 0x50
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40007000 	.word	0x40007000

08000e44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <MX_USART2_UART_Init+0x50>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	f001 fd14 	bl	80028a8 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e86:	f000 f875 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000028 	.word	0x20000028
 8000e94:	40004400 	.word	0x40004400

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a2c      	ldr	r2, [pc, #176]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a25      	ldr	r2, [pc, #148]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_GPIO_Init+0xd0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2120      	movs	r1, #32
 8000f22:	4812      	ldr	r0, [pc, #72]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000f24:	f000 fe6e 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480c      	ldr	r0, [pc, #48]	; (8000f70 <MX_GPIO_Init+0xd8>)
 8000f40:	f000 fccc 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f44:	2320      	movs	r3, #32
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000f5c:	f000 fcbe 	bl	80018dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020800 	.word	0x40020800

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <I2C_Write>:

float Ax = 0.0;
float Ay = 0.0;
float Az = 0.0;

void I2C_Write(uint8_t data) {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	/**** STEPS FOLLOWED  ************
	1. Wait for the TXE (bit 7 in SR1) to set. This indicates that the DR is empty
	2. Send the DATA to the DR Register
	3. Wait for the BTF (bit 2 in SR1) to set. This indicates the end of LAST DATA transmission
	*/
	while (!(I2C1->SR1 & (1<< I2C_SR1_TXE_Pos)));  // wait for TXE bit to set
 8000f8a:	bf00      	nop
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <I2C_Write+0x3c>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f9      	beq.n	8000f8c <I2C_Write+0xc>
	I2C1->DR = data;
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <I2C_Write+0x3c>)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1<< I2C_SR1_BTF_Pos)));  // wait for BTF bit to set
 8000f9e:	bf00      	nop
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <I2C_Write+0x3c>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f9      	beq.n	8000fa0 <I2C_Write+0x20>
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40005400 	.word	0x40005400

08000fc0 <I2C_Start>:

void I2C_Start() {
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	/**** STEPS FOLLOWED  ************
	1. Enable the ACK
	2. Send the START condition
	3. Wait for the SB ( Bit 0 in SR1) to set. This indicates that the start condition is generated
	*/
	I2C1->CR1 |= (1 << I2C_CR1_START_Pos);  // Generate START
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <I2C_Start+0x2c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <I2C_Start+0x2c>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & (1 << I2C_SR1_SB_Pos)));  // wait for ADDR bit to set
 8000fd0:	bf00      	nop
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <I2C_Start+0x2c>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f9      	beq.n	8000fd2 <I2C_Start+0x12>
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40005400 	.word	0x40005400

08000ff0 <I2C_Address>:

void I2C_Address(uint8_t address) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	/**** STEPS FOLLOWED  ************
	1. Send the Slave Address to the DR Register
	2. Wait for the ADDR (bit 1 in SR1) to set. This indicates the end of address transmission
	3. clear the ADDR by reading the SR1 and SR2
	*/
	uint8_t temp = I2C1->SR1;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <I2C_Address+0x40>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	73fb      	strb	r3, [r7, #15]
	I2C1->DR = address;  							//  send the address
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <I2C_Address+0x40>)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1 << I2C_SR1_ADDR_Pos)));  // wait for ADDR bit to set
 8001006:	bf00      	nop
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <I2C_Address+0x40>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f9      	beq.n	8001008 <I2C_Address+0x18>
	temp = I2C1->SR1 | I2C1->SR2;  					// read SR1 and SR2 to clear the ADDR bit
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <I2C_Address+0x40>)
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <I2C_Address+0x40>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	73fb      	strb	r3, [r7, #15]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40005400 	.word	0x40005400

08001034 <I2C_Read>:

void I2C_Read(uint8_t address, uint8_t *buffer, size_t size) {
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	73fb      	strb	r3, [r7, #15]
		f) To generate the nonacknowledge pulse after the last received data byte, the ACK bit must be cleared just after reading the
			 second last data byte (after second last RxNE event)
		g) In order to generate the Stop/Restart condition, software must set the STOP/START bit
		   after reading the second last data byte (after the second last RxNE event)
	*/
	int remaining = size;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	617b      	str	r3, [r7, #20]

	/**** STEP 1 ****/
		if(size == 1) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d12e      	bne.n	80010aa <I2C_Read+0x76>
			/**** STEP 1-a ****/
			I2C1->DR = address;  //  send the address
 800104c:	4a49      	ldr	r2, [pc, #292]	; (8001174 <I2C_Read+0x140>)
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	6113      	str	r3, [r2, #16]
			while(!(I2C1->SR1 & (1<<1)));  // wait for ADDR bit to set
 8001052:	bf00      	nop
 8001054:	4b47      	ldr	r3, [pc, #284]	; (8001174 <I2C_Read+0x140>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f9      	beq.n	8001054 <I2C_Read+0x20>

			/**** STEP 1-b ****/
			I2C1->CR1 &= ~(1<<10);  // clear the ACK bit
 8001060:	4b44      	ldr	r3, [pc, #272]	; (8001174 <I2C_Read+0x140>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a43      	ldr	r2, [pc, #268]	; (8001174 <I2C_Read+0x140>)
 8001066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
			uint8_t temp = I2C1->SR1 | I2C1->SR2;  // read SR1 and SR2 to clear the ADDR bit.... EV6 condition
 800106c:	4b41      	ldr	r3, [pc, #260]	; (8001174 <I2C_Read+0x140>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b40      	ldr	r3, [pc, #256]	; (8001174 <I2C_Read+0x140>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	74bb      	strb	r3, [r7, #18]
			I2C1->CR1 |= (1<<9);  // Stop I2C
 800107c:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <I2C_Read+0x140>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a3c      	ldr	r2, [pc, #240]	; (8001174 <I2C_Read+0x140>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]

			/**** STEP 1-c ****/
			while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
 8001088:	bf00      	nop
 800108a:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <I2C_Read+0x140>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f9      	beq.n	800108a <I2C_Read+0x56>

			/**** STEP 1-d ****/
			buffer[size-remaining] = I2C1->DR;  // Read the data from the DATA REGISTER
 8001096:	4b37      	ldr	r3, [pc, #220]	; (8001174 <I2C_Read+0x140>)
 8001098:	6919      	ldr	r1, [r3, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	b2ca      	uxtb	r2, r1
 80010a6:	701a      	strb	r2, [r3, #0]

			// Read the Last BYTE
			while (!(I2C1->SR1 & (1 << I2C_SR1_RXNE_Pos)));  	// wait for RxNE to set
			buffer[size-remaining] = I2C1->DR;  // copy the data into the buffer
		}
}
 80010a8:	e05d      	b.n	8001166 <I2C_Read+0x132>
			I2C1->DR = address;  //  send the address
 80010aa:	4a32      	ldr	r2, [pc, #200]	; (8001174 <I2C_Read+0x140>)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	6113      	str	r3, [r2, #16]
			while(!(I2C1->SR1 & (1 << I2C_SR1_ADDR_Pos)));  // wait for ADDR bit to set
 80010b0:	bf00      	nop
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <I2C_Read+0x140>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f9      	beq.n	80010b2 <I2C_Read+0x7e>
			uint8_t temp = I2C1->SR1 | I2C1->SR2;  // read SR1 and SR2 to clear the ADDR bit
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <I2C_Read+0x140>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <I2C_Read+0x140>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	74fb      	strb	r3, [r7, #19]
			while(remaining > 2) {
 80010ce:	e018      	b.n	8001102 <I2C_Read+0xce>
				while(!(I2C1->SR1 & (1 << I2C_SR1_RXNE_Pos)));  // wait for RxNE to set
 80010d0:	bf00      	nop
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <I2C_Read+0x140>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f9      	beq.n	80010d2 <I2C_Read+0x9e>
				buffer[size-remaining] = I2C1->DR;  // copy the data into the buffer
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <I2C_Read+0x140>)
 80010e0:	6919      	ldr	r1, [r3, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	b2ca      	uxtb	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
				I2C1->CR1 |= 1 << I2C_CR1_ACK_Pos;  // Set the ACK bit to Acknowledge the data received
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <I2C_Read+0x140>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <I2C_Read+0x140>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fa:	6013      	str	r3, [r2, #0]
				remaining--;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3b01      	subs	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
			while(remaining > 2) {
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2b02      	cmp	r3, #2
 8001106:	dce3      	bgt.n	80010d0 <I2C_Read+0x9c>
			while(!(I2C1->SR1 & (1 << I2C_SR1_RXNE_Pos)));  // wait for RxNE to set
 8001108:	bf00      	nop
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <I2C_Read+0x140>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f9      	beq.n	800110a <I2C_Read+0xd6>
			buffer[size-remaining] = I2C1->DR;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <I2C_Read+0x140>)
 8001118:	6919      	ldr	r1, [r3, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	b2ca      	uxtb	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 &= ~(1 << I2C_CR1_ACK_Pos);  // clear the ACK bit
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <I2C_Read+0x140>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a11      	ldr	r2, [pc, #68]	; (8001174 <I2C_Read+0x140>)
 800112e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
			I2C1->CR1 |= (1 << I2C_CR1_STOP_Pos);  // Stop I2C
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <I2C_Read+0x140>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <I2C_Read+0x140>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6013      	str	r3, [r2, #0]
			remaining--;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3b01      	subs	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
			while (!(I2C1->SR1 & (1 << I2C_SR1_RXNE_Pos)));  	// wait for RxNE to set
 8001146:	bf00      	nop
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <I2C_Read+0x140>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f9      	beq.n	8001148 <I2C_Read+0x114>
			buffer[size-remaining] = I2C1->DR;  // copy the data into the buffer
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <I2C_Read+0x140>)
 8001156:	6919      	ldr	r1, [r3, #16]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	4413      	add	r3, r2
 8001162:	b2ca      	uxtb	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40005400 	.word	0x40005400

08001178 <I2C_Stop>:

void I2C_Stop() {
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	/**** STEP 2-g ****/
	I2C1->CR1 |= (1 << I2C_CR1_STOP_Pos);  // Stop I2C
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <I2C_Stop+0x1c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <I2C_Stop+0x1c>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40005400 	.word	0x40005400

08001198 <I2C_Config>:

void I2C_Config() {
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1 << RCC_AHB1ENR_GPIOBEN_Pos);  // Enable GPIOB CLOCK
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <I2C_Config+0xac>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <I2C_Config+0xac>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER 	|= (2 << 16) | (2 << 18);  	// Bits (17:16)= 1:0 --> Alternate Function for Pin PB8;
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <I2C_Config+0xb0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a26      	ldr	r2, [pc, #152]	; (8001248 <I2C_Config+0xb0>)
 80011ae:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80011b2:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER 	|= (1 << 8)  | (1 << 9);  	// Bit8=1, Bit9=1  output open drain
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <I2C_Config+0xb0>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a23      	ldr	r2, [pc, #140]	; (8001248 <I2C_Config+0xb0>)
 80011ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80011be:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR 	|= (3 << 16) | (3 << 18);  	// Bits (17:16)= 1:1 --> High Speed for PIN PB8; Bits (19:18)= 1:1 --> High Speed for PIN PB9
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <I2C_Config+0xb0>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a20      	ldr	r2, [pc, #128]	; (8001248 <I2C_Config+0xb0>)
 80011c6:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80011ca:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR 	|= (1 << 16) | (1 << 18);  	// Bits (17:16)= 0:1 --> Pull up for PIN PB8; Bits (19:18)= 0:1 --> pull up for PIN PB9
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <I2C_Config+0xb0>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <I2C_Config+0xb0>)
 80011d2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80011d6:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] 	|= (4 << 0)  | (4 << 4);  	// Bits (3:2:1:0) = 0:1:0:0 --> AF4 for pin PB8;  Bits (7:6:5:4) = 0:1:0:0 --> AF4 for pin PB9
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <I2C_Config+0xb0>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <I2C_Config+0xb0>)
 80011de:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80011e2:	6253      	str	r3, [r2, #36]	; 0x24


	RCC->APB1ENR |= (1 << RCC_APB1ENR_I2C1EN_Pos);  // Enable I2C1 CLOCK
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <I2C_Config+0xac>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <I2C_Config+0xac>)
 80011ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ee:	6413      	str	r3, [r2, #64]	; 0x40

	I2C1->CR1 	|= (1 << I2C_CR1_SWRST_Pos);  	// reset the I2C
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <I2C_Config+0xb4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a15      	ldr	r2, [pc, #84]	; (800124c <I2C_Config+0xb4>)
 80011f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fa:	6013      	str	r3, [r2, #0]
	I2C1->CR1 	&= ~(1 << I2C_CR1_SWRST_Pos);  	// Normal operation
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <I2C_Config+0xb4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <I2C_Config+0xb4>)
 8001202:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001206:	6013      	str	r3, [r2, #0]
	// Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	I2C1->CR2 	|= (45 << 0);  					// PCLK1 FREQUENCY in MHz
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <I2C_Config+0xb4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <I2C_Config+0xb4>)
 800120e:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8001212:	6053      	str	r3, [r2, #4]
	// Configure the clock control registers
	I2C1->CCR 	= 225 << 0;  					// computed as reported on github
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <I2C_Config+0xb4>)
 8001216:	22e1      	movs	r2, #225	; 0xe1
 8001218:	61da      	str	r2, [r3, #28]
	// Configure the rise time register
	I2C1->TRISE = 46;  							// computed as reported on github
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <I2C_Config+0xb4>)
 800121c:	222e      	movs	r2, #46	; 0x2e
 800121e:	621a      	str	r2, [r3, #32]
	// Program the I2C_CR1 register to enable the peripheral
	I2C1->CR1 	|= (1 << I2C_CR1_ACK_Pos);  	// Enable the ACK
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <I2C_Config+0xb4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a09      	ldr	r2, [pc, #36]	; (800124c <I2C_Config+0xb4>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 	|= (1 << 0);  	// Enable I2C
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <I2C_Config+0xb4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <I2C_Config+0xb4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40020400 	.word	0x40020400
 800124c:	40005400 	.word	0x40005400

08001250 <MPU_Write>:

void MPU_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	717b      	strb	r3, [r7, #5]
	2. Send the ADDRESS of the Device
	3. Send the ADDRESS of the Register, where you want to write the data to
	4. Send the DATA
	5. STOP the I2C
	*/
	I2C_Start();
 8001262:	f7ff fead 	bl	8000fc0 <I2C_Start>
	I2C_Address(address);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fec1 	bl	8000ff0 <I2C_Address>
	I2C_Write(reg);
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe85 	bl	8000f80 <I2C_Write>
	I2C_Write(data);
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe81 	bl	8000f80 <I2C_Write>
	I2C_Stop();
 800127e:	f7ff ff7b 	bl	8001178 <I2C_Stop>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <MPU_Read>:

void MPU_Read(uint8_t address, uint8_t reg, uint8_t *buffer, uint8_t size)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	603a      	str	r2, [r7, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	460b      	mov	r3, r1
 800129a:	71bb      	strb	r3, [r7, #6]
 800129c:	4613      	mov	r3, r2
 800129e:	717b      	strb	r3, [r7, #5]
	4. Send the RESTART condition
	5. Send the Address (READ) of the device
	6. Read the data
	7. STOP the I2C
	*/
	I2C_Start();
 80012a0:	f7ff fe8e 	bl	8000fc0 <I2C_Start>
	I2C_Address(address);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fea2 	bl	8000ff0 <I2C_Address>
	I2C_Write(reg); 		// R/W 0
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fe66 	bl	8000f80 <I2C_Write>
	I2C_Start();  			// repeated start
 80012b4:	f7ff fe84 	bl	8000fc0 <I2C_Start>
	I2C_Read(address + 0x01, buffer, size);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	3301      	adds	r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	797a      	ldrb	r2, [r7, #5]
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff feb6 	bl	8001034 <I2C_Read>
	I2C_Stop();
 80012c8:	f7ff ff56 	bl	8001178 <I2C_Stop>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <MPU6050_Init>:

void MPU6050_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	uint8_t check;
	uint8_t Data;

	I2C_Config();
 80012da:	f7ff ff5d 	bl	8001198 <I2C_Config>

	// check device ID WHO_AM_I

	MPU_Read(MPU_6050_ADDRESS, WHO_AM_I_REG, &check, 1);
 80012de:	1dba      	adds	r2, r7, #6
 80012e0:	2301      	movs	r3, #1
 80012e2:	2175      	movs	r1, #117	; 0x75
 80012e4:	20d0      	movs	r0, #208	; 0xd0
 80012e6:	f7ff ffd0 	bl	800128a <MPU_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	2b68      	cmp	r3, #104	; 0x68
 80012ee:	d11f      	bne.n	8001330 <MPU6050_Init+0x5c>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	71fb      	strb	r3, [r7, #7]
		MPU_Write (MPU_6050_ADDRESS, PWR_MGMT_1_REG, Data);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	461a      	mov	r2, r3
 80012f8:	216b      	movs	r1, #107	; 0x6b
 80012fa:	20d0      	movs	r0, #208	; 0xd0
 80012fc:	f7ff ffa8 	bl	8001250 <MPU_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001300:	2307      	movs	r3, #7
 8001302:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU_6050_ADDRESS, SMPLRT_DIV_REG, Data);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	461a      	mov	r2, r3
 8001308:	2119      	movs	r1, #25
 800130a:	20d0      	movs	r0, #208	; 0xd0
 800130c:	f7ff ffa0 	bl	8001250 <MPU_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ? 2g
		Data = 0x00;
 8001310:	2300      	movs	r3, #0
 8001312:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU_6050_ADDRESS, ACCEL_CONFIG_REG, Data);
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	461a      	mov	r2, r3
 8001318:	211c      	movs	r1, #28
 800131a:	20d0      	movs	r0, #208	; 0xd0
 800131c:	f7ff ff98 	bl	8001250 <MPU_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ? 250 ?/s
		Data = 0x00;
 8001320:	2300      	movs	r3, #0
 8001322:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU_6050_ADDRESS, GYRO_CONFIG_REG, Data);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	461a      	mov	r2, r3
 8001328:	211b      	movs	r1, #27
 800132a:	20d0      	movs	r0, #208	; 0xd0
 800132c:	f7ff ff90 	bl	8001250 <MPU_Write>
	}

}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0

	uint8_t Rx_data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	for(int i = 0; i < 6; i++) {
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	e00d      	b.n	8001360 <MPU6050_Read_Accel+0x28>
		MPU_Read(MPU_6050_ADDRESS, ACCEL_XOUT_H_REG + i, &Rx_data[i], 1);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	333b      	adds	r3, #59	; 0x3b
 800134a:	b2d9      	uxtb	r1, r3
 800134c:	1d3a      	adds	r2, r7, #4
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	441a      	add	r2, r3
 8001352:	2301      	movs	r3, #1
 8001354:	20d0      	movs	r0, #208	; 0xd0
 8001356:	f7ff ff98 	bl	800128a <MPU_Read>
	for(int i = 0; i < 6; i++) {
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b05      	cmp	r3, #5
 8001364:	ddee      	ble.n	8001344 <MPU6050_Read_Accel+0xc>
	}

	Accel_X_RAW = (int16_t)(Rx_data[0] << 8 | Rx_data[1]);
 8001366:	793b      	ldrb	r3, [r7, #4]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <MPU6050_Read_Accel+0xe4>)
 8001376:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rx_data[2] << 8 | Rx_data[3]);
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MPU6050_Read_Accel+0xe8>)
 8001388:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rx_data[4] << 8 | Rx_data[5]);
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21a      	sxth	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MPU6050_Read_Accel+0xec>)
 800139a:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MPU6050_Read_Accel+0xe4>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f880 	bl	80004a8 <__aeabi_i2d>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MPU6050_Read_Accel+0xf0>)
 80013ae:	f7ff fa0f 	bl	80007d0 <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff faf1 	bl	80009a0 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a1a      	ldr	r2, [pc, #104]	; (800142c <MPU6050_Read_Accel+0xf4>)
 80013c2:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MPU6050_Read_Accel+0xe8>)
 80013c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f86c 	bl	80004a8 <__aeabi_i2d>
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MPU6050_Read_Accel+0xf0>)
 80013d6:	f7ff f9fb 	bl	80007d0 <__aeabi_ddiv>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fadd 	bl	80009a0 <__aeabi_d2f>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <MPU6050_Read_Accel+0xf8>)
 80013ea:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <MPU6050_Read_Accel+0xec>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f858 	bl	80004a8 <__aeabi_i2d>
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MPU6050_Read_Accel+0xf0>)
 80013fe:	f7ff f9e7 	bl	80007d0 <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fac9 	bl	80009a0 <__aeabi_d2f>
 800140e:	4603      	mov	r3, r0
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <MPU6050_Read_Accel+0xfc>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000070 	.word	0x20000070
 8001420:	20000072 	.word	0x20000072
 8001424:	20000074 	.word	0x20000074
 8001428:	40d00000 	.word	0x40d00000
 800142c:	20000078 	.word	0x20000078
 8001430:	2000007c 	.word	0x2000007c
 8001434:	20000080 	.word	0x20000080

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_MspInit+0x4c>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x4c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001476:	2007      	movs	r0, #7
 8001478:	f000 f9fc 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_UART_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12b      	bne.n	8001502 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014e2:	230c      	movs	r3, #12
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f2:	2307      	movs	r3, #7
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_UART_MspInit+0x8c>)
 80014fe:	f000 f9ed 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40004400 	.word	0x40004400
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 f890 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001594:	f7ff ffea 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015be:	f001 fc3f 	bl	8002e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff fbbb 	bl	8000d3c <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015d4:	08002ec8 	.word	0x08002ec8
  ldr r2, =_sbss
 80015d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015dc:	20000088 	.word	0x20000088

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_Init+0x40>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_Init+0x40>)
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x40>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f931 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	2000      	movs	r0, #0
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff ff0e 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f93b 	bl	80018c2 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 f911 	bl	800188a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000
 8001680:	20000008 	.word	0x20000008
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000084 	.word	0x20000084

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000084 	.word	0x20000084

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_Delay+0x44>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ee:	bf00      	nop
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f7ff ff8e 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff47 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff5c 	bl	8001758 <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff8e 	bl	80017c8 <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffb0 	bl	8001830 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e165      	b.n	8001bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8154 	bne.w	8001bbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80ae 	beq.w	8001bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a5c      	ldr	r2, [pc, #368]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b5a      	ldr	r3, [pc, #360]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7e:	4a58      	ldr	r2, [pc, #352]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4f      	ldr	r2, [pc, #316]	; (8001be4 <HAL_GPIO_Init+0x308>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d025      	beq.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01f      	beq.n	8001af2 <HAL_GPIO_Init+0x216>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4d      	ldr	r2, [pc, #308]	; (8001bec <HAL_GPIO_Init+0x310>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d019      	beq.n	8001aee <HAL_GPIO_Init+0x212>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <HAL_GPIO_Init+0x314>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <HAL_GPIO_Init+0x318>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x20a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x206>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_GPIO_Init+0x320>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x202>
 8001ada:	2306      	movs	r3, #6
 8001adc:	e00c      	b.n	8001af8 <HAL_GPIO_Init+0x21c>
 8001ade:	2307      	movs	r3, #7
 8001ae0:	e00a      	b.n	8001af8 <HAL_GPIO_Init+0x21c>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x21c>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x21c>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x21c>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x21c>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x21c>
 8001af6:	2300      	movs	r3, #0
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b08:	4935      	ldr	r1, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b16:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b40:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b64:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	f67f ae96 	bls.w	80018f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40013800 	.word	0x40013800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	40020c00 	.word	0x40020c00
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40013c00 	.word	0x40013c00

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c20:	e003      	b.n	8001c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	619a      	str	r2, [r3, #24]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_PWREx_EnableOverDrive+0x94>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c64:	f7ff fd24 	bl	80016b0 <HAL_GetTick>
 8001c68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c6a:	e009      	b.n	8001c80 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c6c:	f7ff fd20 	bl	80016b0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c7a:	d901      	bls.n	8001c80 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e01f      	b.n	8001cc0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d1ee      	bne.n	8001c6c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c94:	f7ff fd0c 	bl	80016b0 <HAL_GetTick>
 8001c98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c9a:	e009      	b.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c9c:	f7ff fd08 	bl	80016b0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001caa:	d901      	bls.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e007      	b.n	8001cc0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cbc:	d1ee      	bne.n	8001c9c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	420e0040 	.word	0x420e0040
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	420e0044 	.word	0x420e0044

08001cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0cc      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b68      	ldr	r3, [pc, #416]	; (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d90c      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b65      	ldr	r3, [pc, #404]	; (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b8      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a58      	ldr	r2, [pc, #352]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	494d      	ldr	r1, [pc, #308]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d044      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d119      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e07f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e06f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e067      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4934      	ldr	r1, [pc, #208]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff fc72 	bl	80016b0 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff fc6e 	bl	80016b0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e04f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d20c      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e032      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4916      	ldr	r1, [pc, #88]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	490e      	ldr	r1, [pc, #56]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e5e:	f000 f855 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	490a      	ldr	r1, [pc, #40]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	5ccb      	ldrb	r3, [r1, r3]
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fbd2 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00
 8001e94:	40023800 	.word	0x40023800
 8001e98:	08002ea0 	.word	0x08002ea0
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ec0:	f7ff fff0 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08002eb0 	.word	0x08002eb0

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ee8:	f7ff ffdc 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0b5b      	lsrs	r3, r3, #13
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4903      	ldr	r1, [pc, #12]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	08002eb0 	.word	0x08002eb0

08001f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f10:	b0ae      	sub	sp, #184	; 0xb8
 8001f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f32:	4bcb      	ldr	r3, [pc, #812]	; (8002260 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	f200 8206 	bhi.w	800234c <HAL_RCC_GetSysClockFreq+0x440>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f7d 	.word	0x08001f7d
 8001f4c:	0800234d 	.word	0x0800234d
 8001f50:	0800234d 	.word	0x0800234d
 8001f54:	0800234d 	.word	0x0800234d
 8001f58:	08001f85 	.word	0x08001f85
 8001f5c:	0800234d 	.word	0x0800234d
 8001f60:	0800234d 	.word	0x0800234d
 8001f64:	0800234d 	.word	0x0800234d
 8001f68:	08001f8d 	.word	0x08001f8d
 8001f6c:	0800234d 	.word	0x0800234d
 8001f70:	0800234d 	.word	0x0800234d
 8001f74:	0800234d 	.word	0x0800234d
 8001f78:	0800217d 	.word	0x0800217d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4bb9      	ldr	r3, [pc, #740]	; (8002264 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001f82:	e1e7      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f84:	4bb8      	ldr	r3, [pc, #736]	; (8002268 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f8a:	e1e3      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f8c:	4bb4      	ldr	r3, [pc, #720]	; (8002260 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f98:	4bb1      	ldr	r3, [pc, #708]	; (8002260 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d071      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa4:	4bae      	ldr	r3, [pc, #696]	; (8002260 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	2200      	movs	r2, #0
 8001fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fb0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001fc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001fca:	4622      	mov	r2, r4
 8001fcc:	462b      	mov	r3, r5
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0159      	lsls	r1, r3, #5
 8001fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fdc:	0150      	lsls	r0, r2, #5
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	1a51      	subs	r1, r2, r1
 8001fe6:	6439      	str	r1, [r7, #64]	; 0x40
 8001fe8:	4629      	mov	r1, r5
 8001fea:	eb63 0301 	sbc.w	r3, r3, r1
 8001fee:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	018b      	lsls	r3, r1, #6
 8002000:	4641      	mov	r1, r8
 8002002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002006:	4641      	mov	r1, r8
 8002008:	018a      	lsls	r2, r1, #6
 800200a:	4641      	mov	r1, r8
 800200c:	1a51      	subs	r1, r2, r1
 800200e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002010:	4649      	mov	r1, r9
 8002012:	eb63 0301 	sbc.w	r3, r3, r1
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002024:	4649      	mov	r1, r9
 8002026:	00cb      	lsls	r3, r1, #3
 8002028:	4641      	mov	r1, r8
 800202a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800202e:	4641      	mov	r1, r8
 8002030:	00ca      	lsls	r2, r1, #3
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	4603      	mov	r3, r0
 8002038:	4622      	mov	r2, r4
 800203a:	189b      	adds	r3, r3, r2
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
 800203e:	462b      	mov	r3, r5
 8002040:	460a      	mov	r2, r1
 8002042:	eb42 0303 	adc.w	r3, r2, r3
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002054:	4629      	mov	r1, r5
 8002056:	024b      	lsls	r3, r1, #9
 8002058:	4621      	mov	r1, r4
 800205a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800205e:	4621      	mov	r1, r4
 8002060:	024a      	lsls	r2, r1, #9
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800206a:	2200      	movs	r2, #0
 800206c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002074:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002078:	f7fe fce2 	bl	8000a40 <__aeabi_uldivmod>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4613      	mov	r3, r2
 8002082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002086:	e067      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002088:	4b75      	ldr	r3, [pc, #468]	; (8002260 <HAL_RCC_GetSysClockFreq+0x354>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	2200      	movs	r2, #0
 8002090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002094:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800209c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020a2:	2300      	movs	r3, #0
 80020a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80020aa:	4622      	mov	r2, r4
 80020ac:	462b      	mov	r3, r5
 80020ae:	f04f 0000 	mov.w	r0, #0
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	0159      	lsls	r1, r3, #5
 80020b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020bc:	0150      	lsls	r0, r2, #5
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4621      	mov	r1, r4
 80020c4:	1a51      	subs	r1, r2, r1
 80020c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80020c8:	4629      	mov	r1, r5
 80020ca:	eb63 0301 	sbc.w	r3, r3, r1
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80020dc:	4649      	mov	r1, r9
 80020de:	018b      	lsls	r3, r1, #6
 80020e0:	4641      	mov	r1, r8
 80020e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020e6:	4641      	mov	r1, r8
 80020e8:	018a      	lsls	r2, r1, #6
 80020ea:	4641      	mov	r1, r8
 80020ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80020f0:	4649      	mov	r1, r9
 80020f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002102:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002106:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800210a:	4692      	mov	sl, r2
 800210c:	469b      	mov	fp, r3
 800210e:	4623      	mov	r3, r4
 8002110:	eb1a 0303 	adds.w	r3, sl, r3
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	462b      	mov	r3, r5
 8002118:	eb4b 0303 	adc.w	r3, fp, r3
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800212a:	4629      	mov	r1, r5
 800212c:	028b      	lsls	r3, r1, #10
 800212e:	4621      	mov	r1, r4
 8002130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002134:	4621      	mov	r1, r4
 8002136:	028a      	lsls	r2, r1, #10
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002140:	2200      	movs	r2, #0
 8002142:	673b      	str	r3, [r7, #112]	; 0x70
 8002144:	677a      	str	r2, [r7, #116]	; 0x74
 8002146:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800214a:	f7fe fc79 	bl	8000a40 <__aeabi_uldivmod>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4613      	mov	r3, r2
 8002154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002158:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_GetSysClockFreq+0x354>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	3301      	adds	r3, #1
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800216a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800216e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800217a:	e0eb      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800217c:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_RCC_GetSysClockFreq+0x354>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_RCC_GetSysClockFreq+0x354>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d06b      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <HAL_RCC_GetSysClockFreq+0x354>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	2200      	movs	r2, #0
 800219c:	66bb      	str	r3, [r7, #104]	; 0x68
 800219e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a6:	663b      	str	r3, [r7, #96]	; 0x60
 80021a8:	2300      	movs	r3, #0
 80021aa:	667b      	str	r3, [r7, #100]	; 0x64
 80021ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80021b0:	4622      	mov	r2, r4
 80021b2:	462b      	mov	r3, r5
 80021b4:	f04f 0000 	mov.w	r0, #0
 80021b8:	f04f 0100 	mov.w	r1, #0
 80021bc:	0159      	lsls	r1, r3, #5
 80021be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c2:	0150      	lsls	r0, r2, #5
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4621      	mov	r1, r4
 80021ca:	1a51      	subs	r1, r2, r1
 80021cc:	61b9      	str	r1, [r7, #24]
 80021ce:	4629      	mov	r1, r5
 80021d0:	eb63 0301 	sbc.w	r3, r3, r1
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80021e2:	4659      	mov	r1, fp
 80021e4:	018b      	lsls	r3, r1, #6
 80021e6:	4651      	mov	r1, sl
 80021e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ec:	4651      	mov	r1, sl
 80021ee:	018a      	lsls	r2, r1, #6
 80021f0:	4651      	mov	r1, sl
 80021f2:	ebb2 0801 	subs.w	r8, r2, r1
 80021f6:	4659      	mov	r1, fp
 80021f8:	eb63 0901 	sbc.w	r9, r3, r1
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002208:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800220c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002210:	4690      	mov	r8, r2
 8002212:	4699      	mov	r9, r3
 8002214:	4623      	mov	r3, r4
 8002216:	eb18 0303 	adds.w	r3, r8, r3
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	462b      	mov	r3, r5
 800221e:	eb49 0303 	adc.w	r3, r9, r3
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002230:	4629      	mov	r1, r5
 8002232:	024b      	lsls	r3, r1, #9
 8002234:	4621      	mov	r1, r4
 8002236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800223a:	4621      	mov	r1, r4
 800223c:	024a      	lsls	r2, r1, #9
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002246:	2200      	movs	r2, #0
 8002248:	65bb      	str	r3, [r7, #88]	; 0x58
 800224a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800224c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002250:	f7fe fbf6 	bl	8000a40 <__aeabi_uldivmod>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4613      	mov	r3, r2
 800225a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800225e:	e065      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x420>
 8002260:	40023800 	.word	0x40023800
 8002264:	00f42400 	.word	0x00f42400
 8002268:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226c:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_RCC_GetSysClockFreq+0x458>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	2200      	movs	r2, #0
 8002274:	4618      	mov	r0, r3
 8002276:	4611      	mov	r1, r2
 8002278:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800227c:	653b      	str	r3, [r7, #80]	; 0x50
 800227e:	2300      	movs	r3, #0
 8002280:	657b      	str	r3, [r7, #84]	; 0x54
 8002282:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002286:	4642      	mov	r2, r8
 8002288:	464b      	mov	r3, r9
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	0159      	lsls	r1, r3, #5
 8002294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002298:	0150      	lsls	r0, r2, #5
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4641      	mov	r1, r8
 80022a0:	1a51      	subs	r1, r2, r1
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	4649      	mov	r1, r9
 80022a6:	eb63 0301 	sbc.w	r3, r3, r1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022b8:	4659      	mov	r1, fp
 80022ba:	018b      	lsls	r3, r1, #6
 80022bc:	4651      	mov	r1, sl
 80022be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022c2:	4651      	mov	r1, sl
 80022c4:	018a      	lsls	r2, r1, #6
 80022c6:	4651      	mov	r1, sl
 80022c8:	1a54      	subs	r4, r2, r1
 80022ca:	4659      	mov	r1, fp
 80022cc:	eb63 0501 	sbc.w	r5, r3, r1
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	00eb      	lsls	r3, r5, #3
 80022da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022de:	00e2      	lsls	r2, r4, #3
 80022e0:	4614      	mov	r4, r2
 80022e2:	461d      	mov	r5, r3
 80022e4:	4643      	mov	r3, r8
 80022e6:	18e3      	adds	r3, r4, r3
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	464b      	mov	r3, r9
 80022ec:	eb45 0303 	adc.w	r3, r5, r3
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022fe:	4629      	mov	r1, r5
 8002300:	028b      	lsls	r3, r1, #10
 8002302:	4621      	mov	r1, r4
 8002304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002308:	4621      	mov	r1, r4
 800230a:	028a      	lsls	r2, r1, #10
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002314:	2200      	movs	r2, #0
 8002316:	64bb      	str	r3, [r7, #72]	; 0x48
 8002318:	64fa      	str	r2, [r7, #76]	; 0x4c
 800231a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800231e:	f7fe fb8f 	bl	8000a40 <__aeabi_uldivmod>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4613      	mov	r3, r2
 8002328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_RCC_GetSysClockFreq+0x458>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	0f1b      	lsrs	r3, r3, #28
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800233a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800233e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800234a:	e003      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_GetSysClockFreq+0x45c>)
 800234e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002352:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002354:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002358:	4618      	mov	r0, r3
 800235a:	37b8      	adds	r7, #184	; 0xb8
 800235c:	46bd      	mov	sp, r7
 800235e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	00f42400 	.word	0x00f42400

0800236c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e28d      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8083 	beq.w	8002492 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800238c:	4b94      	ldr	r3, [pc, #592]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b04      	cmp	r3, #4
 8002396:	d019      	beq.n	80023cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002398:	4b91      	ldr	r3, [pc, #580]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023a4:	4b8e      	ldr	r3, [pc, #568]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b0:	d00c      	beq.n	80023cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b2:	4b8b      	ldr	r3, [pc, #556]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d112      	bne.n	80023e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	4b84      	ldr	r3, [pc, #528]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d05b      	beq.n	8002490 <HAL_RCC_OscConfig+0x124>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d157      	bne.n	8002490 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e25a      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0x90>
 80023ee:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a7b      	ldr	r2, [pc, #492]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e01d      	b.n	8002438 <HAL_RCC_OscConfig+0xcc>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0xb4>
 8002406:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a75      	ldr	r2, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a72      	ldr	r2, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0xcc>
 8002420:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6e      	ldr	r2, [pc, #440]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b6c      	ldr	r3, [pc, #432]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6b      	ldr	r2, [pc, #428]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7ff f936 	bl	80016b0 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff f932 	bl	80016b0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e21f      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b61      	ldr	r3, [pc, #388]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0xdc>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff f922 	bl	80016b0 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff f91e 	bl	80016b0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e20b      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x104>
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d06f      	beq.n	800257e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800249e:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d017      	beq.n	80024da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024aa:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d105      	bne.n	80024c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024b6:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d11c      	bne.n	8002508 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d116      	bne.n	8002508 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_OscConfig+0x186>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e1d3      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4937      	ldr	r1, [pc, #220]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	e03a      	b.n	800257e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_OscConfig+0x278>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7ff f8cb 	bl	80016b0 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251e:	f7ff f8c7 	bl	80016b0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e1b4      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4925      	ldr	r1, [pc, #148]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_OscConfig+0x278>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff f8aa 	bl	80016b0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002560:	f7ff f8a6 	bl	80016b0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e193      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d036      	beq.n	80025f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d016      	beq.n	80025c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_RCC_OscConfig+0x27c>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7ff f88a 	bl	80016b0 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a0:	f7ff f886 	bl	80016b0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e173      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x274>)
 80025b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x234>
 80025be:	e01b      	b.n	80025f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_OscConfig+0x27c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7ff f873 	bl	80016b0 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	e00e      	b.n	80025ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ce:	f7ff f86f 	bl	80016b0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d907      	bls.n	80025ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e15c      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
 80025e0:	40023800 	.word	0x40023800
 80025e4:	42470000 	.word	0x42470000
 80025e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	4b8a      	ldr	r3, [pc, #552]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ea      	bne.n	80025ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8097 	beq.w	8002734 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b83      	ldr	r3, [pc, #524]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b7c      	ldr	r3, [pc, #496]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002636:	4b79      	ldr	r3, [pc, #484]	; (800281c <HAL_RCC_OscConfig+0x4b0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x4b0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x4b0>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264e:	f7ff f82f 	bl	80016b0 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002656:	f7ff f82b 	bl	80016b0 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e118      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x4b0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x31e>
 800267c:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x358>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b05      	cmp	r3, #5
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x340>
 8002692:	4b61      	ldr	r3, [pc, #388]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a60      	ldr	r2, [pc, #384]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
 800269e:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a5d      	ldr	r2, [pc, #372]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0x358>
 80026ac:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a59      	ldr	r2, [pc, #356]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a56      	ldr	r2, [pc, #344]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80026be:	f023 0304 	bic.w	r3, r3, #4
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d015      	beq.n	80026f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fff0 	bl	80016b0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe ffec 	bl	80016b0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e0d7      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ee      	beq.n	80026d4 <HAL_RCC_OscConfig+0x368>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fe ffda 	bl	80016b0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe ffd6 	bl	80016b0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0c1      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002716:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ee      	bne.n	8002700 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	4a3a      	ldr	r2, [pc, #232]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 800272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002732:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80ad 	beq.w	8002898 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800273e:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b08      	cmp	r3, #8
 8002748:	d060      	beq.n	800280c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d145      	bne.n	80027de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_RCC_OscConfig+0x4b4>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe ffaa 	bl	80016b0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe ffa6 	bl	80016b0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e093      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69da      	ldr	r2, [r3, #28]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	019b      	lsls	r3, r3, #6
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	3b01      	subs	r3, #1
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	071b      	lsls	r3, r3, #28
 80027aa:	491b      	ldr	r1, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x4b4>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe ff7b 	bl	80016b0 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe ff77 	bl	80016b0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e064      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x452>
 80027dc:	e05c      	b.n	8002898 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCC_OscConfig+0x4b4>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe ff64 	bl	80016b0 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe ff60 	bl	80016b0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04d      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_OscConfig+0x4ac>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x480>
 800280a:	e045      	b.n	8002898 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d107      	bne.n	8002824 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e040      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000
 8002820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_RCC_OscConfig+0x538>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d030      	beq.n	8002894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d129      	bne.n	8002894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d122      	bne.n	8002894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002854:	4013      	ands	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800285a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800285c:	4293      	cmp	r3, r2
 800285e:	d119      	bne.n	8002894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	3b01      	subs	r3, #1
 800286e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d10f      	bne.n	8002894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e042      	b.n	8002940 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fdda 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	; 0x24
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f82b 	bl	8002948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800294c:	b0c0      	sub	sp, #256	; 0x100
 800294e:	af00      	add	r7, sp, #0
 8002950:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002964:	68d9      	ldr	r1, [r3, #12]
 8002966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	ea40 0301 	orr.w	r3, r0, r1
 8002970:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	431a      	orrs	r2, r3
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	431a      	orrs	r2, r3
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029a0:	f021 010c 	bic.w	r1, r1, #12
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029ae:	430b      	orrs	r3, r1
 80029b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c2:	6999      	ldr	r1, [r3, #24]
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	ea40 0301 	orr.w	r3, r0, r1
 80029ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4b8f      	ldr	r3, [pc, #572]	; (8002c14 <UART_SetConfig+0x2cc>)
 80029d8:	429a      	cmp	r2, r3
 80029da:	d005      	beq.n	80029e8 <UART_SetConfig+0xa0>
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b8d      	ldr	r3, [pc, #564]	; (8002c18 <UART_SetConfig+0x2d0>)
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d104      	bne.n	80029f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029e8:	f7ff fa7c 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 80029ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029f0:	e003      	b.n	80029fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029f2:	f7ff fa63 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 80029f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a04:	f040 810c 	bne.w	8002c20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	1891      	adds	r1, r2, r2
 8002a20:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a22:	415b      	adcs	r3, r3
 8002a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	eb12 0801 	adds.w	r8, r2, r1
 8002a30:	4629      	mov	r1, r5
 8002a32:	eb43 0901 	adc.w	r9, r3, r1
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a4a:	4690      	mov	r8, r2
 8002a4c:	4699      	mov	r9, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	eb18 0303 	adds.w	r3, r8, r3
 8002a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a58:	462b      	mov	r3, r5
 8002a5a:	eb49 0303 	adc.w	r3, r9, r3
 8002a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a76:	460b      	mov	r3, r1
 8002a78:	18db      	adds	r3, r3, r3
 8002a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	eb42 0303 	adc.w	r3, r2, r3
 8002a82:	657b      	str	r3, [r7, #84]	; 0x54
 8002a84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a8c:	f7fd ffd8 	bl	8000a40 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <UART_SetConfig+0x2d4>)
 8002a96:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	011c      	lsls	r4, r3, #4
 8002a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002aa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002aac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ab0:	4642      	mov	r2, r8
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	1891      	adds	r1, r2, r2
 8002ab6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ab8:	415b      	adcs	r3, r3
 8002aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	eb43 0b01 	adc.w	fp, r3, r1
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ad8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae0:	4692      	mov	sl, r2
 8002ae2:	469b      	mov	fp, r3
 8002ae4:	4643      	mov	r3, r8
 8002ae6:	eb1a 0303 	adds.w	r3, sl, r3
 8002aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002aee:	464b      	mov	r3, r9
 8002af0:	eb4b 0303 	adc.w	r3, fp, r3
 8002af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	18db      	adds	r3, r3, r3
 8002b10:	643b      	str	r3, [r7, #64]	; 0x40
 8002b12:	4613      	mov	r3, r2
 8002b14:	eb42 0303 	adc.w	r3, r2, r3
 8002b18:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b22:	f7fd ff8d 	bl	8000a40 <__aeabi_uldivmod>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <UART_SetConfig+0x2d4>)
 8002b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2264      	movs	r2, #100	; 0x64
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	1acb      	subs	r3, r1, r3
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <UART_SetConfig+0x2d4>)
 8002b44:	fba3 2302 	umull	r2, r3, r3, r2
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b50:	441c      	add	r4, r3
 8002b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b64:	4642      	mov	r2, r8
 8002b66:	464b      	mov	r3, r9
 8002b68:	1891      	adds	r1, r2, r2
 8002b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b6c:	415b      	adcs	r3, r3
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b74:	4641      	mov	r1, r8
 8002b76:	1851      	adds	r1, r2, r1
 8002b78:	6339      	str	r1, [r7, #48]	; 0x30
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	414b      	adcs	r3, r1
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b8c:	4659      	mov	r1, fp
 8002b8e:	00cb      	lsls	r3, r1, #3
 8002b90:	4651      	mov	r1, sl
 8002b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b96:	4651      	mov	r1, sl
 8002b98:	00ca      	lsls	r2, r1, #3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ba8:	464b      	mov	r3, r9
 8002baa:	460a      	mov	r2, r1
 8002bac:	eb42 0303 	adc.w	r3, r2, r3
 8002bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bc8:	460b      	mov	r3, r1
 8002bca:	18db      	adds	r3, r3, r3
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	4613      	mov	r3, r2
 8002bd0:	eb42 0303 	adc.w	r3, r2, r3
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bde:	f7fd ff2f 	bl	8000a40 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <UART_SetConfig+0x2d4>)
 8002be8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	2164      	movs	r1, #100	; 0x64
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	3332      	adds	r3, #50	; 0x32
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <UART_SetConfig+0x2d4>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	f003 0207 	and.w	r2, r3, #7
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4422      	add	r2, r4
 8002c0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c10:	e106      	b.n	8002e20 <UART_SetConfig+0x4d8>
 8002c12:	bf00      	nop
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40011400 	.word	0x40011400
 8002c1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c24:	2200      	movs	r2, #0
 8002c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c32:	4642      	mov	r2, r8
 8002c34:	464b      	mov	r3, r9
 8002c36:	1891      	adds	r1, r2, r2
 8002c38:	6239      	str	r1, [r7, #32]
 8002c3a:	415b      	adcs	r3, r3
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c42:	4641      	mov	r1, r8
 8002c44:	1854      	adds	r4, r2, r1
 8002c46:	4649      	mov	r1, r9
 8002c48:	eb43 0501 	adc.w	r5, r3, r1
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	00eb      	lsls	r3, r5, #3
 8002c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5a:	00e2      	lsls	r2, r4, #3
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	461d      	mov	r5, r3
 8002c60:	4643      	mov	r3, r8
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c68:	464b      	mov	r3, r9
 8002c6a:	eb45 0303 	adc.w	r3, r5, r3
 8002c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c8e:	4629      	mov	r1, r5
 8002c90:	008b      	lsls	r3, r1, #2
 8002c92:	4621      	mov	r1, r4
 8002c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c98:	4621      	mov	r1, r4
 8002c9a:	008a      	lsls	r2, r1, #2
 8002c9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ca0:	f7fd fece 	bl	8000a40 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4b60      	ldr	r3, [pc, #384]	; (8002e2c <UART_SetConfig+0x4e4>)
 8002caa:	fba3 2302 	umull	r2, r3, r3, r2
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	011c      	lsls	r4, r3, #4
 8002cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	1891      	adds	r1, r2, r2
 8002cca:	61b9      	str	r1, [r7, #24]
 8002ccc:	415b      	adcs	r3, r3
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	1851      	adds	r1, r2, r1
 8002cd8:	6139      	str	r1, [r7, #16]
 8002cda:	4649      	mov	r1, r9
 8002cdc:	414b      	adcs	r3, r1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cec:	4659      	mov	r1, fp
 8002cee:	00cb      	lsls	r3, r1, #3
 8002cf0:	4651      	mov	r1, sl
 8002cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cf6:	4651      	mov	r1, sl
 8002cf8:	00ca      	lsls	r2, r1, #3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4642      	mov	r2, r8
 8002d02:	189b      	adds	r3, r3, r2
 8002d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d08:	464b      	mov	r3, r9
 8002d0a:	460a      	mov	r2, r1
 8002d0c:	eb42 0303 	adc.w	r3, r2, r3
 8002d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	008b      	lsls	r3, r1, #2
 8002d30:	4641      	mov	r1, r8
 8002d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d36:	4641      	mov	r1, r8
 8002d38:	008a      	lsls	r2, r1, #2
 8002d3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d3e:	f7fd fe7f 	bl	8000a40 <__aeabi_uldivmod>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <UART_SetConfig+0x4e4>)
 8002d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2264      	movs	r2, #100	; 0x64
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	1acb      	subs	r3, r1, r3
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	3332      	adds	r3, #50	; 0x32
 8002d5c:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <UART_SetConfig+0x4e4>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d68:	441c      	add	r4, r3
 8002d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d6e:	2200      	movs	r2, #0
 8002d70:	673b      	str	r3, [r7, #112]	; 0x70
 8002d72:	677a      	str	r2, [r7, #116]	; 0x74
 8002d74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d78:	4642      	mov	r2, r8
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	1891      	adds	r1, r2, r2
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	415b      	adcs	r3, r3
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d88:	4641      	mov	r1, r8
 8002d8a:	1851      	adds	r1, r2, r1
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	4649      	mov	r1, r9
 8002d90:	414b      	adcs	r3, r1
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002da0:	4659      	mov	r1, fp
 8002da2:	00cb      	lsls	r3, r1, #3
 8002da4:	4651      	mov	r1, sl
 8002da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002daa:	4651      	mov	r1, sl
 8002dac:	00ca      	lsls	r2, r1, #3
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	4642      	mov	r2, r8
 8002db6:	189b      	adds	r3, r3, r2
 8002db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dba:	464b      	mov	r3, r9
 8002dbc:	460a      	mov	r2, r1
 8002dbe:	eb42 0303 	adc.w	r3, r2, r3
 8002dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8002dce:	667a      	str	r2, [r7, #100]	; 0x64
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ddc:	4649      	mov	r1, r9
 8002dde:	008b      	lsls	r3, r1, #2
 8002de0:	4641      	mov	r1, r8
 8002de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002de6:	4641      	mov	r1, r8
 8002de8:	008a      	lsls	r2, r1, #2
 8002dea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dee:	f7fd fe27 	bl	8000a40 <__aeabi_uldivmod>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <UART_SetConfig+0x4e4>)
 8002df8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	2164      	movs	r1, #100	; 0x64
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	3332      	adds	r3, #50	; 0x32
 8002e0a:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <UART_SetConfig+0x4e4>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4422      	add	r2, r4
 8002e1e:	609a      	str	r2, [r3, #8]
}
 8002e20:	bf00      	nop
 8002e22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e26:	46bd      	mov	sp, r7
 8002e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2c:	51eb851f 	.word	0x51eb851f

08002e30 <memset>:
 8002e30:	4402      	add	r2, r0
 8002e32:	4603      	mov	r3, r0
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d100      	bne.n	8002e3a <memset+0xa>
 8002e38:	4770      	bx	lr
 8002e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e3e:	e7f9      	b.n	8002e34 <memset+0x4>

08002e40 <__libc_init_array>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4d0d      	ldr	r5, [pc, #52]	; (8002e78 <__libc_init_array+0x38>)
 8002e44:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <__libc_init_array+0x3c>)
 8002e46:	1b64      	subs	r4, r4, r5
 8002e48:	10a4      	asrs	r4, r4, #2
 8002e4a:	2600      	movs	r6, #0
 8002e4c:	42a6      	cmp	r6, r4
 8002e4e:	d109      	bne.n	8002e64 <__libc_init_array+0x24>
 8002e50:	4d0b      	ldr	r5, [pc, #44]	; (8002e80 <__libc_init_array+0x40>)
 8002e52:	4c0c      	ldr	r4, [pc, #48]	; (8002e84 <__libc_init_array+0x44>)
 8002e54:	f000 f818 	bl	8002e88 <_init>
 8002e58:	1b64      	subs	r4, r4, r5
 8002e5a:	10a4      	asrs	r4, r4, #2
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	42a6      	cmp	r6, r4
 8002e60:	d105      	bne.n	8002e6e <__libc_init_array+0x2e>
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e68:	4798      	blx	r3
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7ee      	b.n	8002e4c <__libc_init_array+0xc>
 8002e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e72:	4798      	blx	r3
 8002e74:	3601      	adds	r6, #1
 8002e76:	e7f2      	b.n	8002e5e <__libc_init_array+0x1e>
 8002e78:	08002ec0 	.word	0x08002ec0
 8002e7c:	08002ec0 	.word	0x08002ec0
 8002e80:	08002ec0 	.word	0x08002ec0
 8002e84:	08002ec4 	.word	0x08002ec4

08002e88 <_init>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	bf00      	nop
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr

08002e94 <_fini>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	bf00      	nop
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr
