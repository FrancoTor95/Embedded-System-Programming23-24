
usart_adc_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005558  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08005728  08005728  00015728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab4  08005ab4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005abc  08005abc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ac0  08005ac0  00015ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001d4  08005c98  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005c98  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005178  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013d1  00000000  00000000  000253bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000568  00000000  00000000  00026790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003e7  00000000  00000000  00026cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021895  00000000  00000000  000270df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007341  00000000  00000000  00048974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c804f  00000000  00000000  0004fcb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002580  00000000  00000000  00117d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011a284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005710 	.word	0x08005710

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08005710 	.word	0x08005710

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0c      	blt.n	8000fec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <__NVIC_ClearPendingIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	3360      	adds	r3, #96	; 0x60
 8000fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <ADC_IRQHandler>:
#include <math.h>
#define ADC_FS 3.3f

volatile uint16_t voltage = 0;
volatile float voltage_f = 0;
void ADC_IRQHandler() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	if(((ADC1->SR >> ADC_SR_EOC_Pos) & 0x01)) {
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <ADC_IRQHandler+0x60>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d01e      	beq.n	800109e <ADC_IRQHandler+0x4e>
		voltage = (uint16_t)ADC1->DR;
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <ADC_IRQHandler+0x60>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001064:	b29a      	uxth	r2, r3
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <ADC_IRQHandler+0x64>)
 8001068:	801a      	strh	r2, [r3, #0]
		voltage_f = voltage*(ADC_FS/pow(2, 12));
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <ADC_IRQHandler+0x64>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa77 	bl	8000564 <__aeabi_i2d>
 8001076:	a30c      	add	r3, pc, #48	; (adr r3, 80010a8 <ADC_IRQHandler+0x58>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fadc 	bl	8000638 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fdae 	bl	8000be8 <__aeabi_d2f>
 800108c:	4603      	mov	r3, r0
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <ADC_IRQHandler+0x68>)
 8001090:	6013      	str	r3, [r2, #0]
		ADC1->CR2 |= (0x1 << ADC_CR2_SWSTART_Pos);
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <ADC_IRQHandler+0x60>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <ADC_IRQHandler+0x60>)
 8001098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800109c:	6093      	str	r3, [r2, #8]
	}
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	60000000 	.word	0x60000000
 80010ac:	3f4a6666 	.word	0x3f4a6666
 80010b0:	40012000 	.word	0x40012000
 80010b4:	200001f0 	.word	0x200001f0
 80010b8:	200001f4 	.word	0x200001f4

080010bc <USART2_IRQHandler>:

volatile char buff_tx[20];
volatile uint8_t rx_len, tx_len, cmd_received;
uint8_t tx_len_max;
void USART2_IRQHandler() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(USART2_IRQn);
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f7ff ff7d 	bl	8000fc0 <__NVIC_ClearPendingIRQ>
	if(tx_len < tx_len_max && (USART2->SR >> USART_SR_TXE_Pos) & 0x01) {
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <USART2_IRQHandler+0x64>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <USART2_IRQHandler+0x68>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d213      	bcs.n	80010fc <USART2_IRQHandler+0x40>
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <USART2_IRQHandler+0x6c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00d      	beq.n	80010fc <USART2_IRQHandler+0x40>
		USART2->DR = buff_tx[++tx_len];
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <USART2_IRQHandler+0x64>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <USART2_IRQHandler+0x64>)
 80010ec:	4611      	mov	r1, r2
 80010ee:	7019      	strb	r1, [r3, #0]
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <USART2_IRQHandler+0x70>)
 80010f2:	5c9b      	ldrb	r3, [r3, r2]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <USART2_IRQHandler+0x6c>)
 80010f8:	605a      	str	r2, [r3, #4]
	}
	else if((USART2->SR >> USART_SR_TC_Pos) & 0x01) {
		tx_len = 0;
		USART2->CR1 &= ~(0x01 << USART_CR1_TXEIE_Pos); 		// Enable Interrupt on USART2 transmission
	}
}
 80010fa:	e00e      	b.n	800111a <USART2_IRQHandler+0x5e>
	else if((USART2->SR >> USART_SR_TC_Pos) & 0x01) {
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <USART2_IRQHandler+0x6c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <USART2_IRQHandler+0x5e>
		tx_len = 0;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <USART2_IRQHandler+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
		USART2->CR1 &= ~(0x01 << USART_CR1_TXEIE_Pos); 		// Enable Interrupt on USART2 transmission
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <USART2_IRQHandler+0x6c>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <USART2_IRQHandler+0x6c>)
 8001114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001118:	60d3      	str	r3, [r2, #12]
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000020c 	.word	0x2000020c
 8001124:	2000020d 	.word	0x2000020d
 8001128:	40004400 	.word	0x40004400
 800112c:	200001f8 	.word	0x200001f8

08001130 <send_str_it>:

void send_str_it(volatile char *buff, uint8_t len) {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
	USART2->DR = buff[0];
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <send_str_it+0x38>)
 8001144:	605a      	str	r2, [r3, #4]
	tx_len_max = len - 1;
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	3b01      	subs	r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <send_str_it+0x3c>)
 800114e:	701a      	strb	r2, [r3, #0]
	USART2->CR1 |= (0x01 << USART_CR1_TXEIE_Pos); 		// Enable Interrupt on USART2 transmission
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <send_str_it+0x38>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <send_str_it+0x38>)
 8001156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40004400 	.word	0x40004400
 800116c:	2000020d 	.word	0x2000020d

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001174:	f000 fb68 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001178:	f000 f920 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117c:	f000 f98c 	bl	8001498 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* GPIO Configuration (PA2 TX and PA3 RX) */
  RCC->AHB1ENR |= (1 << RCC_AHB1ENR_GPIOAEN_Pos);
 8001180:	4b87      	ldr	r3, [pc, #540]	; (80013a0 <main+0x230>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a86      	ldr	r2, [pc, #536]	; (80013a0 <main+0x230>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6313      	str	r3, [r2, #48]	; 0x30

  // PA2 USART2 TX
  GPIOA->MODER 	|= (0x02 << 4); 		// Alternate function
 800118c:	4b85      	ldr	r3, [pc, #532]	; (80013a4 <main+0x234>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a84      	ldr	r2, [pc, #528]	; (80013a4 <main+0x234>)
 8001192:	f043 0320 	orr.w	r3, r3, #32
 8001196:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[0] |= (0x07 << 8);			// Alternate function n7 (USART2 TX)
 8001198:	4b82      	ldr	r3, [pc, #520]	; (80013a4 <main+0x234>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4a81      	ldr	r2, [pc, #516]	; (80013a4 <main+0x234>)
 800119e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011a2:	6213      	str	r3, [r2, #32]
  GPIOA->OTYPER &= ~(0x03 << 4); 		// Push-Pull (Best suited for single direction line)
 80011a4:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <main+0x234>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a7e      	ldr	r2, [pc, #504]	; (80013a4 <main+0x234>)
 80011aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011ae:	6053      	str	r3, [r2, #4]
  GPIOA->PUPDR  |= (0x01 << 4); 		// USAR should have external Pull-up for higher data rates
 80011b0:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <main+0x234>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4a7b      	ldr	r2, [pc, #492]	; (80013a4 <main+0x234>)
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	60d3      	str	r3, [r2, #12]

  // PA3 USART2 RX
  GPIOA->MODER 	|= (0x02 << 6); 		// Alternate function
 80011bc:	4b79      	ldr	r3, [pc, #484]	; (80013a4 <main+0x234>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a78      	ldr	r2, [pc, #480]	; (80013a4 <main+0x234>)
 80011c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c6:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[0] |= (0x07 << 12);		// Alternate function n7 (USART2 TX)
 80011c8:	4b76      	ldr	r3, [pc, #472]	; (80013a4 <main+0x234>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a75      	ldr	r2, [pc, #468]	; (80013a4 <main+0x234>)
 80011ce:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80011d2:	6213      	str	r3, [r2, #32]
  GPIOA->PUPDR  |= (0x01 << 6); 		// USAR should have external Pull-up for higher data rates
 80011d4:	4b73      	ldr	r3, [pc, #460]	; (80013a4 <main+0x234>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4a72      	ldr	r2, [pc, #456]	; (80013a4 <main+0x234>)
 80011da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011de:	60d3      	str	r3, [r2, #12]


  /* USART Configuration */
  RCC->APB1ENR |= (0x01 << RCC_APB1ENR_USART2EN_Pos); 	// Provide clock
 80011e0:	4b6f      	ldr	r3, [pc, #444]	; (80013a0 <main+0x230>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a6e      	ldr	r2, [pc, #440]	; (80013a0 <main+0x230>)
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40

  USART2->CR1 |= (0x01 << USART_CR1_UE_Pos); 			// Enable USART (UE)
 80011ec:	4b6e      	ldr	r3, [pc, #440]	; (80013a8 <main+0x238>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4a6d      	ldr	r2, [pc, #436]	; (80013a8 <main+0x238>)
 80011f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011f6:	60d3      	str	r3, [r2, #12]
  USART2->CR1 |= (0x01 << USART_CR1_M_Pos); 			// Define word length (M)
 80011f8:	4b6b      	ldr	r3, [pc, #428]	; (80013a8 <main+0x238>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4a6a      	ldr	r2, [pc, #424]	; (80013a8 <main+0x238>)
 80011fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001202:	60d3      	str	r3, [r2, #12]
  USART2->CR2 |= (0x02 << USART_CR2_STOP_Pos); 			// Define number of stop bits (STOP)
 8001204:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <main+0x238>)
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	4a67      	ldr	r2, [pc, #412]	; (80013a8 <main+0x238>)
 800120a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800120e:	6113      	str	r3, [r2, #16]
  USART2->CR1 |= (0x1 << USART_CR1_PCE_Pos); 			// Enable parity check (PCE)
 8001210:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <main+0x238>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a64      	ldr	r2, [pc, #400]	; (80013a8 <main+0x238>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	60d3      	str	r3, [r2, #12]
  USART2->CR1 &= ~(0x01 << USART_CR1_PS_Pos);			// Even parity (PS)
 800121c:	4b62      	ldr	r3, [pc, #392]	; (80013a8 <main+0x238>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4a61      	ldr	r2, [pc, #388]	; (80013a8 <main+0x238>)
 8001222:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001226:	60d3      	str	r3, [r2, #12]

  //273.4372
  USART2->BRR |= (0x111 << USART_BRR_DIV_Mantissa_Pos); // Define Mantissa
 8001228:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <main+0x238>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a5e      	ldr	r2, [pc, #376]	; (80013a8 <main+0x238>)
 800122e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	6093      	str	r3, [r2, #8]
  USART2->BRR  |= (0x07 << 0); 							// Define Fractional part
 8001238:	4b5b      	ldr	r3, [pc, #364]	; (80013a8 <main+0x238>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a5a      	ldr	r2, [pc, #360]	; (80013a8 <main+0x238>)
 800123e:	f043 0307 	orr.w	r3, r3, #7
 8001242:	6093      	str	r3, [r2, #8]
  USART2->CR1 |= (0x01 << USART_CR1_TE_Pos); 			// Send one idle frame at the beginning (TE)
 8001244:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <main+0x238>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <main+0x238>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	60d3      	str	r3, [r2, #12]

  NVIC_EnableIRQ(USART2_IRQn);
 8001250:	2026      	movs	r0, #38	; 0x26
 8001252:	f7ff fe97 	bl	8000f84 <__NVIC_EnableIRQ>
  NVIC_SetPriority(USART2_IRQn, 0);
 8001256:	2100      	movs	r1, #0
 8001258:	2026      	movs	r0, #38	; 0x26
 800125a:	f7ff fecf 	bl	8000ffc <__NVIC_SetPriority>

  /* GPIO Configuration */
    // Provide clock to PORTA (PA_0 and PA_1 are associated to CH0 and CH1)
    RCC->AHB1ENR |= (1 << RCC_AHB1ENR_GPIOAEN_Pos); 	// Clock to GPIOA
 800125e:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <main+0x230>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a4f      	ldr	r2, [pc, #316]	; (80013a0 <main+0x230>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30

    // Set both GPIOs in Analog mode
    GPIOA->MODER |= (3 << GPIO_MODER_MODE0_Pos);		// Set PA0 in Analog mode
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <main+0x234>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <main+0x234>)
 8001270:	f043 0303 	orr.w	r3, r3, #3
 8001274:	6013      	str	r3, [r2, #0]

    /* ADC Configuration */
    // Provide clock to ADC1
    RCC->APB2ENR |= (1 << RCC_APB2ENR_ADC1EN_Pos); 	// Clock to ADC1
 8001276:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <main+0x230>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a49      	ldr	r2, [pc, #292]	; (80013a0 <main+0x230>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	6453      	str	r3, [r2, #68]	; 0x44


    ADC1->CR2 	|= (0x01 << ADC_CR2_ADON_Pos);			// (ADON) Power On ADC1
 8001282:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <main+0x23c>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4a49      	ldr	r2, [pc, #292]	; (80013ac <main+0x23c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6093      	str	r3, [r2, #8]
    ADC1->CR2 	&= ~(0x01 << ADC_CR2_CONT_Pos);			// (CONT) Single Conversion Mode
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <main+0x23c>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4a46      	ldr	r2, [pc, #280]	; (80013ac <main+0x23c>)
 8001294:	f023 0302 	bic.w	r3, r3, #2
 8001298:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 	&= ~(0x1F << 0);						// Clear before Selection of Channel 0
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <main+0x23c>)
 800129c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129e:	4a43      	ldr	r2, [pc, #268]	; (80013ac <main+0x23c>)
 80012a0:	f023 031f 	bic.w	r3, r3, #31
 80012a4:	6353      	str	r3, [r2, #52]	; 0x34
    ADC1->SQR3 	|= (0x00 << 0);							// Selection of Channel 0
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <main+0x23c>)
 80012a8:	4a40      	ldr	r2, [pc, #256]	; (80013ac <main+0x23c>)
 80012aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ac:	6353      	str	r3, [r2, #52]	; 0x34
    ADC1->CR1 	&= ~(0x1 << ADC_CR1_SCAN_Pos); 			// (SCAN) Disable Scan Mode
 80012ae:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <main+0x23c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a3e      	ldr	r2, [pc, #248]	; (80013ac <main+0x23c>)
 80012b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b8:	6053      	str	r3, [r2, #4]
    ADC1->CR1 	&= ~(0x1 << ADC_CR1_DISCEN_Pos); 		// (DISCEN) Disable Discontinuous Mode
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <main+0x23c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a3b      	ldr	r2, [pc, #236]	; (80013ac <main+0x23c>)
 80012c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012c4:	6053      	str	r3, [r2, #4]
    ADC1->CR1 	&= ~(0x07 << ADC_CR1_DISCNUM_Pos);		// (DISCNUM) Clear Number of Discontinuous Channels
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <main+0x23c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <main+0x23c>)
 80012cc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012d0:	6053      	str	r3, [r2, #4]
    ADC1->CR2 	&= ~(0x1 << ADC_CR2_ALIGN_Pos); 		// (ALIGN) Align right
 80012d2:	4b36      	ldr	r3, [pc, #216]	; (80013ac <main+0x23c>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4a35      	ldr	r2, [pc, #212]	; (80013ac <main+0x23c>)
 80012d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012dc:	6093      	str	r3, [r2, #8]
    ADC1->SMPR2 	&= ~(0x0F << ADC_SMPR2_SMP0_Pos);		// Set 3 Cycles per Samples
 80012de:	4b33      	ldr	r3, [pc, #204]	; (80013ac <main+0x23c>)
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <main+0x23c>)
 80012e4:	f023 030f 	bic.w	r3, r3, #15
 80012e8:	6113      	str	r3, [r2, #16]
    ADC1->CR1 	&= ~(0x03 << ADC_CR1_RES_Pos);			// 12 Bit resolution
 80012ea:	4b30      	ldr	r3, [pc, #192]	; (80013ac <main+0x23c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <main+0x23c>)
 80012f0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80012f4:	6053      	str	r3, [r2, #4]
    ADC1->CR2 	|= (0x01 << ADC_CR2_EOCS_Pos); 			// (EOCS) Notify when each conversion of a sequence is complete
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <main+0x23c>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4a2c      	ldr	r2, [pc, #176]	; (80013ac <main+0x23c>)
 80012fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001300:	6093      	str	r3, [r2, #8]
    ADC1 ->CR1 	|= (0x01 << ADC_CR1_EOCIE_Pos); 		// (EOCIE) Generate an interrupt every time EOC is set
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <main+0x23c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a29      	ldr	r2, [pc, #164]	; (80013ac <main+0x23c>)
 8001308:	f043 0320 	orr.w	r3, r3, #32
 800130c:	6053      	str	r3, [r2, #4]

    NVIC_EnableIRQ(ADC_IRQn); 		// Check file stm32f446xx.h for the name definition
 800130e:	2012      	movs	r0, #18
 8001310:	f7ff fe38 	bl	8000f84 <__NVIC_EnableIRQ>
    NVIC_SetPriority(ADC_IRQn, 0); 	// Priority
 8001314:	2100      	movs	r1, #0
 8001316:	2012      	movs	r0, #18
 8001318:	f7ff fe70 	bl	8000ffc <__NVIC_SetPriority>
    ADC1->CR2 |= (0x1 << ADC_CR2_SWSTART_Pos);
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <main+0x23c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a22      	ldr	r2, [pc, #136]	; (80013ac <main+0x23c>)
 8001322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001326:	6093      	str	r3, [r2, #8]


  buff_tx[0] = 'L';
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <main+0x240>)
 800132a:	224c      	movs	r2, #76	; 0x4c
 800132c:	701a      	strb	r2, [r3, #0]
  buff_tx[1] = 'E';
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <main+0x240>)
 8001330:	2245      	movs	r2, #69	; 0x45
 8001332:	705a      	strb	r2, [r3, #1]
  buff_tx[2] = 'T';
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <main+0x240>)
 8001336:	2254      	movs	r2, #84	; 0x54
 8001338:	709a      	strb	r2, [r3, #2]
  buff_tx[3] = 'S';
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <main+0x240>)
 800133c:	2253      	movs	r2, #83	; 0x53
 800133e:	70da      	strb	r2, [r3, #3]
  buff_tx[4] = ' ';
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <main+0x240>)
 8001342:	2220      	movs	r2, #32
 8001344:	711a      	strb	r2, [r3, #4]
  buff_tx[5] = 'S';
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <main+0x240>)
 8001348:	2253      	movs	r2, #83	; 0x53
 800134a:	715a      	strb	r2, [r3, #5]
  buff_tx[6] = 'T';
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <main+0x240>)
 800134e:	2254      	movs	r2, #84	; 0x54
 8001350:	719a      	strb	r2, [r3, #6]
  buff_tx[7] = 'A';
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <main+0x240>)
 8001354:	2241      	movs	r2, #65	; 0x41
 8001356:	71da      	strb	r2, [r3, #7]
  buff_tx[8] = 'R';
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <main+0x240>)
 800135a:	2252      	movs	r2, #82	; 0x52
 800135c:	721a      	strb	r2, [r3, #8]
  buff_tx[9] = 'T';
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <main+0x240>)
 8001360:	2254      	movs	r2, #84	; 0x54
 8001362:	725a      	strb	r2, [r3, #9]
  buff_tx[10] = '\r';
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <main+0x240>)
 8001366:	220d      	movs	r2, #13
 8001368:	729a      	strb	r2, [r3, #10]
  buff_tx[11] = '\n';
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <main+0x240>)
 800136c:	220a      	movs	r2, #10
 800136e:	72da      	strb	r2, [r3, #11]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  send_str_it(buff_tx, 12);
 8001370:	210c      	movs	r1, #12
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <main+0x240>)
 8001374:	f7ff fedc 	bl	8001130 <send_str_it>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sprintf(buff_tx, "%1.3f\r\n", voltage_f);
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <main+0x244>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f903 	bl	8000588 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	490c      	ldr	r1, [pc, #48]	; (80013b8 <main+0x248>)
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <main+0x240>)
 800138a:	f002 f863 	bl	8003454 <siprintf>
	send_str_it(buff_tx, 7);
 800138e:	2107      	movs	r1, #7
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <main+0x240>)
 8001392:	f7ff fecd 	bl	8001130 <send_str_it>
	HAL_Delay(1000);
 8001396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139a:	f000 fac7 	bl	800192c <HAL_Delay>
	sprintf(buff_tx, "%1.3f\r\n", voltage_f);
 800139e:	e7eb      	b.n	8001378 <main+0x208>
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40004400 	.word	0x40004400
 80013ac:	40012000 	.word	0x40012000
 80013b0:	200001f8 	.word	0x200001f8
 80013b4:	200001f4 	.word	0x200001f4
 80013b8:	08005728 	.word	0x08005728

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	2234      	movs	r2, #52	; 0x34
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f8a5 	bl	800351a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <SystemClock_Config+0xd4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <SystemClock_Config+0xd4>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <SystemClock_Config+0xd4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013fc:	2300      	movs	r3, #0
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <SystemClock_Config+0xd8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001408:	4a22      	ldr	r2, [pc, #136]	; (8001494 <SystemClock_Config+0xd8>)
 800140a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <SystemClock_Config+0xd8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001430:	2310      	movs	r3, #16
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001434:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800143a:	2304      	movs	r3, #4
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001442:	2302      	movs	r3, #2
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f83c 	bl	80024c8 <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001456:	f000 f89d 	bl	8001594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2302      	movs	r3, #2
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	2102      	movs	r1, #2
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fd10 	bl	8001e9c <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001482:	f000 f887 	bl	8001594 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3750      	adds	r7, #80	; 0x50
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b35      	ldr	r3, [pc, #212]	; (8001588 <MX_GPIO_Init+0xf0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a34      	ldr	r2, [pc, #208]	; (8001588 <MX_GPIO_Init+0xf0>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_GPIO_Init+0xf0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <MX_GPIO_Init+0xf0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a2d      	ldr	r2, [pc, #180]	; (8001588 <MX_GPIO_Init+0xf0>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <MX_GPIO_Init+0xf0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <MX_GPIO_Init+0xf0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a26      	ldr	r2, [pc, #152]	; (8001588 <MX_GPIO_Init+0xf0>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <MX_GPIO_Init+0xf0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <MX_GPIO_Init+0xf0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <MX_GPIO_Init+0xf0>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_GPIO_Init+0xf0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2120      	movs	r1, #32
 8001522:	481a      	ldr	r0, [pc, #104]	; (800158c <MX_GPIO_Init+0xf4>)
 8001524:	f000 fca0 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800152e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_GPIO_Init+0xf8>)
 8001540:	f000 fafe 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001544:	230c      	movs	r3, #12
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001554:	2307      	movs	r3, #7
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	; (800158c <MX_GPIO_Init+0xf4>)
 8001560:	f000 faee 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001564:	2320      	movs	r3, #32
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_GPIO_Init+0xf4>)
 800157c:	f000 fae0 	bl	8001b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020800 	.word	0x40020800

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>
	...

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_MspInit+0x4c>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x4c>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015de:	2007      	movs	r0, #7
 80015e0:	f000 fa7a 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 f956 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_kill>:

int _kill(int pid, int sig)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800165e:	f001 ffaf 	bl	80035c0 <__errno>
 8001662:	4603      	mov	r3, r0
 8001664:	2216      	movs	r2, #22
 8001666:	601a      	str	r2, [r3, #0]
  return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_exit>:

void _exit (int status)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ffe7 	bl	8001654 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001686:	e7fe      	b.n	8001686 <_exit+0x12>

08001688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e00a      	b.n	80016b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800169a:	f3af 8000 	nop.w
 800169e:	4601      	mov	r1, r0
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf0      	blt.n	800169a <_read+0x12>
  }

  return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e009      	b.n	80016e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf1      	blt.n	80016d4 <_write+0x12>
  }
  return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_close>:

int _close(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	605a      	str	r2, [r3, #4]
  return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_isatty>:

int _isatty(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f001 ff14 	bl	80035c0 <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20020000 	.word	0x20020000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	20000210 	.word	0x20000210
 80017cc:	20000368 	.word	0x20000368

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017f8:	f7ff ffea 	bl	80017d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	; (8001840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001822:	f001 fed3 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff fca3 	bl	8001170 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001838:	08005ac4 	.word	0x08005ac4
  ldr r2, =_sbss
 800183c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001840:	20000364 	.word	0x20000364

08001844 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <CAN1_RX0_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_Init+0x40>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_Init+0x40>)
 800185e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_Init+0x40>)
 800186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 f931 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	2000      	movs	r0, #0
 8001878:	f000 f808 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff fe90 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f93b 	bl	8001b26 <HAL_SYSTICK_Config>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00e      	b.n	80018d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d80a      	bhi.n	80018d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f000 f911 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_InitTick+0x5c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x24>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_IncTick+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008
 8001910:	20000214 	.word	0x20000214

08001914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_GetTick+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000214 	.word	0x20000214

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff ffee 	bl	8001914 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffde 	bl	8001914 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008

08001974 <__NVIC_SetPriorityGrouping>:
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_SetPriority>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff47 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff5c 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff8e 	bl	8001a2c <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5d 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffb0 	bl	8001a94 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e165      	b.n	8001e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 8154 	bne.w	8001e22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d005      	beq.n	8001b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d130      	bne.n	8001bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d017      	beq.n	8001c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d123      	bne.n	8001c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80ae 	beq.w	8001e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a5c      	ldr	r2, [pc, #368]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b5a      	ldr	r3, [pc, #360]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce2:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4f      	ldr	r2, [pc, #316]	; (8001e48 <HAL_GPIO_Init+0x308>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <HAL_GPIO_Init+0x30c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x216>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4d      	ldr	r2, [pc, #308]	; (8001e50 <HAL_GPIO_Init+0x310>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_GPIO_Init+0x314>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x20e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_GPIO_Init+0x318>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x20a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_GPIO_Init+0x31c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x206>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <HAL_GPIO_Init+0x320>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x202>
 8001d3e:	2306      	movs	r3, #6
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9e:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da4:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e1c:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	f67f ae96 	bls.w	8001b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40013800 	.word	0x40013800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40021400 	.word	0x40021400
 8001e60:	40021800 	.word	0x40021800
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0cc      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d90c      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b65      	ldr	r3, [pc, #404]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b63      	ldr	r3, [pc, #396]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0b8      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a58      	ldr	r2, [pc, #352]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a52      	ldr	r2, [pc, #328]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	494d      	ldr	r1, [pc, #308]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d044      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d119      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e07f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e067      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b37      	ldr	r3, [pc, #220]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4934      	ldr	r1, [pc, #208]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff fcc2 	bl	8001914 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7ff fcbe 	bl	8001914 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e04f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d20c      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e032      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4916      	ldr	r1, [pc, #88]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	490e      	ldr	r1, [pc, #56]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002022:	f000 f821 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002026:	4602      	mov	r2, r0
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	490a      	ldr	r1, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	5ccb      	ldrb	r3, [r1, r3]
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1c8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fc22 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023c00 	.word	0x40023c00
 8002058:	40023800 	.word	0x40023800
 800205c:	08005730 	.word	0x08005730
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800206c:	b0ae      	sub	sp, #184	; 0xb8
 800206e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800208e:	4bcb      	ldr	r3, [pc, #812]	; (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b0c      	cmp	r3, #12
 8002098:	f200 8206 	bhi.w	80024a8 <HAL_RCC_GetSysClockFreq+0x440>
 800209c:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	080020d9 	.word	0x080020d9
 80020a8:	080024a9 	.word	0x080024a9
 80020ac:	080024a9 	.word	0x080024a9
 80020b0:	080024a9 	.word	0x080024a9
 80020b4:	080020e1 	.word	0x080020e1
 80020b8:	080024a9 	.word	0x080024a9
 80020bc:	080024a9 	.word	0x080024a9
 80020c0:	080024a9 	.word	0x080024a9
 80020c4:	080020e9 	.word	0x080020e9
 80020c8:	080024a9 	.word	0x080024a9
 80020cc:	080024a9 	.word	0x080024a9
 80020d0:	080024a9 	.word	0x080024a9
 80020d4:	080022d9 	.word	0x080022d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4bb9      	ldr	r3, [pc, #740]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80020da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80020de:	e1e7      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020e0:	4bb8      	ldr	r3, [pc, #736]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80020e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020e6:	e1e3      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e8:	4bb4      	ldr	r3, [pc, #720]	; (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020f4:	4bb1      	ldr	r3, [pc, #708]	; (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d071      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002100:	4bae      	ldr	r3, [pc, #696]	; (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	2200      	movs	r2, #0
 8002108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800210c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002126:	4622      	mov	r2, r4
 8002128:	462b      	mov	r3, r5
 800212a:	f04f 0000 	mov.w	r0, #0
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	0159      	lsls	r1, r3, #5
 8002134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002138:	0150      	lsls	r0, r2, #5
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4621      	mov	r1, r4
 8002140:	1a51      	subs	r1, r2, r1
 8002142:	6439      	str	r1, [r7, #64]	; 0x40
 8002144:	4629      	mov	r1, r5
 8002146:	eb63 0301 	sbc.w	r3, r3, r1
 800214a:	647b      	str	r3, [r7, #68]	; 0x44
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002158:	4649      	mov	r1, r9
 800215a:	018b      	lsls	r3, r1, #6
 800215c:	4641      	mov	r1, r8
 800215e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002162:	4641      	mov	r1, r8
 8002164:	018a      	lsls	r2, r1, #6
 8002166:	4641      	mov	r1, r8
 8002168:	1a51      	subs	r1, r2, r1
 800216a:	63b9      	str	r1, [r7, #56]	; 0x38
 800216c:	4649      	mov	r1, r9
 800216e:	eb63 0301 	sbc.w	r3, r3, r1
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002180:	4649      	mov	r1, r9
 8002182:	00cb      	lsls	r3, r1, #3
 8002184:	4641      	mov	r1, r8
 8002186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800218a:	4641      	mov	r1, r8
 800218c:	00ca      	lsls	r2, r1, #3
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	4603      	mov	r3, r0
 8002194:	4622      	mov	r2, r4
 8002196:	189b      	adds	r3, r3, r2
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
 800219a:	462b      	mov	r3, r5
 800219c:	460a      	mov	r2, r1
 800219e:	eb42 0303 	adc.w	r3, r2, r3
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021b0:	4629      	mov	r1, r5
 80021b2:	024b      	lsls	r3, r1, #9
 80021b4:	4621      	mov	r1, r4
 80021b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021ba:	4621      	mov	r1, r4
 80021bc:	024a      	lsls	r2, r1, #9
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80021d4:	f7fe fd58 	bl	8000c88 <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4613      	mov	r3, r2
 80021de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021e2:	e067      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e4:	4b75      	ldr	r3, [pc, #468]	; (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	2200      	movs	r2, #0
 80021ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80021fe:	2300      	movs	r3, #0
 8002200:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002202:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002206:	4622      	mov	r2, r4
 8002208:	462b      	mov	r3, r5
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002218:	0150      	lsls	r0, r2, #5
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4621      	mov	r1, r4
 8002220:	1a51      	subs	r1, r2, r1
 8002222:	62b9      	str	r1, [r7, #40]	; 0x28
 8002224:	4629      	mov	r1, r5
 8002226:	eb63 0301 	sbc.w	r3, r3, r1
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002238:	4649      	mov	r1, r9
 800223a:	018b      	lsls	r3, r1, #6
 800223c:	4641      	mov	r1, r8
 800223e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002242:	4641      	mov	r1, r8
 8002244:	018a      	lsls	r2, r1, #6
 8002246:	4641      	mov	r1, r8
 8002248:	ebb2 0a01 	subs.w	sl, r2, r1
 800224c:	4649      	mov	r1, r9
 800224e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800225e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002266:	4692      	mov	sl, r2
 8002268:	469b      	mov	fp, r3
 800226a:	4623      	mov	r3, r4
 800226c:	eb1a 0303 	adds.w	r3, sl, r3
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	462b      	mov	r3, r5
 8002274:	eb4b 0303 	adc.w	r3, fp, r3
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002286:	4629      	mov	r1, r5
 8002288:	028b      	lsls	r3, r1, #10
 800228a:	4621      	mov	r1, r4
 800228c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002290:	4621      	mov	r1, r4
 8002292:	028a      	lsls	r2, r1, #10
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800229c:	2200      	movs	r2, #0
 800229e:	673b      	str	r3, [r7, #112]	; 0x70
 80022a0:	677a      	str	r2, [r7, #116]	; 0x74
 80022a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80022a6:	f7fe fcef 	bl	8000c88 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4613      	mov	r3, r2
 80022b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022b4:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	3301      	adds	r3, #1
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80022c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022d6:	e0eb      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d8:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d06b      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	2200      	movs	r2, #0
 80022f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80022fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002302:	663b      	str	r3, [r7, #96]	; 0x60
 8002304:	2300      	movs	r3, #0
 8002306:	667b      	str	r3, [r7, #100]	; 0x64
 8002308:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800230c:	4622      	mov	r2, r4
 800230e:	462b      	mov	r3, r5
 8002310:	f04f 0000 	mov.w	r0, #0
 8002314:	f04f 0100 	mov.w	r1, #0
 8002318:	0159      	lsls	r1, r3, #5
 800231a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800231e:	0150      	lsls	r0, r2, #5
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4621      	mov	r1, r4
 8002326:	1a51      	subs	r1, r2, r1
 8002328:	61b9      	str	r1, [r7, #24]
 800232a:	4629      	mov	r1, r5
 800232c:	eb63 0301 	sbc.w	r3, r3, r1
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800233e:	4659      	mov	r1, fp
 8002340:	018b      	lsls	r3, r1, #6
 8002342:	4651      	mov	r1, sl
 8002344:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002348:	4651      	mov	r1, sl
 800234a:	018a      	lsls	r2, r1, #6
 800234c:	4651      	mov	r1, sl
 800234e:	ebb2 0801 	subs.w	r8, r2, r1
 8002352:	4659      	mov	r1, fp
 8002354:	eb63 0901 	sbc.w	r9, r3, r1
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002364:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002368:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800236c:	4690      	mov	r8, r2
 800236e:	4699      	mov	r9, r3
 8002370:	4623      	mov	r3, r4
 8002372:	eb18 0303 	adds.w	r3, r8, r3
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	462b      	mov	r3, r5
 800237a:	eb49 0303 	adc.w	r3, r9, r3
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800238c:	4629      	mov	r1, r5
 800238e:	024b      	lsls	r3, r1, #9
 8002390:	4621      	mov	r1, r4
 8002392:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002396:	4621      	mov	r1, r4
 8002398:	024a      	lsls	r2, r1, #9
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023a2:	2200      	movs	r2, #0
 80023a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023ac:	f7fe fc6c 	bl	8000c88 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023ba:	e065      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x420>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c8:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	2200      	movs	r2, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	4611      	mov	r1, r2
 80023d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023d8:	653b      	str	r3, [r7, #80]	; 0x50
 80023da:	2300      	movs	r3, #0
 80023dc:	657b      	str	r3, [r7, #84]	; 0x54
 80023de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80023e2:	4642      	mov	r2, r8
 80023e4:	464b      	mov	r3, r9
 80023e6:	f04f 0000 	mov.w	r0, #0
 80023ea:	f04f 0100 	mov.w	r1, #0
 80023ee:	0159      	lsls	r1, r3, #5
 80023f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f4:	0150      	lsls	r0, r2, #5
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4641      	mov	r1, r8
 80023fc:	1a51      	subs	r1, r2, r1
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	4649      	mov	r1, r9
 8002402:	eb63 0301 	sbc.w	r3, r3, r1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002414:	4659      	mov	r1, fp
 8002416:	018b      	lsls	r3, r1, #6
 8002418:	4651      	mov	r1, sl
 800241a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800241e:	4651      	mov	r1, sl
 8002420:	018a      	lsls	r2, r1, #6
 8002422:	4651      	mov	r1, sl
 8002424:	1a54      	subs	r4, r2, r1
 8002426:	4659      	mov	r1, fp
 8002428:	eb63 0501 	sbc.w	r5, r3, r1
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	00eb      	lsls	r3, r5, #3
 8002436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800243a:	00e2      	lsls	r2, r4, #3
 800243c:	4614      	mov	r4, r2
 800243e:	461d      	mov	r5, r3
 8002440:	4643      	mov	r3, r8
 8002442:	18e3      	adds	r3, r4, r3
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	464b      	mov	r3, r9
 8002448:	eb45 0303 	adc.w	r3, r5, r3
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800245a:	4629      	mov	r1, r5
 800245c:	028b      	lsls	r3, r1, #10
 800245e:	4621      	mov	r1, r4
 8002460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002464:	4621      	mov	r1, r4
 8002466:	028a      	lsls	r2, r1, #10
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002470:	2200      	movs	r2, #0
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
 8002474:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002476:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800247a:	f7fe fc05 	bl	8000c88 <__aeabi_uldivmod>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4613      	mov	r3, r2
 8002484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0f1b      	lsrs	r3, r3, #28
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800249a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024a6:	e003      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80024aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	37b8      	adds	r7, #184	; 0xb8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	00f42400 	.word	0x00f42400

080024c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e28d      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8083 	beq.w	80025ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024e8:	4b94      	ldr	r3, [pc, #592]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d019      	beq.n	8002528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024f4:	4b91      	ldr	r3, [pc, #580]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002500:	4b8e      	ldr	r3, [pc, #568]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250c:	d00c      	beq.n	8002528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250e:	4b8b      	ldr	r3, [pc, #556]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d112      	bne.n	8002540 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002526:	d10b      	bne.n	8002540 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	4b84      	ldr	r3, [pc, #528]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d05b      	beq.n	80025ec <HAL_RCC_OscConfig+0x124>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d157      	bne.n	80025ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e25a      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002548:	d106      	bne.n	8002558 <HAL_RCC_OscConfig+0x90>
 800254a:	4b7c      	ldr	r3, [pc, #496]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7b      	ldr	r2, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e01d      	b.n	8002594 <HAL_RCC_OscConfig+0xcc>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0xb4>
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a75      	ldr	r2, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a72      	ldr	r2, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0xcc>
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b6c      	ldr	r3, [pc, #432]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a6b      	ldr	r2, [pc, #428]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7ff f9ba 	bl	8001914 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff f9b6 	bl	8001914 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e21f      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b61      	ldr	r3, [pc, #388]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0xdc>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff f9a6 	bl	8001914 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff f9a2 	bl	8001914 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e20b      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x104>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06f      	beq.n	80026da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b00      	cmp	r3, #0
 8002604:	d017      	beq.n	8002636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002606:	4b4d      	ldr	r3, [pc, #308]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800260e:	2b08      	cmp	r3, #8
 8002610:	d105      	bne.n	800261e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d11c      	bne.n	8002664 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262a:	4b44      	ldr	r3, [pc, #272]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d116      	bne.n	8002664 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x186>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e1d3      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	e03a      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <HAL_RCC_OscConfig+0x278>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7ff f94f 	bl	8001914 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7ff f94b 	bl	8001914 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e1b4      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4925      	ldr	r1, [pc, #148]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_RCC_OscConfig+0x278>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7ff f92e 	bl	8001914 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026bc:	f7ff f92a 	bl	8001914 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e193      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d036      	beq.n	8002754 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d016      	beq.n	800271c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_RCC_OscConfig+0x27c>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7ff f90e 	bl	8001914 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fc:	f7ff f90a 	bl	8001914 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e173      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x234>
 800271a:	e01b      	b.n	8002754 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_OscConfig+0x27c>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7ff f8f7 	bl	8001914 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	e00e      	b.n	8002748 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272a:	f7ff f8f3 	bl	8001914 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d907      	bls.n	8002748 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e15c      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
 800273c:	40023800 	.word	0x40023800
 8002740:	42470000 	.word	0x42470000
 8002744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	4b8a      	ldr	r3, [pc, #552]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800274a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ea      	bne.n	800272a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8097 	beq.w	8002890 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002766:	4b83      	ldr	r3, [pc, #524]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	4b7f      	ldr	r3, [pc, #508]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a7e      	ldr	r2, [pc, #504]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b7c      	ldr	r3, [pc, #496]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b79      	ldr	r3, [pc, #484]	; (8002978 <HAL_RCC_OscConfig+0x4b0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4b76      	ldr	r3, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x4b0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a75      	ldr	r2, [pc, #468]	; (8002978 <HAL_RCC_OscConfig+0x4b0>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7ff f8b3 	bl	8001914 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7ff f8af 	bl	8001914 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e118      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b6c      	ldr	r3, [pc, #432]	; (8002978 <HAL_RCC_OscConfig+0x4b0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x31e>
 80027d8:	4b66      	ldr	r3, [pc, #408]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a65      	ldr	r2, [pc, #404]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x358>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x340>
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a60      	ldr	r2, [pc, #384]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b5e      	ldr	r3, [pc, #376]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a5d      	ldr	r2, [pc, #372]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x358>
 8002808:	4b5a      	ldr	r3, [pc, #360]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a59      	ldr	r2, [pc, #356]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	4b57      	ldr	r3, [pc, #348]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a56      	ldr	r2, [pc, #344]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7ff f874 	bl	8001914 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7ff f870 	bl	8001914 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0d7      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002846:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0ee      	beq.n	8002830 <HAL_RCC_OscConfig+0x368>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff f85e 	bl	8001914 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7ff f85a 	bl	8001914 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0c1      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002872:	4b40      	ldr	r3, [pc, #256]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ee      	bne.n	800285c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	4a3a      	ldr	r2, [pc, #232]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80ad 	beq.w	80029f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d060      	beq.n	8002968 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d145      	bne.n	800293a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b33      	ldr	r3, [pc, #204]	; (800297c <HAL_RCC_OscConfig+0x4b4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff f82e 	bl	8001914 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028bc:	f7ff f82a 	bl	8001914 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e093      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	071b      	lsls	r3, r3, #28
 8002906:	491b      	ldr	r1, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x4b4>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe ffff 	bl	8001914 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe fffb 	bl	8001914 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e064      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x452>
 8002938:	e05c      	b.n	80029f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <HAL_RCC_OscConfig+0x4b4>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe ffe8 	bl	8001914 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe ffe4 	bl	8001914 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e04d      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x480>
 8002966:	e045      	b.n	80029f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e040      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
 8002974:	40023800 	.word	0x40023800
 8002978:	40007000 	.word	0x40007000
 800297c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002980:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_RCC_OscConfig+0x538>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d030      	beq.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d129      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d122      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d119      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d10f      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800

08002a04 <__cvt>:
 8002a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a08:	ec55 4b10 	vmov	r4, r5, d0
 8002a0c:	2d00      	cmp	r5, #0
 8002a0e:	460e      	mov	r6, r1
 8002a10:	4619      	mov	r1, r3
 8002a12:	462b      	mov	r3, r5
 8002a14:	bfbb      	ittet	lt
 8002a16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002a1a:	461d      	movlt	r5, r3
 8002a1c:	2300      	movge	r3, #0
 8002a1e:	232d      	movlt	r3, #45	; 0x2d
 8002a20:	700b      	strb	r3, [r1, #0]
 8002a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002a28:	4691      	mov	r9, r2
 8002a2a:	f023 0820 	bic.w	r8, r3, #32
 8002a2e:	bfbc      	itt	lt
 8002a30:	4622      	movlt	r2, r4
 8002a32:	4614      	movlt	r4, r2
 8002a34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a38:	d005      	beq.n	8002a46 <__cvt+0x42>
 8002a3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002a3e:	d100      	bne.n	8002a42 <__cvt+0x3e>
 8002a40:	3601      	adds	r6, #1
 8002a42:	2102      	movs	r1, #2
 8002a44:	e000      	b.n	8002a48 <__cvt+0x44>
 8002a46:	2103      	movs	r1, #3
 8002a48:	ab03      	add	r3, sp, #12
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	ab02      	add	r3, sp, #8
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	ec45 4b10 	vmov	d0, r4, r5
 8002a54:	4653      	mov	r3, sl
 8002a56:	4632      	mov	r2, r6
 8002a58:	f000 fe6a 	bl	8003730 <_dtoa_r>
 8002a5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002a60:	4607      	mov	r7, r0
 8002a62:	d102      	bne.n	8002a6a <__cvt+0x66>
 8002a64:	f019 0f01 	tst.w	r9, #1
 8002a68:	d022      	beq.n	8002ab0 <__cvt+0xac>
 8002a6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a6e:	eb07 0906 	add.w	r9, r7, r6
 8002a72:	d110      	bne.n	8002a96 <__cvt+0x92>
 8002a74:	783b      	ldrb	r3, [r7, #0]
 8002a76:	2b30      	cmp	r3, #48	; 0x30
 8002a78:	d10a      	bne.n	8002a90 <__cvt+0x8c>
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	4620      	mov	r0, r4
 8002a80:	4629      	mov	r1, r5
 8002a82:	f7fe f841 	bl	8000b08 <__aeabi_dcmpeq>
 8002a86:	b918      	cbnz	r0, 8002a90 <__cvt+0x8c>
 8002a88:	f1c6 0601 	rsb	r6, r6, #1
 8002a8c:	f8ca 6000 	str.w	r6, [sl]
 8002a90:	f8da 3000 	ldr.w	r3, [sl]
 8002a94:	4499      	add	r9, r3
 8002a96:	2200      	movs	r2, #0
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	f7fe f833 	bl	8000b08 <__aeabi_dcmpeq>
 8002aa2:	b108      	cbz	r0, 8002aa8 <__cvt+0xa4>
 8002aa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8002aa8:	2230      	movs	r2, #48	; 0x30
 8002aaa:	9b03      	ldr	r3, [sp, #12]
 8002aac:	454b      	cmp	r3, r9
 8002aae:	d307      	bcc.n	8002ac0 <__cvt+0xbc>
 8002ab0:	9b03      	ldr	r3, [sp, #12]
 8002ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ab4:	1bdb      	subs	r3, r3, r7
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	b004      	add	sp, #16
 8002abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac0:	1c59      	adds	r1, r3, #1
 8002ac2:	9103      	str	r1, [sp, #12]
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e7f0      	b.n	8002aaa <__cvt+0xa6>

08002ac8 <__exponent>:
 8002ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002aca:	4603      	mov	r3, r0
 8002acc:	2900      	cmp	r1, #0
 8002ace:	bfb8      	it	lt
 8002ad0:	4249      	neglt	r1, r1
 8002ad2:	f803 2b02 	strb.w	r2, [r3], #2
 8002ad6:	bfb4      	ite	lt
 8002ad8:	222d      	movlt	r2, #45	; 0x2d
 8002ada:	222b      	movge	r2, #43	; 0x2b
 8002adc:	2909      	cmp	r1, #9
 8002ade:	7042      	strb	r2, [r0, #1]
 8002ae0:	dd2a      	ble.n	8002b38 <__exponent+0x70>
 8002ae2:	f10d 0207 	add.w	r2, sp, #7
 8002ae6:	4617      	mov	r7, r2
 8002ae8:	260a      	movs	r6, #10
 8002aea:	4694      	mov	ip, r2
 8002aec:	fb91 f5f6 	sdiv	r5, r1, r6
 8002af0:	fb06 1415 	mls	r4, r6, r5, r1
 8002af4:	3430      	adds	r4, #48	; 0x30
 8002af6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002afa:	460c      	mov	r4, r1
 8002afc:	2c63      	cmp	r4, #99	; 0x63
 8002afe:	f102 32ff 	add.w	r2, r2, #4294967295
 8002b02:	4629      	mov	r1, r5
 8002b04:	dcf1      	bgt.n	8002aea <__exponent+0x22>
 8002b06:	3130      	adds	r1, #48	; 0x30
 8002b08:	f1ac 0402 	sub.w	r4, ip, #2
 8002b0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002b10:	1c41      	adds	r1, r0, #1
 8002b12:	4622      	mov	r2, r4
 8002b14:	42ba      	cmp	r2, r7
 8002b16:	d30a      	bcc.n	8002b2e <__exponent+0x66>
 8002b18:	f10d 0209 	add.w	r2, sp, #9
 8002b1c:	eba2 020c 	sub.w	r2, r2, ip
 8002b20:	42bc      	cmp	r4, r7
 8002b22:	bf88      	it	hi
 8002b24:	2200      	movhi	r2, #0
 8002b26:	4413      	add	r3, r2
 8002b28:	1a18      	subs	r0, r3, r0
 8002b2a:	b003      	add	sp, #12
 8002b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002b32:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002b36:	e7ed      	b.n	8002b14 <__exponent+0x4c>
 8002b38:	2330      	movs	r3, #48	; 0x30
 8002b3a:	3130      	adds	r1, #48	; 0x30
 8002b3c:	7083      	strb	r3, [r0, #2]
 8002b3e:	70c1      	strb	r1, [r0, #3]
 8002b40:	1d03      	adds	r3, r0, #4
 8002b42:	e7f1      	b.n	8002b28 <__exponent+0x60>

08002b44 <_printf_float>:
 8002b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b48:	ed2d 8b02 	vpush	{d8}
 8002b4c:	b08d      	sub	sp, #52	; 0x34
 8002b4e:	460c      	mov	r4, r1
 8002b50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002b54:	4616      	mov	r6, r2
 8002b56:	461f      	mov	r7, r3
 8002b58:	4605      	mov	r5, r0
 8002b5a:	f000 fce7 	bl	800352c <_localeconv_r>
 8002b5e:	f8d0 a000 	ldr.w	sl, [r0]
 8002b62:	4650      	mov	r0, sl
 8002b64:	f7fd fba4 	bl	80002b0 <strlen>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	9305      	str	r3, [sp, #20]
 8002b70:	f8d8 3000 	ldr.w	r3, [r8]
 8002b74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002b78:	3307      	adds	r3, #7
 8002b7a:	f023 0307 	bic.w	r3, r3, #7
 8002b7e:	f103 0208 	add.w	r2, r3, #8
 8002b82:	f8c8 2000 	str.w	r2, [r8]
 8002b86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002b8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002b8e:	9307      	str	r3, [sp, #28]
 8002b90:	f8cd 8018 	str.w	r8, [sp, #24]
 8002b94:	ee08 0a10 	vmov	s16, r0
 8002b98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ba0:	4b9e      	ldr	r3, [pc, #632]	; (8002e1c <_printf_float+0x2d8>)
 8002ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba6:	f7fd ffe1 	bl	8000b6c <__aeabi_dcmpun>
 8002baa:	bb88      	cbnz	r0, 8002c10 <_printf_float+0xcc>
 8002bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bb0:	4b9a      	ldr	r3, [pc, #616]	; (8002e1c <_printf_float+0x2d8>)
 8002bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb6:	f7fd ffbb 	bl	8000b30 <__aeabi_dcmple>
 8002bba:	bb48      	cbnz	r0, 8002c10 <_printf_float+0xcc>
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	4640      	mov	r0, r8
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	f7fd ffaa 	bl	8000b1c <__aeabi_dcmplt>
 8002bc8:	b110      	cbz	r0, 8002bd0 <_printf_float+0x8c>
 8002bca:	232d      	movs	r3, #45	; 0x2d
 8002bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bd0:	4a93      	ldr	r2, [pc, #588]	; (8002e20 <_printf_float+0x2dc>)
 8002bd2:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <_printf_float+0x2e0>)
 8002bd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002bd8:	bf94      	ite	ls
 8002bda:	4690      	movls	r8, r2
 8002bdc:	4698      	movhi	r8, r3
 8002bde:	2303      	movs	r3, #3
 8002be0:	6123      	str	r3, [r4, #16]
 8002be2:	9b05      	ldr	r3, [sp, #20]
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	6023      	str	r3, [r4, #0]
 8002bea:	f04f 0900 	mov.w	r9, #0
 8002bee:	9700      	str	r7, [sp, #0]
 8002bf0:	4633      	mov	r3, r6
 8002bf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f000 f9da 	bl	8002fb0 <_printf_common>
 8002bfc:	3001      	adds	r0, #1
 8002bfe:	f040 8090 	bne.w	8002d22 <_printf_float+0x1de>
 8002c02:	f04f 30ff 	mov.w	r0, #4294967295
 8002c06:	b00d      	add	sp, #52	; 0x34
 8002c08:	ecbd 8b02 	vpop	{d8}
 8002c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c10:	4642      	mov	r2, r8
 8002c12:	464b      	mov	r3, r9
 8002c14:	4640      	mov	r0, r8
 8002c16:	4649      	mov	r1, r9
 8002c18:	f7fd ffa8 	bl	8000b6c <__aeabi_dcmpun>
 8002c1c:	b140      	cbz	r0, 8002c30 <_printf_float+0xec>
 8002c1e:	464b      	mov	r3, r9
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bfbc      	itt	lt
 8002c24:	232d      	movlt	r3, #45	; 0x2d
 8002c26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002c2a:	4a7f      	ldr	r2, [pc, #508]	; (8002e28 <_printf_float+0x2e4>)
 8002c2c:	4b7f      	ldr	r3, [pc, #508]	; (8002e2c <_printf_float+0x2e8>)
 8002c2e:	e7d1      	b.n	8002bd4 <_printf_float+0x90>
 8002c30:	6863      	ldr	r3, [r4, #4]
 8002c32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002c36:	9206      	str	r2, [sp, #24]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	d13f      	bne.n	8002cbc <_printf_float+0x178>
 8002c3c:	2306      	movs	r3, #6
 8002c3e:	6063      	str	r3, [r4, #4]
 8002c40:	9b05      	ldr	r3, [sp, #20]
 8002c42:	6861      	ldr	r1, [r4, #4]
 8002c44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9303      	str	r3, [sp, #12]
 8002c4c:	ab0a      	add	r3, sp, #40	; 0x28
 8002c4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002c52:	ab09      	add	r3, sp, #36	; 0x24
 8002c54:	ec49 8b10 	vmov	d0, r8, r9
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	6022      	str	r2, [r4, #0]
 8002c5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002c60:	4628      	mov	r0, r5
 8002c62:	f7ff fecf 	bl	8002a04 <__cvt>
 8002c66:	9b06      	ldr	r3, [sp, #24]
 8002c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c6a:	2b47      	cmp	r3, #71	; 0x47
 8002c6c:	4680      	mov	r8, r0
 8002c6e:	d108      	bne.n	8002c82 <_printf_float+0x13e>
 8002c70:	1cc8      	adds	r0, r1, #3
 8002c72:	db02      	blt.n	8002c7a <_printf_float+0x136>
 8002c74:	6863      	ldr	r3, [r4, #4]
 8002c76:	4299      	cmp	r1, r3
 8002c78:	dd41      	ble.n	8002cfe <_printf_float+0x1ba>
 8002c7a:	f1ab 0302 	sub.w	r3, fp, #2
 8002c7e:	fa5f fb83 	uxtb.w	fp, r3
 8002c82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002c86:	d820      	bhi.n	8002cca <_printf_float+0x186>
 8002c88:	3901      	subs	r1, #1
 8002c8a:	465a      	mov	r2, fp
 8002c8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c90:	9109      	str	r1, [sp, #36]	; 0x24
 8002c92:	f7ff ff19 	bl	8002ac8 <__exponent>
 8002c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c98:	1813      	adds	r3, r2, r0
 8002c9a:	2a01      	cmp	r2, #1
 8002c9c:	4681      	mov	r9, r0
 8002c9e:	6123      	str	r3, [r4, #16]
 8002ca0:	dc02      	bgt.n	8002ca8 <_printf_float+0x164>
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	07d2      	lsls	r2, r2, #31
 8002ca6:	d501      	bpl.n	8002cac <_printf_float+0x168>
 8002ca8:	3301      	adds	r3, #1
 8002caa:	6123      	str	r3, [r4, #16]
 8002cac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d09c      	beq.n	8002bee <_printf_float+0xaa>
 8002cb4:	232d      	movs	r3, #45	; 0x2d
 8002cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cba:	e798      	b.n	8002bee <_printf_float+0xaa>
 8002cbc:	9a06      	ldr	r2, [sp, #24]
 8002cbe:	2a47      	cmp	r2, #71	; 0x47
 8002cc0:	d1be      	bne.n	8002c40 <_printf_float+0xfc>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1bc      	bne.n	8002c40 <_printf_float+0xfc>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e7b9      	b.n	8002c3e <_printf_float+0xfa>
 8002cca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002cce:	d118      	bne.n	8002d02 <_printf_float+0x1be>
 8002cd0:	2900      	cmp	r1, #0
 8002cd2:	6863      	ldr	r3, [r4, #4]
 8002cd4:	dd0b      	ble.n	8002cee <_printf_float+0x1aa>
 8002cd6:	6121      	str	r1, [r4, #16]
 8002cd8:	b913      	cbnz	r3, 8002ce0 <_printf_float+0x19c>
 8002cda:	6822      	ldr	r2, [r4, #0]
 8002cdc:	07d0      	lsls	r0, r2, #31
 8002cde:	d502      	bpl.n	8002ce6 <_printf_float+0x1a2>
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	440b      	add	r3, r1
 8002ce4:	6123      	str	r3, [r4, #16]
 8002ce6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002ce8:	f04f 0900 	mov.w	r9, #0
 8002cec:	e7de      	b.n	8002cac <_printf_float+0x168>
 8002cee:	b913      	cbnz	r3, 8002cf6 <_printf_float+0x1b2>
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	07d2      	lsls	r2, r2, #31
 8002cf4:	d501      	bpl.n	8002cfa <_printf_float+0x1b6>
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	e7f4      	b.n	8002ce4 <_printf_float+0x1a0>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e7f2      	b.n	8002ce4 <_printf_float+0x1a0>
 8002cfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d04:	4299      	cmp	r1, r3
 8002d06:	db05      	blt.n	8002d14 <_printf_float+0x1d0>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	6121      	str	r1, [r4, #16]
 8002d0c:	07d8      	lsls	r0, r3, #31
 8002d0e:	d5ea      	bpl.n	8002ce6 <_printf_float+0x1a2>
 8002d10:	1c4b      	adds	r3, r1, #1
 8002d12:	e7e7      	b.n	8002ce4 <_printf_float+0x1a0>
 8002d14:	2900      	cmp	r1, #0
 8002d16:	bfd4      	ite	le
 8002d18:	f1c1 0202 	rsble	r2, r1, #2
 8002d1c:	2201      	movgt	r2, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	e7e0      	b.n	8002ce4 <_printf_float+0x1a0>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	055a      	lsls	r2, r3, #21
 8002d26:	d407      	bmi.n	8002d38 <_printf_float+0x1f4>
 8002d28:	6923      	ldr	r3, [r4, #16]
 8002d2a:	4642      	mov	r2, r8
 8002d2c:	4631      	mov	r1, r6
 8002d2e:	4628      	mov	r0, r5
 8002d30:	47b8      	blx	r7
 8002d32:	3001      	adds	r0, #1
 8002d34:	d12c      	bne.n	8002d90 <_printf_float+0x24c>
 8002d36:	e764      	b.n	8002c02 <_printf_float+0xbe>
 8002d38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002d3c:	f240 80e0 	bls.w	8002f00 <_printf_float+0x3bc>
 8002d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d44:	2200      	movs	r2, #0
 8002d46:	2300      	movs	r3, #0
 8002d48:	f7fd fede 	bl	8000b08 <__aeabi_dcmpeq>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d034      	beq.n	8002dba <_printf_float+0x276>
 8002d50:	4a37      	ldr	r2, [pc, #220]	; (8002e30 <_printf_float+0x2ec>)
 8002d52:	2301      	movs	r3, #1
 8002d54:	4631      	mov	r1, r6
 8002d56:	4628      	mov	r0, r5
 8002d58:	47b8      	blx	r7
 8002d5a:	3001      	adds	r0, #1
 8002d5c:	f43f af51 	beq.w	8002c02 <_printf_float+0xbe>
 8002d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d64:	429a      	cmp	r2, r3
 8002d66:	db02      	blt.n	8002d6e <_printf_float+0x22a>
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	07d8      	lsls	r0, r3, #31
 8002d6c:	d510      	bpl.n	8002d90 <_printf_float+0x24c>
 8002d6e:	ee18 3a10 	vmov	r3, s16
 8002d72:	4652      	mov	r2, sl
 8002d74:	4631      	mov	r1, r6
 8002d76:	4628      	mov	r0, r5
 8002d78:	47b8      	blx	r7
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	f43f af41 	beq.w	8002c02 <_printf_float+0xbe>
 8002d80:	f04f 0800 	mov.w	r8, #0
 8002d84:	f104 091a 	add.w	r9, r4, #26
 8002d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	4543      	cmp	r3, r8
 8002d8e:	dc09      	bgt.n	8002da4 <_printf_float+0x260>
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	079b      	lsls	r3, r3, #30
 8002d94:	f100 8107 	bmi.w	8002fa6 <_printf_float+0x462>
 8002d98:	68e0      	ldr	r0, [r4, #12]
 8002d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d9c:	4298      	cmp	r0, r3
 8002d9e:	bfb8      	it	lt
 8002da0:	4618      	movlt	r0, r3
 8002da2:	e730      	b.n	8002c06 <_printf_float+0xc2>
 8002da4:	2301      	movs	r3, #1
 8002da6:	464a      	mov	r2, r9
 8002da8:	4631      	mov	r1, r6
 8002daa:	4628      	mov	r0, r5
 8002dac:	47b8      	blx	r7
 8002dae:	3001      	adds	r0, #1
 8002db0:	f43f af27 	beq.w	8002c02 <_printf_float+0xbe>
 8002db4:	f108 0801 	add.w	r8, r8, #1
 8002db8:	e7e6      	b.n	8002d88 <_printf_float+0x244>
 8002dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	dc39      	bgt.n	8002e34 <_printf_float+0x2f0>
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <_printf_float+0x2ec>)
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	4631      	mov	r1, r6
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	47b8      	blx	r7
 8002dca:	3001      	adds	r0, #1
 8002dcc:	f43f af19 	beq.w	8002c02 <_printf_float+0xbe>
 8002dd0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	d102      	bne.n	8002dde <_printf_float+0x29a>
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	07d9      	lsls	r1, r3, #31
 8002ddc:	d5d8      	bpl.n	8002d90 <_printf_float+0x24c>
 8002dde:	ee18 3a10 	vmov	r3, s16
 8002de2:	4652      	mov	r2, sl
 8002de4:	4631      	mov	r1, r6
 8002de6:	4628      	mov	r0, r5
 8002de8:	47b8      	blx	r7
 8002dea:	3001      	adds	r0, #1
 8002dec:	f43f af09 	beq.w	8002c02 <_printf_float+0xbe>
 8002df0:	f04f 0900 	mov.w	r9, #0
 8002df4:	f104 0a1a 	add.w	sl, r4, #26
 8002df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dfa:	425b      	negs	r3, r3
 8002dfc:	454b      	cmp	r3, r9
 8002dfe:	dc01      	bgt.n	8002e04 <_printf_float+0x2c0>
 8002e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e02:	e792      	b.n	8002d2a <_printf_float+0x1e6>
 8002e04:	2301      	movs	r3, #1
 8002e06:	4652      	mov	r2, sl
 8002e08:	4631      	mov	r1, r6
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	47b8      	blx	r7
 8002e0e:	3001      	adds	r0, #1
 8002e10:	f43f aef7 	beq.w	8002c02 <_printf_float+0xbe>
 8002e14:	f109 0901 	add.w	r9, r9, #1
 8002e18:	e7ee      	b.n	8002df8 <_printf_float+0x2b4>
 8002e1a:	bf00      	nop
 8002e1c:	7fefffff 	.word	0x7fefffff
 8002e20:	08005740 	.word	0x08005740
 8002e24:	08005744 	.word	0x08005744
 8002e28:	08005748 	.word	0x08005748
 8002e2c:	0800574c 	.word	0x0800574c
 8002e30:	08005750 	.word	0x08005750
 8002e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	bfa8      	it	ge
 8002e3c:	461a      	movge	r2, r3
 8002e3e:	2a00      	cmp	r2, #0
 8002e40:	4691      	mov	r9, r2
 8002e42:	dc37      	bgt.n	8002eb4 <_printf_float+0x370>
 8002e44:	f04f 0b00 	mov.w	fp, #0
 8002e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e4c:	f104 021a 	add.w	r2, r4, #26
 8002e50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e52:	9305      	str	r3, [sp, #20]
 8002e54:	eba3 0309 	sub.w	r3, r3, r9
 8002e58:	455b      	cmp	r3, fp
 8002e5a:	dc33      	bgt.n	8002ec4 <_printf_float+0x380>
 8002e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e60:	429a      	cmp	r2, r3
 8002e62:	db3b      	blt.n	8002edc <_printf_float+0x398>
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	07da      	lsls	r2, r3, #31
 8002e68:	d438      	bmi.n	8002edc <_printf_float+0x398>
 8002e6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002e6e:	eba2 0903 	sub.w	r9, r2, r3
 8002e72:	9b05      	ldr	r3, [sp, #20]
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	4591      	cmp	r9, r2
 8002e78:	bfa8      	it	ge
 8002e7a:	4691      	movge	r9, r2
 8002e7c:	f1b9 0f00 	cmp.w	r9, #0
 8002e80:	dc35      	bgt.n	8002eee <_printf_float+0x3aa>
 8002e82:	f04f 0800 	mov.w	r8, #0
 8002e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e8a:	f104 0a1a 	add.w	sl, r4, #26
 8002e8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	eba3 0309 	sub.w	r3, r3, r9
 8002e98:	4543      	cmp	r3, r8
 8002e9a:	f77f af79 	ble.w	8002d90 <_printf_float+0x24c>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	4652      	mov	r2, sl
 8002ea2:	4631      	mov	r1, r6
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	47b8      	blx	r7
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	f43f aeaa 	beq.w	8002c02 <_printf_float+0xbe>
 8002eae:	f108 0801 	add.w	r8, r8, #1
 8002eb2:	e7ec      	b.n	8002e8e <_printf_float+0x34a>
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	4631      	mov	r1, r6
 8002eb8:	4642      	mov	r2, r8
 8002eba:	4628      	mov	r0, r5
 8002ebc:	47b8      	blx	r7
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d1c0      	bne.n	8002e44 <_printf_float+0x300>
 8002ec2:	e69e      	b.n	8002c02 <_printf_float+0xbe>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	4631      	mov	r1, r6
 8002ec8:	4628      	mov	r0, r5
 8002eca:	9205      	str	r2, [sp, #20]
 8002ecc:	47b8      	blx	r7
 8002ece:	3001      	adds	r0, #1
 8002ed0:	f43f ae97 	beq.w	8002c02 <_printf_float+0xbe>
 8002ed4:	9a05      	ldr	r2, [sp, #20]
 8002ed6:	f10b 0b01 	add.w	fp, fp, #1
 8002eda:	e7b9      	b.n	8002e50 <_printf_float+0x30c>
 8002edc:	ee18 3a10 	vmov	r3, s16
 8002ee0:	4652      	mov	r2, sl
 8002ee2:	4631      	mov	r1, r6
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	47b8      	blx	r7
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d1be      	bne.n	8002e6a <_printf_float+0x326>
 8002eec:	e689      	b.n	8002c02 <_printf_float+0xbe>
 8002eee:	9a05      	ldr	r2, [sp, #20]
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	4442      	add	r2, r8
 8002ef4:	4631      	mov	r1, r6
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	47b8      	blx	r7
 8002efa:	3001      	adds	r0, #1
 8002efc:	d1c1      	bne.n	8002e82 <_printf_float+0x33e>
 8002efe:	e680      	b.n	8002c02 <_printf_float+0xbe>
 8002f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f02:	2a01      	cmp	r2, #1
 8002f04:	dc01      	bgt.n	8002f0a <_printf_float+0x3c6>
 8002f06:	07db      	lsls	r3, r3, #31
 8002f08:	d53a      	bpl.n	8002f80 <_printf_float+0x43c>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	4631      	mov	r1, r6
 8002f10:	4628      	mov	r0, r5
 8002f12:	47b8      	blx	r7
 8002f14:	3001      	adds	r0, #1
 8002f16:	f43f ae74 	beq.w	8002c02 <_printf_float+0xbe>
 8002f1a:	ee18 3a10 	vmov	r3, s16
 8002f1e:	4652      	mov	r2, sl
 8002f20:	4631      	mov	r1, r6
 8002f22:	4628      	mov	r0, r5
 8002f24:	47b8      	blx	r7
 8002f26:	3001      	adds	r0, #1
 8002f28:	f43f ae6b 	beq.w	8002c02 <_printf_float+0xbe>
 8002f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f30:	2200      	movs	r2, #0
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8002f38:	f7fd fde6 	bl	8000b08 <__aeabi_dcmpeq>
 8002f3c:	b9d8      	cbnz	r0, 8002f76 <_printf_float+0x432>
 8002f3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002f42:	f108 0201 	add.w	r2, r8, #1
 8002f46:	4631      	mov	r1, r6
 8002f48:	4628      	mov	r0, r5
 8002f4a:	47b8      	blx	r7
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	d10e      	bne.n	8002f6e <_printf_float+0x42a>
 8002f50:	e657      	b.n	8002c02 <_printf_float+0xbe>
 8002f52:	2301      	movs	r3, #1
 8002f54:	4652      	mov	r2, sl
 8002f56:	4631      	mov	r1, r6
 8002f58:	4628      	mov	r0, r5
 8002f5a:	47b8      	blx	r7
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	f43f ae50 	beq.w	8002c02 <_printf_float+0xbe>
 8002f62:	f108 0801 	add.w	r8, r8, #1
 8002f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	4543      	cmp	r3, r8
 8002f6c:	dcf1      	bgt.n	8002f52 <_printf_float+0x40e>
 8002f6e:	464b      	mov	r3, r9
 8002f70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f74:	e6da      	b.n	8002d2c <_printf_float+0x1e8>
 8002f76:	f04f 0800 	mov.w	r8, #0
 8002f7a:	f104 0a1a 	add.w	sl, r4, #26
 8002f7e:	e7f2      	b.n	8002f66 <_printf_float+0x422>
 8002f80:	2301      	movs	r3, #1
 8002f82:	4642      	mov	r2, r8
 8002f84:	e7df      	b.n	8002f46 <_printf_float+0x402>
 8002f86:	2301      	movs	r3, #1
 8002f88:	464a      	mov	r2, r9
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	47b8      	blx	r7
 8002f90:	3001      	adds	r0, #1
 8002f92:	f43f ae36 	beq.w	8002c02 <_printf_float+0xbe>
 8002f96:	f108 0801 	add.w	r8, r8, #1
 8002f9a:	68e3      	ldr	r3, [r4, #12]
 8002f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f9e:	1a5b      	subs	r3, r3, r1
 8002fa0:	4543      	cmp	r3, r8
 8002fa2:	dcf0      	bgt.n	8002f86 <_printf_float+0x442>
 8002fa4:	e6f8      	b.n	8002d98 <_printf_float+0x254>
 8002fa6:	f04f 0800 	mov.w	r8, #0
 8002faa:	f104 0919 	add.w	r9, r4, #25
 8002fae:	e7f4      	b.n	8002f9a <_printf_float+0x456>

08002fb0 <_printf_common>:
 8002fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb4:	4616      	mov	r6, r2
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	688a      	ldr	r2, [r1, #8]
 8002fba:	690b      	ldr	r3, [r1, #16]
 8002fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bfb8      	it	lt
 8002fc4:	4613      	movlt	r3, r2
 8002fc6:	6033      	str	r3, [r6, #0]
 8002fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fcc:	4607      	mov	r7, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	b10a      	cbz	r2, 8002fd6 <_printf_common+0x26>
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	6033      	str	r3, [r6, #0]
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	0699      	lsls	r1, r3, #26
 8002fda:	bf42      	ittt	mi
 8002fdc:	6833      	ldrmi	r3, [r6, #0]
 8002fde:	3302      	addmi	r3, #2
 8002fe0:	6033      	strmi	r3, [r6, #0]
 8002fe2:	6825      	ldr	r5, [r4, #0]
 8002fe4:	f015 0506 	ands.w	r5, r5, #6
 8002fe8:	d106      	bne.n	8002ff8 <_printf_common+0x48>
 8002fea:	f104 0a19 	add.w	sl, r4, #25
 8002fee:	68e3      	ldr	r3, [r4, #12]
 8002ff0:	6832      	ldr	r2, [r6, #0]
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	42ab      	cmp	r3, r5
 8002ff6:	dc26      	bgt.n	8003046 <_printf_common+0x96>
 8002ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ffc:	1e13      	subs	r3, r2, #0
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	bf18      	it	ne
 8003002:	2301      	movne	r3, #1
 8003004:	0692      	lsls	r2, r2, #26
 8003006:	d42b      	bmi.n	8003060 <_printf_common+0xb0>
 8003008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800300c:	4649      	mov	r1, r9
 800300e:	4638      	mov	r0, r7
 8003010:	47c0      	blx	r8
 8003012:	3001      	adds	r0, #1
 8003014:	d01e      	beq.n	8003054 <_printf_common+0xa4>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	6922      	ldr	r2, [r4, #16]
 800301a:	f003 0306 	and.w	r3, r3, #6
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf02      	ittt	eq
 8003022:	68e5      	ldreq	r5, [r4, #12]
 8003024:	6833      	ldreq	r3, [r6, #0]
 8003026:	1aed      	subeq	r5, r5, r3
 8003028:	68a3      	ldr	r3, [r4, #8]
 800302a:	bf0c      	ite	eq
 800302c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003030:	2500      	movne	r5, #0
 8003032:	4293      	cmp	r3, r2
 8003034:	bfc4      	itt	gt
 8003036:	1a9b      	subgt	r3, r3, r2
 8003038:	18ed      	addgt	r5, r5, r3
 800303a:	2600      	movs	r6, #0
 800303c:	341a      	adds	r4, #26
 800303e:	42b5      	cmp	r5, r6
 8003040:	d11a      	bne.n	8003078 <_printf_common+0xc8>
 8003042:	2000      	movs	r0, #0
 8003044:	e008      	b.n	8003058 <_printf_common+0xa8>
 8003046:	2301      	movs	r3, #1
 8003048:	4652      	mov	r2, sl
 800304a:	4649      	mov	r1, r9
 800304c:	4638      	mov	r0, r7
 800304e:	47c0      	blx	r8
 8003050:	3001      	adds	r0, #1
 8003052:	d103      	bne.n	800305c <_printf_common+0xac>
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800305c:	3501      	adds	r5, #1
 800305e:	e7c6      	b.n	8002fee <_printf_common+0x3e>
 8003060:	18e1      	adds	r1, r4, r3
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	2030      	movs	r0, #48	; 0x30
 8003066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800306a:	4422      	add	r2, r4
 800306c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003074:	3302      	adds	r3, #2
 8003076:	e7c7      	b.n	8003008 <_printf_common+0x58>
 8003078:	2301      	movs	r3, #1
 800307a:	4622      	mov	r2, r4
 800307c:	4649      	mov	r1, r9
 800307e:	4638      	mov	r0, r7
 8003080:	47c0      	blx	r8
 8003082:	3001      	adds	r0, #1
 8003084:	d0e6      	beq.n	8003054 <_printf_common+0xa4>
 8003086:	3601      	adds	r6, #1
 8003088:	e7d9      	b.n	800303e <_printf_common+0x8e>
	...

0800308c <_printf_i>:
 800308c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003090:	7e0f      	ldrb	r7, [r1, #24]
 8003092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003094:	2f78      	cmp	r7, #120	; 0x78
 8003096:	4691      	mov	r9, r2
 8003098:	4680      	mov	r8, r0
 800309a:	460c      	mov	r4, r1
 800309c:	469a      	mov	sl, r3
 800309e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030a2:	d807      	bhi.n	80030b4 <_printf_i+0x28>
 80030a4:	2f62      	cmp	r7, #98	; 0x62
 80030a6:	d80a      	bhi.n	80030be <_printf_i+0x32>
 80030a8:	2f00      	cmp	r7, #0
 80030aa:	f000 80d4 	beq.w	8003256 <_printf_i+0x1ca>
 80030ae:	2f58      	cmp	r7, #88	; 0x58
 80030b0:	f000 80c0 	beq.w	8003234 <_printf_i+0x1a8>
 80030b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030bc:	e03a      	b.n	8003134 <_printf_i+0xa8>
 80030be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030c2:	2b15      	cmp	r3, #21
 80030c4:	d8f6      	bhi.n	80030b4 <_printf_i+0x28>
 80030c6:	a101      	add	r1, pc, #4	; (adr r1, 80030cc <_printf_i+0x40>)
 80030c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030cc:	08003125 	.word	0x08003125
 80030d0:	08003139 	.word	0x08003139
 80030d4:	080030b5 	.word	0x080030b5
 80030d8:	080030b5 	.word	0x080030b5
 80030dc:	080030b5 	.word	0x080030b5
 80030e0:	080030b5 	.word	0x080030b5
 80030e4:	08003139 	.word	0x08003139
 80030e8:	080030b5 	.word	0x080030b5
 80030ec:	080030b5 	.word	0x080030b5
 80030f0:	080030b5 	.word	0x080030b5
 80030f4:	080030b5 	.word	0x080030b5
 80030f8:	0800323d 	.word	0x0800323d
 80030fc:	08003165 	.word	0x08003165
 8003100:	080031f7 	.word	0x080031f7
 8003104:	080030b5 	.word	0x080030b5
 8003108:	080030b5 	.word	0x080030b5
 800310c:	0800325f 	.word	0x0800325f
 8003110:	080030b5 	.word	0x080030b5
 8003114:	08003165 	.word	0x08003165
 8003118:	080030b5 	.word	0x080030b5
 800311c:	080030b5 	.word	0x080030b5
 8003120:	080031ff 	.word	0x080031ff
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	1d1a      	adds	r2, r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	602a      	str	r2, [r5, #0]
 800312c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003134:	2301      	movs	r3, #1
 8003136:	e09f      	b.n	8003278 <_printf_i+0x1ec>
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	682b      	ldr	r3, [r5, #0]
 800313c:	0607      	lsls	r7, r0, #24
 800313e:	f103 0104 	add.w	r1, r3, #4
 8003142:	6029      	str	r1, [r5, #0]
 8003144:	d501      	bpl.n	800314a <_printf_i+0xbe>
 8003146:	681e      	ldr	r6, [r3, #0]
 8003148:	e003      	b.n	8003152 <_printf_i+0xc6>
 800314a:	0646      	lsls	r6, r0, #25
 800314c:	d5fb      	bpl.n	8003146 <_printf_i+0xba>
 800314e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003152:	2e00      	cmp	r6, #0
 8003154:	da03      	bge.n	800315e <_printf_i+0xd2>
 8003156:	232d      	movs	r3, #45	; 0x2d
 8003158:	4276      	negs	r6, r6
 800315a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800315e:	485a      	ldr	r0, [pc, #360]	; (80032c8 <_printf_i+0x23c>)
 8003160:	230a      	movs	r3, #10
 8003162:	e012      	b.n	800318a <_printf_i+0xfe>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	6820      	ldr	r0, [r4, #0]
 8003168:	1d19      	adds	r1, r3, #4
 800316a:	6029      	str	r1, [r5, #0]
 800316c:	0605      	lsls	r5, r0, #24
 800316e:	d501      	bpl.n	8003174 <_printf_i+0xe8>
 8003170:	681e      	ldr	r6, [r3, #0]
 8003172:	e002      	b.n	800317a <_printf_i+0xee>
 8003174:	0641      	lsls	r1, r0, #25
 8003176:	d5fb      	bpl.n	8003170 <_printf_i+0xe4>
 8003178:	881e      	ldrh	r6, [r3, #0]
 800317a:	4853      	ldr	r0, [pc, #332]	; (80032c8 <_printf_i+0x23c>)
 800317c:	2f6f      	cmp	r7, #111	; 0x6f
 800317e:	bf0c      	ite	eq
 8003180:	2308      	moveq	r3, #8
 8003182:	230a      	movne	r3, #10
 8003184:	2100      	movs	r1, #0
 8003186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800318a:	6865      	ldr	r5, [r4, #4]
 800318c:	60a5      	str	r5, [r4, #8]
 800318e:	2d00      	cmp	r5, #0
 8003190:	bfa2      	ittt	ge
 8003192:	6821      	ldrge	r1, [r4, #0]
 8003194:	f021 0104 	bicge.w	r1, r1, #4
 8003198:	6021      	strge	r1, [r4, #0]
 800319a:	b90e      	cbnz	r6, 80031a0 <_printf_i+0x114>
 800319c:	2d00      	cmp	r5, #0
 800319e:	d04b      	beq.n	8003238 <_printf_i+0x1ac>
 80031a0:	4615      	mov	r5, r2
 80031a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80031a6:	fb03 6711 	mls	r7, r3, r1, r6
 80031aa:	5dc7      	ldrb	r7, [r0, r7]
 80031ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031b0:	4637      	mov	r7, r6
 80031b2:	42bb      	cmp	r3, r7
 80031b4:	460e      	mov	r6, r1
 80031b6:	d9f4      	bls.n	80031a2 <_printf_i+0x116>
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d10b      	bne.n	80031d4 <_printf_i+0x148>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	07de      	lsls	r6, r3, #31
 80031c0:	d508      	bpl.n	80031d4 <_printf_i+0x148>
 80031c2:	6923      	ldr	r3, [r4, #16]
 80031c4:	6861      	ldr	r1, [r4, #4]
 80031c6:	4299      	cmp	r1, r3
 80031c8:	bfde      	ittt	le
 80031ca:	2330      	movle	r3, #48	; 0x30
 80031cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031d4:	1b52      	subs	r2, r2, r5
 80031d6:	6122      	str	r2, [r4, #16]
 80031d8:	f8cd a000 	str.w	sl, [sp]
 80031dc:	464b      	mov	r3, r9
 80031de:	aa03      	add	r2, sp, #12
 80031e0:	4621      	mov	r1, r4
 80031e2:	4640      	mov	r0, r8
 80031e4:	f7ff fee4 	bl	8002fb0 <_printf_common>
 80031e8:	3001      	adds	r0, #1
 80031ea:	d14a      	bne.n	8003282 <_printf_i+0x1f6>
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	b004      	add	sp, #16
 80031f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	f043 0320 	orr.w	r3, r3, #32
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	4833      	ldr	r0, [pc, #204]	; (80032cc <_printf_i+0x240>)
 8003200:	2778      	movs	r7, #120	; 0x78
 8003202:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	6829      	ldr	r1, [r5, #0]
 800320a:	061f      	lsls	r7, r3, #24
 800320c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003210:	d402      	bmi.n	8003218 <_printf_i+0x18c>
 8003212:	065f      	lsls	r7, r3, #25
 8003214:	bf48      	it	mi
 8003216:	b2b6      	uxthmi	r6, r6
 8003218:	07df      	lsls	r7, r3, #31
 800321a:	bf48      	it	mi
 800321c:	f043 0320 	orrmi.w	r3, r3, #32
 8003220:	6029      	str	r1, [r5, #0]
 8003222:	bf48      	it	mi
 8003224:	6023      	strmi	r3, [r4, #0]
 8003226:	b91e      	cbnz	r6, 8003230 <_printf_i+0x1a4>
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f023 0320 	bic.w	r3, r3, #32
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	2310      	movs	r3, #16
 8003232:	e7a7      	b.n	8003184 <_printf_i+0xf8>
 8003234:	4824      	ldr	r0, [pc, #144]	; (80032c8 <_printf_i+0x23c>)
 8003236:	e7e4      	b.n	8003202 <_printf_i+0x176>
 8003238:	4615      	mov	r5, r2
 800323a:	e7bd      	b.n	80031b8 <_printf_i+0x12c>
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	6826      	ldr	r6, [r4, #0]
 8003240:	6961      	ldr	r1, [r4, #20]
 8003242:	1d18      	adds	r0, r3, #4
 8003244:	6028      	str	r0, [r5, #0]
 8003246:	0635      	lsls	r5, r6, #24
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	d501      	bpl.n	8003250 <_printf_i+0x1c4>
 800324c:	6019      	str	r1, [r3, #0]
 800324e:	e002      	b.n	8003256 <_printf_i+0x1ca>
 8003250:	0670      	lsls	r0, r6, #25
 8003252:	d5fb      	bpl.n	800324c <_printf_i+0x1c0>
 8003254:	8019      	strh	r1, [r3, #0]
 8003256:	2300      	movs	r3, #0
 8003258:	6123      	str	r3, [r4, #16]
 800325a:	4615      	mov	r5, r2
 800325c:	e7bc      	b.n	80031d8 <_printf_i+0x14c>
 800325e:	682b      	ldr	r3, [r5, #0]
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	602a      	str	r2, [r5, #0]
 8003264:	681d      	ldr	r5, [r3, #0]
 8003266:	6862      	ldr	r2, [r4, #4]
 8003268:	2100      	movs	r1, #0
 800326a:	4628      	mov	r0, r5
 800326c:	f7fc ffd0 	bl	8000210 <memchr>
 8003270:	b108      	cbz	r0, 8003276 <_printf_i+0x1ea>
 8003272:	1b40      	subs	r0, r0, r5
 8003274:	6060      	str	r0, [r4, #4]
 8003276:	6863      	ldr	r3, [r4, #4]
 8003278:	6123      	str	r3, [r4, #16]
 800327a:	2300      	movs	r3, #0
 800327c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003280:	e7aa      	b.n	80031d8 <_printf_i+0x14c>
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	462a      	mov	r2, r5
 8003286:	4649      	mov	r1, r9
 8003288:	4640      	mov	r0, r8
 800328a:	47d0      	blx	sl
 800328c:	3001      	adds	r0, #1
 800328e:	d0ad      	beq.n	80031ec <_printf_i+0x160>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	079b      	lsls	r3, r3, #30
 8003294:	d413      	bmi.n	80032be <_printf_i+0x232>
 8003296:	68e0      	ldr	r0, [r4, #12]
 8003298:	9b03      	ldr	r3, [sp, #12]
 800329a:	4298      	cmp	r0, r3
 800329c:	bfb8      	it	lt
 800329e:	4618      	movlt	r0, r3
 80032a0:	e7a6      	b.n	80031f0 <_printf_i+0x164>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4632      	mov	r2, r6
 80032a6:	4649      	mov	r1, r9
 80032a8:	4640      	mov	r0, r8
 80032aa:	47d0      	blx	sl
 80032ac:	3001      	adds	r0, #1
 80032ae:	d09d      	beq.n	80031ec <_printf_i+0x160>
 80032b0:	3501      	adds	r5, #1
 80032b2:	68e3      	ldr	r3, [r4, #12]
 80032b4:	9903      	ldr	r1, [sp, #12]
 80032b6:	1a5b      	subs	r3, r3, r1
 80032b8:	42ab      	cmp	r3, r5
 80032ba:	dcf2      	bgt.n	80032a2 <_printf_i+0x216>
 80032bc:	e7eb      	b.n	8003296 <_printf_i+0x20a>
 80032be:	2500      	movs	r5, #0
 80032c0:	f104 0619 	add.w	r6, r4, #25
 80032c4:	e7f5      	b.n	80032b2 <_printf_i+0x226>
 80032c6:	bf00      	nop
 80032c8:	08005752 	.word	0x08005752
 80032cc:	08005763 	.word	0x08005763

080032d0 <std>:
 80032d0:	2300      	movs	r3, #0
 80032d2:	b510      	push	{r4, lr}
 80032d4:	4604      	mov	r4, r0
 80032d6:	e9c0 3300 	strd	r3, r3, [r0]
 80032da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032de:	6083      	str	r3, [r0, #8]
 80032e0:	8181      	strh	r1, [r0, #12]
 80032e2:	6643      	str	r3, [r0, #100]	; 0x64
 80032e4:	81c2      	strh	r2, [r0, #14]
 80032e6:	6183      	str	r3, [r0, #24]
 80032e8:	4619      	mov	r1, r3
 80032ea:	2208      	movs	r2, #8
 80032ec:	305c      	adds	r0, #92	; 0x5c
 80032ee:	f000 f914 	bl	800351a <memset>
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <std+0x58>)
 80032f4:	6263      	str	r3, [r4, #36]	; 0x24
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <std+0x5c>)
 80032f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <std+0x60>)
 80032fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032fe:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <std+0x64>)
 8003300:	6323      	str	r3, [r4, #48]	; 0x30
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <std+0x68>)
 8003304:	6224      	str	r4, [r4, #32]
 8003306:	429c      	cmp	r4, r3
 8003308:	d006      	beq.n	8003318 <std+0x48>
 800330a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800330e:	4294      	cmp	r4, r2
 8003310:	d002      	beq.n	8003318 <std+0x48>
 8003312:	33d0      	adds	r3, #208	; 0xd0
 8003314:	429c      	cmp	r4, r3
 8003316:	d105      	bne.n	8003324 <std+0x54>
 8003318:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800331c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003320:	f000 b978 	b.w	8003614 <__retarget_lock_init_recursive>
 8003324:	bd10      	pop	{r4, pc}
 8003326:	bf00      	nop
 8003328:	08003495 	.word	0x08003495
 800332c:	080034b7 	.word	0x080034b7
 8003330:	080034ef 	.word	0x080034ef
 8003334:	08003513 	.word	0x08003513
 8003338:	20000218 	.word	0x20000218

0800333c <stdio_exit_handler>:
 800333c:	4a02      	ldr	r2, [pc, #8]	; (8003348 <stdio_exit_handler+0xc>)
 800333e:	4903      	ldr	r1, [pc, #12]	; (800334c <stdio_exit_handler+0x10>)
 8003340:	4803      	ldr	r0, [pc, #12]	; (8003350 <stdio_exit_handler+0x14>)
 8003342:	f000 b869 	b.w	8003418 <_fwalk_sglue>
 8003346:	bf00      	nop
 8003348:	2000000c 	.word	0x2000000c
 800334c:	08004fc9 	.word	0x08004fc9
 8003350:	20000018 	.word	0x20000018

08003354 <cleanup_stdio>:
 8003354:	6841      	ldr	r1, [r0, #4]
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <cleanup_stdio+0x34>)
 8003358:	4299      	cmp	r1, r3
 800335a:	b510      	push	{r4, lr}
 800335c:	4604      	mov	r4, r0
 800335e:	d001      	beq.n	8003364 <cleanup_stdio+0x10>
 8003360:	f001 fe32 	bl	8004fc8 <_fflush_r>
 8003364:	68a1      	ldr	r1, [r4, #8]
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <cleanup_stdio+0x38>)
 8003368:	4299      	cmp	r1, r3
 800336a:	d002      	beq.n	8003372 <cleanup_stdio+0x1e>
 800336c:	4620      	mov	r0, r4
 800336e:	f001 fe2b 	bl	8004fc8 <_fflush_r>
 8003372:	68e1      	ldr	r1, [r4, #12]
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <cleanup_stdio+0x3c>)
 8003376:	4299      	cmp	r1, r3
 8003378:	d004      	beq.n	8003384 <cleanup_stdio+0x30>
 800337a:	4620      	mov	r0, r4
 800337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003380:	f001 be22 	b.w	8004fc8 <_fflush_r>
 8003384:	bd10      	pop	{r4, pc}
 8003386:	bf00      	nop
 8003388:	20000218 	.word	0x20000218
 800338c:	20000280 	.word	0x20000280
 8003390:	200002e8 	.word	0x200002e8

08003394 <global_stdio_init.part.0>:
 8003394:	b510      	push	{r4, lr}
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <global_stdio_init.part.0+0x30>)
 8003398:	4c0b      	ldr	r4, [pc, #44]	; (80033c8 <global_stdio_init.part.0+0x34>)
 800339a:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <global_stdio_init.part.0+0x38>)
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	4620      	mov	r0, r4
 80033a0:	2200      	movs	r2, #0
 80033a2:	2104      	movs	r1, #4
 80033a4:	f7ff ff94 	bl	80032d0 <std>
 80033a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80033ac:	2201      	movs	r2, #1
 80033ae:	2109      	movs	r1, #9
 80033b0:	f7ff ff8e 	bl	80032d0 <std>
 80033b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80033b8:	2202      	movs	r2, #2
 80033ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033be:	2112      	movs	r1, #18
 80033c0:	f7ff bf86 	b.w	80032d0 <std>
 80033c4:	20000350 	.word	0x20000350
 80033c8:	20000218 	.word	0x20000218
 80033cc:	0800333d 	.word	0x0800333d

080033d0 <__sfp_lock_acquire>:
 80033d0:	4801      	ldr	r0, [pc, #4]	; (80033d8 <__sfp_lock_acquire+0x8>)
 80033d2:	f000 b920 	b.w	8003616 <__retarget_lock_acquire_recursive>
 80033d6:	bf00      	nop
 80033d8:	20000359 	.word	0x20000359

080033dc <__sfp_lock_release>:
 80033dc:	4801      	ldr	r0, [pc, #4]	; (80033e4 <__sfp_lock_release+0x8>)
 80033de:	f000 b91b 	b.w	8003618 <__retarget_lock_release_recursive>
 80033e2:	bf00      	nop
 80033e4:	20000359 	.word	0x20000359

080033e8 <__sinit>:
 80033e8:	b510      	push	{r4, lr}
 80033ea:	4604      	mov	r4, r0
 80033ec:	f7ff fff0 	bl	80033d0 <__sfp_lock_acquire>
 80033f0:	6a23      	ldr	r3, [r4, #32]
 80033f2:	b11b      	cbz	r3, 80033fc <__sinit+0x14>
 80033f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f8:	f7ff bff0 	b.w	80033dc <__sfp_lock_release>
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <__sinit+0x28>)
 80033fe:	6223      	str	r3, [r4, #32]
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <__sinit+0x2c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f5      	bne.n	80033f4 <__sinit+0xc>
 8003408:	f7ff ffc4 	bl	8003394 <global_stdio_init.part.0>
 800340c:	e7f2      	b.n	80033f4 <__sinit+0xc>
 800340e:	bf00      	nop
 8003410:	08003355 	.word	0x08003355
 8003414:	20000350 	.word	0x20000350

08003418 <_fwalk_sglue>:
 8003418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800341c:	4607      	mov	r7, r0
 800341e:	4688      	mov	r8, r1
 8003420:	4614      	mov	r4, r2
 8003422:	2600      	movs	r6, #0
 8003424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003428:	f1b9 0901 	subs.w	r9, r9, #1
 800342c:	d505      	bpl.n	800343a <_fwalk_sglue+0x22>
 800342e:	6824      	ldr	r4, [r4, #0]
 8003430:	2c00      	cmp	r4, #0
 8003432:	d1f7      	bne.n	8003424 <_fwalk_sglue+0xc>
 8003434:	4630      	mov	r0, r6
 8003436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800343a:	89ab      	ldrh	r3, [r5, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d907      	bls.n	8003450 <_fwalk_sglue+0x38>
 8003440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003444:	3301      	adds	r3, #1
 8003446:	d003      	beq.n	8003450 <_fwalk_sglue+0x38>
 8003448:	4629      	mov	r1, r5
 800344a:	4638      	mov	r0, r7
 800344c:	47c0      	blx	r8
 800344e:	4306      	orrs	r6, r0
 8003450:	3568      	adds	r5, #104	; 0x68
 8003452:	e7e9      	b.n	8003428 <_fwalk_sglue+0x10>

08003454 <siprintf>:
 8003454:	b40e      	push	{r1, r2, r3}
 8003456:	b500      	push	{lr}
 8003458:	b09c      	sub	sp, #112	; 0x70
 800345a:	ab1d      	add	r3, sp, #116	; 0x74
 800345c:	9002      	str	r0, [sp, #8]
 800345e:	9006      	str	r0, [sp, #24]
 8003460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003464:	4809      	ldr	r0, [pc, #36]	; (800348c <siprintf+0x38>)
 8003466:	9107      	str	r1, [sp, #28]
 8003468:	9104      	str	r1, [sp, #16]
 800346a:	4909      	ldr	r1, [pc, #36]	; (8003490 <siprintf+0x3c>)
 800346c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003470:	9105      	str	r1, [sp, #20]
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	a902      	add	r1, sp, #8
 8003478:	f001 fc22 	bl	8004cc0 <_svfiprintf_r>
 800347c:	9b02      	ldr	r3, [sp, #8]
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	b01c      	add	sp, #112	; 0x70
 8003484:	f85d eb04 	ldr.w	lr, [sp], #4
 8003488:	b003      	add	sp, #12
 800348a:	4770      	bx	lr
 800348c:	20000064 	.word	0x20000064
 8003490:	ffff0208 	.word	0xffff0208

08003494 <__sread>:
 8003494:	b510      	push	{r4, lr}
 8003496:	460c      	mov	r4, r1
 8003498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800349c:	f000 f86c 	bl	8003578 <_read_r>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	bfab      	itete	ge
 80034a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034a6:	89a3      	ldrhlt	r3, [r4, #12]
 80034a8:	181b      	addge	r3, r3, r0
 80034aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034ae:	bfac      	ite	ge
 80034b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80034b2:	81a3      	strhlt	r3, [r4, #12]
 80034b4:	bd10      	pop	{r4, pc}

080034b6 <__swrite>:
 80034b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034ba:	461f      	mov	r7, r3
 80034bc:	898b      	ldrh	r3, [r1, #12]
 80034be:	05db      	lsls	r3, r3, #23
 80034c0:	4605      	mov	r5, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	4616      	mov	r6, r2
 80034c6:	d505      	bpl.n	80034d4 <__swrite+0x1e>
 80034c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034cc:	2302      	movs	r3, #2
 80034ce:	2200      	movs	r2, #0
 80034d0:	f000 f840 	bl	8003554 <_lseek_r>
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034de:	81a3      	strh	r3, [r4, #12]
 80034e0:	4632      	mov	r2, r6
 80034e2:	463b      	mov	r3, r7
 80034e4:	4628      	mov	r0, r5
 80034e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ea:	f000 b857 	b.w	800359c <_write_r>

080034ee <__sseek>:
 80034ee:	b510      	push	{r4, lr}
 80034f0:	460c      	mov	r4, r1
 80034f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f6:	f000 f82d 	bl	8003554 <_lseek_r>
 80034fa:	1c43      	adds	r3, r0, #1
 80034fc:	89a3      	ldrh	r3, [r4, #12]
 80034fe:	bf15      	itete	ne
 8003500:	6560      	strne	r0, [r4, #84]	; 0x54
 8003502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800350a:	81a3      	strheq	r3, [r4, #12]
 800350c:	bf18      	it	ne
 800350e:	81a3      	strhne	r3, [r4, #12]
 8003510:	bd10      	pop	{r4, pc}

08003512 <__sclose>:
 8003512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003516:	f000 b80d 	b.w	8003534 <_close_r>

0800351a <memset>:
 800351a:	4402      	add	r2, r0
 800351c:	4603      	mov	r3, r0
 800351e:	4293      	cmp	r3, r2
 8003520:	d100      	bne.n	8003524 <memset+0xa>
 8003522:	4770      	bx	lr
 8003524:	f803 1b01 	strb.w	r1, [r3], #1
 8003528:	e7f9      	b.n	800351e <memset+0x4>
	...

0800352c <_localeconv_r>:
 800352c:	4800      	ldr	r0, [pc, #0]	; (8003530 <_localeconv_r+0x4>)
 800352e:	4770      	bx	lr
 8003530:	20000158 	.word	0x20000158

08003534 <_close_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4d06      	ldr	r5, [pc, #24]	; (8003550 <_close_r+0x1c>)
 8003538:	2300      	movs	r3, #0
 800353a:	4604      	mov	r4, r0
 800353c:	4608      	mov	r0, r1
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	f7fe f8db 	bl	80016fa <_close>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	d102      	bne.n	800354e <_close_r+0x1a>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	b103      	cbz	r3, 800354e <_close_r+0x1a>
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	20000354 	.word	0x20000354

08003554 <_lseek_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	4d07      	ldr	r5, [pc, #28]	; (8003574 <_lseek_r+0x20>)
 8003558:	4604      	mov	r4, r0
 800355a:	4608      	mov	r0, r1
 800355c:	4611      	mov	r1, r2
 800355e:	2200      	movs	r2, #0
 8003560:	602a      	str	r2, [r5, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	f7fe f8f0 	bl	8001748 <_lseek>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_lseek_r+0x1e>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	b103      	cbz	r3, 8003572 <_lseek_r+0x1e>
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000354 	.word	0x20000354

08003578 <_read_r>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	4d07      	ldr	r5, [pc, #28]	; (8003598 <_read_r+0x20>)
 800357c:	4604      	mov	r4, r0
 800357e:	4608      	mov	r0, r1
 8003580:	4611      	mov	r1, r2
 8003582:	2200      	movs	r2, #0
 8003584:	602a      	str	r2, [r5, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	f7fe f87e 	bl	8001688 <_read>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_read_r+0x1e>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	b103      	cbz	r3, 8003596 <_read_r+0x1e>
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	20000354 	.word	0x20000354

0800359c <_write_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4d07      	ldr	r5, [pc, #28]	; (80035bc <_write_r+0x20>)
 80035a0:	4604      	mov	r4, r0
 80035a2:	4608      	mov	r0, r1
 80035a4:	4611      	mov	r1, r2
 80035a6:	2200      	movs	r2, #0
 80035a8:	602a      	str	r2, [r5, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f7fe f889 	bl	80016c2 <_write>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_write_r+0x1e>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_write_r+0x1e>
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	20000354 	.word	0x20000354

080035c0 <__errno>:
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <__errno+0x8>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000064 	.word	0x20000064

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	4d0d      	ldr	r5, [pc, #52]	; (8003604 <__libc_init_array+0x38>)
 80035d0:	4c0d      	ldr	r4, [pc, #52]	; (8003608 <__libc_init_array+0x3c>)
 80035d2:	1b64      	subs	r4, r4, r5
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	2600      	movs	r6, #0
 80035d8:	42a6      	cmp	r6, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	4d0b      	ldr	r5, [pc, #44]	; (800360c <__libc_init_array+0x40>)
 80035de:	4c0c      	ldr	r4, [pc, #48]	; (8003610 <__libc_init_array+0x44>)
 80035e0:	f002 f896 	bl	8005710 <_init>
 80035e4:	1b64      	subs	r4, r4, r5
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	2600      	movs	r6, #0
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f4:	4798      	blx	r3
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fe:	4798      	blx	r3
 8003600:	3601      	adds	r6, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	08005abc 	.word	0x08005abc
 8003608:	08005abc 	.word	0x08005abc
 800360c:	08005abc 	.word	0x08005abc
 8003610:	08005ac0 	.word	0x08005ac0

08003614 <__retarget_lock_init_recursive>:
 8003614:	4770      	bx	lr

08003616 <__retarget_lock_acquire_recursive>:
 8003616:	4770      	bx	lr

08003618 <__retarget_lock_release_recursive>:
 8003618:	4770      	bx	lr

0800361a <quorem>:
 800361a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361e:	6903      	ldr	r3, [r0, #16]
 8003620:	690c      	ldr	r4, [r1, #16]
 8003622:	42a3      	cmp	r3, r4
 8003624:	4607      	mov	r7, r0
 8003626:	db7e      	blt.n	8003726 <quorem+0x10c>
 8003628:	3c01      	subs	r4, #1
 800362a:	f101 0814 	add.w	r8, r1, #20
 800362e:	f100 0514 	add.w	r5, r0, #20
 8003632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800363c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003640:	3301      	adds	r3, #1
 8003642:	429a      	cmp	r2, r3
 8003644:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003648:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800364c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003650:	d331      	bcc.n	80036b6 <quorem+0x9c>
 8003652:	f04f 0e00 	mov.w	lr, #0
 8003656:	4640      	mov	r0, r8
 8003658:	46ac      	mov	ip, r5
 800365a:	46f2      	mov	sl, lr
 800365c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003660:	b293      	uxth	r3, r2
 8003662:	fb06 e303 	mla	r3, r6, r3, lr
 8003666:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800366a:	0c1a      	lsrs	r2, r3, #16
 800366c:	b29b      	uxth	r3, r3
 800366e:	ebaa 0303 	sub.w	r3, sl, r3
 8003672:	f8dc a000 	ldr.w	sl, [ip]
 8003676:	fa13 f38a 	uxtah	r3, r3, sl
 800367a:	fb06 220e 	mla	r2, r6, lr, r2
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	9b00      	ldr	r3, [sp, #0]
 8003682:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003686:	b292      	uxth	r2, r2
 8003688:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800368c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003690:	f8bd 3000 	ldrh.w	r3, [sp]
 8003694:	4581      	cmp	r9, r0
 8003696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800369a:	f84c 3b04 	str.w	r3, [ip], #4
 800369e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80036a2:	d2db      	bcs.n	800365c <quorem+0x42>
 80036a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80036a8:	b92b      	cbnz	r3, 80036b6 <quorem+0x9c>
 80036aa:	9b01      	ldr	r3, [sp, #4]
 80036ac:	3b04      	subs	r3, #4
 80036ae:	429d      	cmp	r5, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	d32c      	bcc.n	800370e <quorem+0xf4>
 80036b4:	613c      	str	r4, [r7, #16]
 80036b6:	4638      	mov	r0, r7
 80036b8:	f001 f9a8 	bl	8004a0c <__mcmp>
 80036bc:	2800      	cmp	r0, #0
 80036be:	db22      	blt.n	8003706 <quorem+0xec>
 80036c0:	3601      	adds	r6, #1
 80036c2:	4629      	mov	r1, r5
 80036c4:	2000      	movs	r0, #0
 80036c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80036ca:	f8d1 c000 	ldr.w	ip, [r1]
 80036ce:	b293      	uxth	r3, r2
 80036d0:	1ac3      	subs	r3, r0, r3
 80036d2:	0c12      	lsrs	r2, r2, #16
 80036d4:	fa13 f38c 	uxtah	r3, r3, ip
 80036d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80036dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036e6:	45c1      	cmp	r9, r8
 80036e8:	f841 3b04 	str.w	r3, [r1], #4
 80036ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80036f0:	d2e9      	bcs.n	80036c6 <quorem+0xac>
 80036f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80036f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80036fa:	b922      	cbnz	r2, 8003706 <quorem+0xec>
 80036fc:	3b04      	subs	r3, #4
 80036fe:	429d      	cmp	r5, r3
 8003700:	461a      	mov	r2, r3
 8003702:	d30a      	bcc.n	800371a <quorem+0x100>
 8003704:	613c      	str	r4, [r7, #16]
 8003706:	4630      	mov	r0, r6
 8003708:	b003      	add	sp, #12
 800370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	3b04      	subs	r3, #4
 8003712:	2a00      	cmp	r2, #0
 8003714:	d1ce      	bne.n	80036b4 <quorem+0x9a>
 8003716:	3c01      	subs	r4, #1
 8003718:	e7c9      	b.n	80036ae <quorem+0x94>
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	3b04      	subs	r3, #4
 800371e:	2a00      	cmp	r2, #0
 8003720:	d1f0      	bne.n	8003704 <quorem+0xea>
 8003722:	3c01      	subs	r4, #1
 8003724:	e7eb      	b.n	80036fe <quorem+0xe4>
 8003726:	2000      	movs	r0, #0
 8003728:	e7ee      	b.n	8003708 <quorem+0xee>
 800372a:	0000      	movs	r0, r0
 800372c:	0000      	movs	r0, r0
	...

08003730 <_dtoa_r>:
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003734:	ed2d 8b04 	vpush	{d8-d9}
 8003738:	69c5      	ldr	r5, [r0, #28]
 800373a:	b093      	sub	sp, #76	; 0x4c
 800373c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003740:	ec57 6b10 	vmov	r6, r7, d0
 8003744:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003748:	9107      	str	r1, [sp, #28]
 800374a:	4604      	mov	r4, r0
 800374c:	920a      	str	r2, [sp, #40]	; 0x28
 800374e:	930d      	str	r3, [sp, #52]	; 0x34
 8003750:	b975      	cbnz	r5, 8003770 <_dtoa_r+0x40>
 8003752:	2010      	movs	r0, #16
 8003754:	f000 fe2a 	bl	80043ac <malloc>
 8003758:	4602      	mov	r2, r0
 800375a:	61e0      	str	r0, [r4, #28]
 800375c:	b920      	cbnz	r0, 8003768 <_dtoa_r+0x38>
 800375e:	4bae      	ldr	r3, [pc, #696]	; (8003a18 <_dtoa_r+0x2e8>)
 8003760:	21ef      	movs	r1, #239	; 0xef
 8003762:	48ae      	ldr	r0, [pc, #696]	; (8003a1c <_dtoa_r+0x2ec>)
 8003764:	f001 fc90 	bl	8005088 <__assert_func>
 8003768:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800376c:	6005      	str	r5, [r0, #0]
 800376e:	60c5      	str	r5, [r0, #12]
 8003770:	69e3      	ldr	r3, [r4, #28]
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	b151      	cbz	r1, 800378c <_dtoa_r+0x5c>
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	604a      	str	r2, [r1, #4]
 800377a:	2301      	movs	r3, #1
 800377c:	4093      	lsls	r3, r2
 800377e:	608b      	str	r3, [r1, #8]
 8003780:	4620      	mov	r0, r4
 8003782:	f000 ff07 	bl	8004594 <_Bfree>
 8003786:	69e3      	ldr	r3, [r4, #28]
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	1e3b      	subs	r3, r7, #0
 800378e:	bfbb      	ittet	lt
 8003790:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003794:	9303      	strlt	r3, [sp, #12]
 8003796:	2300      	movge	r3, #0
 8003798:	2201      	movlt	r2, #1
 800379a:	bfac      	ite	ge
 800379c:	f8c8 3000 	strge.w	r3, [r8]
 80037a0:	f8c8 2000 	strlt.w	r2, [r8]
 80037a4:	4b9e      	ldr	r3, [pc, #632]	; (8003a20 <_dtoa_r+0x2f0>)
 80037a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80037aa:	ea33 0308 	bics.w	r3, r3, r8
 80037ae:	d11b      	bne.n	80037e8 <_dtoa_r+0xb8>
 80037b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80037bc:	4333      	orrs	r3, r6
 80037be:	f000 8593 	beq.w	80042e8 <_dtoa_r+0xbb8>
 80037c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037c4:	b963      	cbnz	r3, 80037e0 <_dtoa_r+0xb0>
 80037c6:	4b97      	ldr	r3, [pc, #604]	; (8003a24 <_dtoa_r+0x2f4>)
 80037c8:	e027      	b.n	800381a <_dtoa_r+0xea>
 80037ca:	4b97      	ldr	r3, [pc, #604]	; (8003a28 <_dtoa_r+0x2f8>)
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	3308      	adds	r3, #8
 80037d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	9800      	ldr	r0, [sp, #0]
 80037d6:	b013      	add	sp, #76	; 0x4c
 80037d8:	ecbd 8b04 	vpop	{d8-d9}
 80037dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e0:	4b90      	ldr	r3, [pc, #576]	; (8003a24 <_dtoa_r+0x2f4>)
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	3303      	adds	r3, #3
 80037e6:	e7f3      	b.n	80037d0 <_dtoa_r+0xa0>
 80037e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80037ec:	2200      	movs	r2, #0
 80037ee:	ec51 0b17 	vmov	r0, r1, d7
 80037f2:	eeb0 8a47 	vmov.f32	s16, s14
 80037f6:	eef0 8a67 	vmov.f32	s17, s15
 80037fa:	2300      	movs	r3, #0
 80037fc:	f7fd f984 	bl	8000b08 <__aeabi_dcmpeq>
 8003800:	4681      	mov	r9, r0
 8003802:	b160      	cbz	r0, 800381e <_dtoa_r+0xee>
 8003804:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003806:	2301      	movs	r3, #1
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8568 	beq.w	80042e2 <_dtoa_r+0xbb2>
 8003812:	4b86      	ldr	r3, [pc, #536]	; (8003a2c <_dtoa_r+0x2fc>)
 8003814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	3b01      	subs	r3, #1
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	e7da      	b.n	80037d4 <_dtoa_r+0xa4>
 800381e:	aa10      	add	r2, sp, #64	; 0x40
 8003820:	a911      	add	r1, sp, #68	; 0x44
 8003822:	4620      	mov	r0, r4
 8003824:	eeb0 0a48 	vmov.f32	s0, s16
 8003828:	eef0 0a68 	vmov.f32	s1, s17
 800382c:	f001 f994 	bl	8004b58 <__d2b>
 8003830:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003834:	4682      	mov	sl, r0
 8003836:	2d00      	cmp	r5, #0
 8003838:	d07f      	beq.n	800393a <_dtoa_r+0x20a>
 800383a:	ee18 3a90 	vmov	r3, s17
 800383e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003842:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003846:	ec51 0b18 	vmov	r0, r1, d8
 800384a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800384e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003852:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003856:	4619      	mov	r1, r3
 8003858:	2200      	movs	r2, #0
 800385a:	4b75      	ldr	r3, [pc, #468]	; (8003a30 <_dtoa_r+0x300>)
 800385c:	f7fc fd34 	bl	80002c8 <__aeabi_dsub>
 8003860:	a367      	add	r3, pc, #412	; (adr r3, 8003a00 <_dtoa_r+0x2d0>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc fee7 	bl	8000638 <__aeabi_dmul>
 800386a:	a367      	add	r3, pc, #412	; (adr r3, 8003a08 <_dtoa_r+0x2d8>)
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f7fc fd2c 	bl	80002cc <__adddf3>
 8003874:	4606      	mov	r6, r0
 8003876:	4628      	mov	r0, r5
 8003878:	460f      	mov	r7, r1
 800387a:	f7fc fe73 	bl	8000564 <__aeabi_i2d>
 800387e:	a364      	add	r3, pc, #400	; (adr r3, 8003a10 <_dtoa_r+0x2e0>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fed8 	bl	8000638 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4630      	mov	r0, r6
 800388e:	4639      	mov	r1, r7
 8003890:	f7fc fd1c 	bl	80002cc <__adddf3>
 8003894:	4606      	mov	r6, r0
 8003896:	460f      	mov	r7, r1
 8003898:	f7fd f97e 	bl	8000b98 <__aeabi_d2iz>
 800389c:	2200      	movs	r2, #0
 800389e:	4683      	mov	fp, r0
 80038a0:	2300      	movs	r3, #0
 80038a2:	4630      	mov	r0, r6
 80038a4:	4639      	mov	r1, r7
 80038a6:	f7fd f939 	bl	8000b1c <__aeabi_dcmplt>
 80038aa:	b148      	cbz	r0, 80038c0 <_dtoa_r+0x190>
 80038ac:	4658      	mov	r0, fp
 80038ae:	f7fc fe59 	bl	8000564 <__aeabi_i2d>
 80038b2:	4632      	mov	r2, r6
 80038b4:	463b      	mov	r3, r7
 80038b6:	f7fd f927 	bl	8000b08 <__aeabi_dcmpeq>
 80038ba:	b908      	cbnz	r0, 80038c0 <_dtoa_r+0x190>
 80038bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80038c0:	f1bb 0f16 	cmp.w	fp, #22
 80038c4:	d857      	bhi.n	8003976 <_dtoa_r+0x246>
 80038c6:	4b5b      	ldr	r3, [pc, #364]	; (8003a34 <_dtoa_r+0x304>)
 80038c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	ec51 0b18 	vmov	r0, r1, d8
 80038d4:	f7fd f922 	bl	8000b1c <__aeabi_dcmplt>
 80038d8:	2800      	cmp	r0, #0
 80038da:	d04e      	beq.n	800397a <_dtoa_r+0x24a>
 80038dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80038e0:	2300      	movs	r3, #0
 80038e2:	930c      	str	r3, [sp, #48]	; 0x30
 80038e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80038e6:	1b5b      	subs	r3, r3, r5
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	bf45      	ittet	mi
 80038ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80038f0:	9305      	strmi	r3, [sp, #20]
 80038f2:	2300      	movpl	r3, #0
 80038f4:	2300      	movmi	r3, #0
 80038f6:	9206      	str	r2, [sp, #24]
 80038f8:	bf54      	ite	pl
 80038fa:	9305      	strpl	r3, [sp, #20]
 80038fc:	9306      	strmi	r3, [sp, #24]
 80038fe:	f1bb 0f00 	cmp.w	fp, #0
 8003902:	db3c      	blt.n	800397e <_dtoa_r+0x24e>
 8003904:	9b06      	ldr	r3, [sp, #24]
 8003906:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800390a:	445b      	add	r3, fp
 800390c:	9306      	str	r3, [sp, #24]
 800390e:	2300      	movs	r3, #0
 8003910:	9308      	str	r3, [sp, #32]
 8003912:	9b07      	ldr	r3, [sp, #28]
 8003914:	2b09      	cmp	r3, #9
 8003916:	d868      	bhi.n	80039ea <_dtoa_r+0x2ba>
 8003918:	2b05      	cmp	r3, #5
 800391a:	bfc4      	itt	gt
 800391c:	3b04      	subgt	r3, #4
 800391e:	9307      	strgt	r3, [sp, #28]
 8003920:	9b07      	ldr	r3, [sp, #28]
 8003922:	f1a3 0302 	sub.w	r3, r3, #2
 8003926:	bfcc      	ite	gt
 8003928:	2500      	movgt	r5, #0
 800392a:	2501      	movle	r5, #1
 800392c:	2b03      	cmp	r3, #3
 800392e:	f200 8085 	bhi.w	8003a3c <_dtoa_r+0x30c>
 8003932:	e8df f003 	tbb	[pc, r3]
 8003936:	3b2e      	.short	0x3b2e
 8003938:	5839      	.short	0x5839
 800393a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800393e:	441d      	add	r5, r3
 8003940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003944:	2b20      	cmp	r3, #32
 8003946:	bfc1      	itttt	gt
 8003948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800394c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003950:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003954:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003958:	bfd6      	itet	le
 800395a:	f1c3 0320 	rsble	r3, r3, #32
 800395e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003962:	fa06 f003 	lslle.w	r0, r6, r3
 8003966:	f7fc fded 	bl	8000544 <__aeabi_ui2d>
 800396a:	2201      	movs	r2, #1
 800396c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003970:	3d01      	subs	r5, #1
 8003972:	920e      	str	r2, [sp, #56]	; 0x38
 8003974:	e76f      	b.n	8003856 <_dtoa_r+0x126>
 8003976:	2301      	movs	r3, #1
 8003978:	e7b3      	b.n	80038e2 <_dtoa_r+0x1b2>
 800397a:	900c      	str	r0, [sp, #48]	; 0x30
 800397c:	e7b2      	b.n	80038e4 <_dtoa_r+0x1b4>
 800397e:	9b05      	ldr	r3, [sp, #20]
 8003980:	eba3 030b 	sub.w	r3, r3, fp
 8003984:	9305      	str	r3, [sp, #20]
 8003986:	f1cb 0300 	rsb	r3, fp, #0
 800398a:	9308      	str	r3, [sp, #32]
 800398c:	2300      	movs	r3, #0
 800398e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003990:	e7bf      	b.n	8003912 <_dtoa_r+0x1e2>
 8003992:	2300      	movs	r3, #0
 8003994:	9309      	str	r3, [sp, #36]	; 0x24
 8003996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	dc52      	bgt.n	8003a42 <_dtoa_r+0x312>
 800399c:	2301      	movs	r3, #1
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	9304      	str	r3, [sp, #16]
 80039a2:	461a      	mov	r2, r3
 80039a4:	920a      	str	r2, [sp, #40]	; 0x28
 80039a6:	e00b      	b.n	80039c0 <_dtoa_r+0x290>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e7f3      	b.n	8003994 <_dtoa_r+0x264>
 80039ac:	2300      	movs	r3, #0
 80039ae:	9309      	str	r3, [sp, #36]	; 0x24
 80039b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039b2:	445b      	add	r3, fp
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	3301      	adds	r3, #1
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	9304      	str	r3, [sp, #16]
 80039bc:	bfb8      	it	lt
 80039be:	2301      	movlt	r3, #1
 80039c0:	69e0      	ldr	r0, [r4, #28]
 80039c2:	2100      	movs	r1, #0
 80039c4:	2204      	movs	r2, #4
 80039c6:	f102 0614 	add.w	r6, r2, #20
 80039ca:	429e      	cmp	r6, r3
 80039cc:	d93d      	bls.n	8003a4a <_dtoa_r+0x31a>
 80039ce:	6041      	str	r1, [r0, #4]
 80039d0:	4620      	mov	r0, r4
 80039d2:	f000 fd9f 	bl	8004514 <_Balloc>
 80039d6:	9000      	str	r0, [sp, #0]
 80039d8:	2800      	cmp	r0, #0
 80039da:	d139      	bne.n	8003a50 <_dtoa_r+0x320>
 80039dc:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <_dtoa_r+0x308>)
 80039de:	4602      	mov	r2, r0
 80039e0:	f240 11af 	movw	r1, #431	; 0x1af
 80039e4:	e6bd      	b.n	8003762 <_dtoa_r+0x32>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e7e1      	b.n	80039ae <_dtoa_r+0x27e>
 80039ea:	2501      	movs	r5, #1
 80039ec:	2300      	movs	r3, #0
 80039ee:	9307      	str	r3, [sp, #28]
 80039f0:	9509      	str	r5, [sp, #36]	; 0x24
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	9304      	str	r3, [sp, #16]
 80039fa:	2200      	movs	r2, #0
 80039fc:	2312      	movs	r3, #18
 80039fe:	e7d1      	b.n	80039a4 <_dtoa_r+0x274>
 8003a00:	636f4361 	.word	0x636f4361
 8003a04:	3fd287a7 	.word	0x3fd287a7
 8003a08:	8b60c8b3 	.word	0x8b60c8b3
 8003a0c:	3fc68a28 	.word	0x3fc68a28
 8003a10:	509f79fb 	.word	0x509f79fb
 8003a14:	3fd34413 	.word	0x3fd34413
 8003a18:	08005781 	.word	0x08005781
 8003a1c:	08005798 	.word	0x08005798
 8003a20:	7ff00000 	.word	0x7ff00000
 8003a24:	0800577d 	.word	0x0800577d
 8003a28:	08005774 	.word	0x08005774
 8003a2c:	08005751 	.word	0x08005751
 8003a30:	3ff80000 	.word	0x3ff80000
 8003a34:	08005888 	.word	0x08005888
 8003a38:	080057f0 	.word	0x080057f0
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a40:	e7d7      	b.n	80039f2 <_dtoa_r+0x2c2>
 8003a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	9304      	str	r3, [sp, #16]
 8003a48:	e7ba      	b.n	80039c0 <_dtoa_r+0x290>
 8003a4a:	3101      	adds	r1, #1
 8003a4c:	0052      	lsls	r2, r2, #1
 8003a4e:	e7ba      	b.n	80039c6 <_dtoa_r+0x296>
 8003a50:	69e3      	ldr	r3, [r4, #28]
 8003a52:	9a00      	ldr	r2, [sp, #0]
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	9b04      	ldr	r3, [sp, #16]
 8003a58:	2b0e      	cmp	r3, #14
 8003a5a:	f200 80a8 	bhi.w	8003bae <_dtoa_r+0x47e>
 8003a5e:	2d00      	cmp	r5, #0
 8003a60:	f000 80a5 	beq.w	8003bae <_dtoa_r+0x47e>
 8003a64:	f1bb 0f00 	cmp.w	fp, #0
 8003a68:	dd38      	ble.n	8003adc <_dtoa_r+0x3ac>
 8003a6a:	4bc0      	ldr	r3, [pc, #768]	; (8003d6c <_dtoa_r+0x63c>)
 8003a6c:	f00b 020f 	and.w	r2, fp, #15
 8003a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003a78:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003a7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003a80:	d019      	beq.n	8003ab6 <_dtoa_r+0x386>
 8003a82:	4bbb      	ldr	r3, [pc, #748]	; (8003d70 <_dtoa_r+0x640>)
 8003a84:	ec51 0b18 	vmov	r0, r1, d8
 8003a88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a8c:	f7fc fefe 	bl	800088c <__aeabi_ddiv>
 8003a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a94:	f008 080f 	and.w	r8, r8, #15
 8003a98:	2503      	movs	r5, #3
 8003a9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003d70 <_dtoa_r+0x640>
 8003a9e:	f1b8 0f00 	cmp.w	r8, #0
 8003aa2:	d10a      	bne.n	8003aba <_dtoa_r+0x38a>
 8003aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aa8:	4632      	mov	r2, r6
 8003aaa:	463b      	mov	r3, r7
 8003aac:	f7fc feee 	bl	800088c <__aeabi_ddiv>
 8003ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ab4:	e02b      	b.n	8003b0e <_dtoa_r+0x3de>
 8003ab6:	2502      	movs	r5, #2
 8003ab8:	e7ef      	b.n	8003a9a <_dtoa_r+0x36a>
 8003aba:	f018 0f01 	tst.w	r8, #1
 8003abe:	d008      	beq.n	8003ad2 <_dtoa_r+0x3a2>
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003ac8:	f7fc fdb6 	bl	8000638 <__aeabi_dmul>
 8003acc:	3501      	adds	r5, #1
 8003ace:	4606      	mov	r6, r0
 8003ad0:	460f      	mov	r7, r1
 8003ad2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003ad6:	f109 0908 	add.w	r9, r9, #8
 8003ada:	e7e0      	b.n	8003a9e <_dtoa_r+0x36e>
 8003adc:	f000 809f 	beq.w	8003c1e <_dtoa_r+0x4ee>
 8003ae0:	f1cb 0600 	rsb	r6, fp, #0
 8003ae4:	4ba1      	ldr	r3, [pc, #644]	; (8003d6c <_dtoa_r+0x63c>)
 8003ae6:	4fa2      	ldr	r7, [pc, #648]	; (8003d70 <_dtoa_r+0x640>)
 8003ae8:	f006 020f 	and.w	r2, r6, #15
 8003aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	ec51 0b18 	vmov	r0, r1, d8
 8003af8:	f7fc fd9e 	bl	8000638 <__aeabi_dmul>
 8003afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b00:	1136      	asrs	r6, r6, #4
 8003b02:	2300      	movs	r3, #0
 8003b04:	2502      	movs	r5, #2
 8003b06:	2e00      	cmp	r6, #0
 8003b08:	d17e      	bne.n	8003c08 <_dtoa_r+0x4d8>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1d0      	bne.n	8003ab0 <_dtoa_r+0x380>
 8003b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8084 	beq.w	8003c22 <_dtoa_r+0x4f2>
 8003b1a:	4b96      	ldr	r3, [pc, #600]	; (8003d74 <_dtoa_r+0x644>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4649      	mov	r1, r9
 8003b22:	f7fc fffb 	bl	8000b1c <__aeabi_dcmplt>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d07b      	beq.n	8003c22 <_dtoa_r+0x4f2>
 8003b2a:	9b04      	ldr	r3, [sp, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d078      	beq.n	8003c22 <_dtoa_r+0x4f2>
 8003b30:	9b01      	ldr	r3, [sp, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	dd39      	ble.n	8003baa <_dtoa_r+0x47a>
 8003b36:	4b90      	ldr	r3, [pc, #576]	; (8003d78 <_dtoa_r+0x648>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	f7fc fd7b 	bl	8000638 <__aeabi_dmul>
 8003b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b46:	9e01      	ldr	r6, [sp, #4]
 8003b48:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003b4c:	3501      	adds	r5, #1
 8003b4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003b52:	4628      	mov	r0, r5
 8003b54:	f7fc fd06 	bl	8000564 <__aeabi_i2d>
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	f7fc fd6c 	bl	8000638 <__aeabi_dmul>
 8003b60:	4b86      	ldr	r3, [pc, #536]	; (8003d7c <_dtoa_r+0x64c>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	f7fc fbb2 	bl	80002cc <__adddf3>
 8003b68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b70:	9303      	str	r3, [sp, #12]
 8003b72:	2e00      	cmp	r6, #0
 8003b74:	d158      	bne.n	8003c28 <_dtoa_r+0x4f8>
 8003b76:	4b82      	ldr	r3, [pc, #520]	; (8003d80 <_dtoa_r+0x650>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	f7fc fba3 	bl	80002c8 <__aeabi_dsub>
 8003b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b86:	4680      	mov	r8, r0
 8003b88:	4689      	mov	r9, r1
 8003b8a:	f7fc ffe5 	bl	8000b58 <__aeabi_dcmpgt>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	f040 8296 	bne.w	80040c0 <_dtoa_r+0x990>
 8003b94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003b98:	4640      	mov	r0, r8
 8003b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	f7fc ffbc 	bl	8000b1c <__aeabi_dcmplt>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	f040 8289 	bne.w	80040bc <_dtoa_r+0x98c>
 8003baa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f2c0 814e 	blt.w	8003e52 <_dtoa_r+0x722>
 8003bb6:	f1bb 0f0e 	cmp.w	fp, #14
 8003bba:	f300 814a 	bgt.w	8003e52 <_dtoa_r+0x722>
 8003bbe:	4b6b      	ldr	r3, [pc, #428]	; (8003d6c <_dtoa_r+0x63c>)
 8003bc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003bc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f280 80dc 	bge.w	8003d88 <_dtoa_r+0x658>
 8003bd0:	9b04      	ldr	r3, [sp, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f300 80d8 	bgt.w	8003d88 <_dtoa_r+0x658>
 8003bd8:	f040 826f 	bne.w	80040ba <_dtoa_r+0x98a>
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <_dtoa_r+0x650>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	4640      	mov	r0, r8
 8003be2:	4649      	mov	r1, r9
 8003be4:	f7fc fd28 	bl	8000638 <__aeabi_dmul>
 8003be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bec:	f7fc ffaa 	bl	8000b44 <__aeabi_dcmpge>
 8003bf0:	9e04      	ldr	r6, [sp, #16]
 8003bf2:	4637      	mov	r7, r6
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	f040 8245 	bne.w	8004084 <_dtoa_r+0x954>
 8003bfa:	9d00      	ldr	r5, [sp, #0]
 8003bfc:	2331      	movs	r3, #49	; 0x31
 8003bfe:	f805 3b01 	strb.w	r3, [r5], #1
 8003c02:	f10b 0b01 	add.w	fp, fp, #1
 8003c06:	e241      	b.n	800408c <_dtoa_r+0x95c>
 8003c08:	07f2      	lsls	r2, r6, #31
 8003c0a:	d505      	bpl.n	8003c18 <_dtoa_r+0x4e8>
 8003c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c10:	f7fc fd12 	bl	8000638 <__aeabi_dmul>
 8003c14:	3501      	adds	r5, #1
 8003c16:	2301      	movs	r3, #1
 8003c18:	1076      	asrs	r6, r6, #1
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	e773      	b.n	8003b06 <_dtoa_r+0x3d6>
 8003c1e:	2502      	movs	r5, #2
 8003c20:	e775      	b.n	8003b0e <_dtoa_r+0x3de>
 8003c22:	9e04      	ldr	r6, [sp, #16]
 8003c24:	465f      	mov	r7, fp
 8003c26:	e792      	b.n	8003b4e <_dtoa_r+0x41e>
 8003c28:	9900      	ldr	r1, [sp, #0]
 8003c2a:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <_dtoa_r+0x63c>)
 8003c2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003c30:	4431      	add	r1, r6
 8003c32:	9102      	str	r1, [sp, #8]
 8003c34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c36:	eeb0 9a47 	vmov.f32	s18, s14
 8003c3a:	eef0 9a67 	vmov.f32	s19, s15
 8003c3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003c42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003c46:	2900      	cmp	r1, #0
 8003c48:	d044      	beq.n	8003cd4 <_dtoa_r+0x5a4>
 8003c4a:	494e      	ldr	r1, [pc, #312]	; (8003d84 <_dtoa_r+0x654>)
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7fc fe1d 	bl	800088c <__aeabi_ddiv>
 8003c52:	ec53 2b19 	vmov	r2, r3, d9
 8003c56:	f7fc fb37 	bl	80002c8 <__aeabi_dsub>
 8003c5a:	9d00      	ldr	r5, [sp, #0]
 8003c5c:	ec41 0b19 	vmov	d9, r0, r1
 8003c60:	4649      	mov	r1, r9
 8003c62:	4640      	mov	r0, r8
 8003c64:	f7fc ff98 	bl	8000b98 <__aeabi_d2iz>
 8003c68:	4606      	mov	r6, r0
 8003c6a:	f7fc fc7b 	bl	8000564 <__aeabi_i2d>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4640      	mov	r0, r8
 8003c74:	4649      	mov	r1, r9
 8003c76:	f7fc fb27 	bl	80002c8 <__aeabi_dsub>
 8003c7a:	3630      	adds	r6, #48	; 0x30
 8003c7c:	f805 6b01 	strb.w	r6, [r5], #1
 8003c80:	ec53 2b19 	vmov	r2, r3, d9
 8003c84:	4680      	mov	r8, r0
 8003c86:	4689      	mov	r9, r1
 8003c88:	f7fc ff48 	bl	8000b1c <__aeabi_dcmplt>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d164      	bne.n	8003d5a <_dtoa_r+0x62a>
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	4937      	ldr	r1, [pc, #220]	; (8003d74 <_dtoa_r+0x644>)
 8003c96:	2000      	movs	r0, #0
 8003c98:	f7fc fb16 	bl	80002c8 <__aeabi_dsub>
 8003c9c:	ec53 2b19 	vmov	r2, r3, d9
 8003ca0:	f7fc ff3c 	bl	8000b1c <__aeabi_dcmplt>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	f040 80b6 	bne.w	8003e16 <_dtoa_r+0x6e6>
 8003caa:	9b02      	ldr	r3, [sp, #8]
 8003cac:	429d      	cmp	r5, r3
 8003cae:	f43f af7c 	beq.w	8003baa <_dtoa_r+0x47a>
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <_dtoa_r+0x648>)
 8003cb4:	ec51 0b19 	vmov	r0, r1, d9
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f7fc fcbd 	bl	8000638 <__aeabi_dmul>
 8003cbe:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <_dtoa_r+0x648>)
 8003cc0:	ec41 0b19 	vmov	d9, r0, r1
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	4649      	mov	r1, r9
 8003cca:	f7fc fcb5 	bl	8000638 <__aeabi_dmul>
 8003cce:	4680      	mov	r8, r0
 8003cd0:	4689      	mov	r9, r1
 8003cd2:	e7c5      	b.n	8003c60 <_dtoa_r+0x530>
 8003cd4:	ec51 0b17 	vmov	r0, r1, d7
 8003cd8:	f7fc fcae 	bl	8000638 <__aeabi_dmul>
 8003cdc:	9b02      	ldr	r3, [sp, #8]
 8003cde:	9d00      	ldr	r5, [sp, #0]
 8003ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ce2:	ec41 0b19 	vmov	d9, r0, r1
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	4640      	mov	r0, r8
 8003cea:	f7fc ff55 	bl	8000b98 <__aeabi_d2iz>
 8003cee:	4606      	mov	r6, r0
 8003cf0:	f7fc fc38 	bl	8000564 <__aeabi_i2d>
 8003cf4:	3630      	adds	r6, #48	; 0x30
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	f7fc fae3 	bl	80002c8 <__aeabi_dsub>
 8003d02:	f805 6b01 	strb.w	r6, [r5], #1
 8003d06:	9b02      	ldr	r3, [sp, #8]
 8003d08:	429d      	cmp	r5, r3
 8003d0a:	4680      	mov	r8, r0
 8003d0c:	4689      	mov	r9, r1
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	d124      	bne.n	8003d5e <_dtoa_r+0x62e>
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <_dtoa_r+0x654>)
 8003d16:	ec51 0b19 	vmov	r0, r1, d9
 8003d1a:	f7fc fad7 	bl	80002cc <__adddf3>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4640      	mov	r0, r8
 8003d24:	4649      	mov	r1, r9
 8003d26:	f7fc ff17 	bl	8000b58 <__aeabi_dcmpgt>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d173      	bne.n	8003e16 <_dtoa_r+0x6e6>
 8003d2e:	ec53 2b19 	vmov	r2, r3, d9
 8003d32:	4914      	ldr	r1, [pc, #80]	; (8003d84 <_dtoa_r+0x654>)
 8003d34:	2000      	movs	r0, #0
 8003d36:	f7fc fac7 	bl	80002c8 <__aeabi_dsub>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4640      	mov	r0, r8
 8003d40:	4649      	mov	r1, r9
 8003d42:	f7fc feeb 	bl	8000b1c <__aeabi_dcmplt>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	f43f af2f 	beq.w	8003baa <_dtoa_r+0x47a>
 8003d4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003d4e:	1e6b      	subs	r3, r5, #1
 8003d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d56:	2b30      	cmp	r3, #48	; 0x30
 8003d58:	d0f8      	beq.n	8003d4c <_dtoa_r+0x61c>
 8003d5a:	46bb      	mov	fp, r7
 8003d5c:	e04a      	b.n	8003df4 <_dtoa_r+0x6c4>
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <_dtoa_r+0x648>)
 8003d60:	f7fc fc6a 	bl	8000638 <__aeabi_dmul>
 8003d64:	4680      	mov	r8, r0
 8003d66:	4689      	mov	r9, r1
 8003d68:	e7bd      	b.n	8003ce6 <_dtoa_r+0x5b6>
 8003d6a:	bf00      	nop
 8003d6c:	08005888 	.word	0x08005888
 8003d70:	08005860 	.word	0x08005860
 8003d74:	3ff00000 	.word	0x3ff00000
 8003d78:	40240000 	.word	0x40240000
 8003d7c:	401c0000 	.word	0x401c0000
 8003d80:	40140000 	.word	0x40140000
 8003d84:	3fe00000 	.word	0x3fe00000
 8003d88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d8c:	9d00      	ldr	r5, [sp, #0]
 8003d8e:	4642      	mov	r2, r8
 8003d90:	464b      	mov	r3, r9
 8003d92:	4630      	mov	r0, r6
 8003d94:	4639      	mov	r1, r7
 8003d96:	f7fc fd79 	bl	800088c <__aeabi_ddiv>
 8003d9a:	f7fc fefd 	bl	8000b98 <__aeabi_d2iz>
 8003d9e:	9001      	str	r0, [sp, #4]
 8003da0:	f7fc fbe0 	bl	8000564 <__aeabi_i2d>
 8003da4:	4642      	mov	r2, r8
 8003da6:	464b      	mov	r3, r9
 8003da8:	f7fc fc46 	bl	8000638 <__aeabi_dmul>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4630      	mov	r0, r6
 8003db2:	4639      	mov	r1, r7
 8003db4:	f7fc fa88 	bl	80002c8 <__aeabi_dsub>
 8003db8:	9e01      	ldr	r6, [sp, #4]
 8003dba:	9f04      	ldr	r7, [sp, #16]
 8003dbc:	3630      	adds	r6, #48	; 0x30
 8003dbe:	f805 6b01 	strb.w	r6, [r5], #1
 8003dc2:	9e00      	ldr	r6, [sp, #0]
 8003dc4:	1bae      	subs	r6, r5, r6
 8003dc6:	42b7      	cmp	r7, r6
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	d134      	bne.n	8003e38 <_dtoa_r+0x708>
 8003dce:	f7fc fa7d 	bl	80002cc <__adddf3>
 8003dd2:	4642      	mov	r2, r8
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	460f      	mov	r7, r1
 8003dda:	f7fc febd 	bl	8000b58 <__aeabi_dcmpgt>
 8003dde:	b9c8      	cbnz	r0, 8003e14 <_dtoa_r+0x6e4>
 8003de0:	4642      	mov	r2, r8
 8003de2:	464b      	mov	r3, r9
 8003de4:	4630      	mov	r0, r6
 8003de6:	4639      	mov	r1, r7
 8003de8:	f7fc fe8e 	bl	8000b08 <__aeabi_dcmpeq>
 8003dec:	b110      	cbz	r0, 8003df4 <_dtoa_r+0x6c4>
 8003dee:	9b01      	ldr	r3, [sp, #4]
 8003df0:	07db      	lsls	r3, r3, #31
 8003df2:	d40f      	bmi.n	8003e14 <_dtoa_r+0x6e4>
 8003df4:	4651      	mov	r1, sl
 8003df6:	4620      	mov	r0, r4
 8003df8:	f000 fbcc 	bl	8004594 <_Bfree>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e00:	702b      	strb	r3, [r5, #0]
 8003e02:	f10b 0301 	add.w	r3, fp, #1
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f43f ace2 	beq.w	80037d4 <_dtoa_r+0xa4>
 8003e10:	601d      	str	r5, [r3, #0]
 8003e12:	e4df      	b.n	80037d4 <_dtoa_r+0xa4>
 8003e14:	465f      	mov	r7, fp
 8003e16:	462b      	mov	r3, r5
 8003e18:	461d      	mov	r5, r3
 8003e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003e1e:	2a39      	cmp	r2, #57	; 0x39
 8003e20:	d106      	bne.n	8003e30 <_dtoa_r+0x700>
 8003e22:	9a00      	ldr	r2, [sp, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d1f7      	bne.n	8003e18 <_dtoa_r+0x6e8>
 8003e28:	9900      	ldr	r1, [sp, #0]
 8003e2a:	2230      	movs	r2, #48	; 0x30
 8003e2c:	3701      	adds	r7, #1
 8003e2e:	700a      	strb	r2, [r1, #0]
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	3201      	adds	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e790      	b.n	8003d5a <_dtoa_r+0x62a>
 8003e38:	4ba3      	ldr	r3, [pc, #652]	; (80040c8 <_dtoa_r+0x998>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f7fc fbfc 	bl	8000638 <__aeabi_dmul>
 8003e40:	2200      	movs	r2, #0
 8003e42:	2300      	movs	r3, #0
 8003e44:	4606      	mov	r6, r0
 8003e46:	460f      	mov	r7, r1
 8003e48:	f7fc fe5e 	bl	8000b08 <__aeabi_dcmpeq>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d09e      	beq.n	8003d8e <_dtoa_r+0x65e>
 8003e50:	e7d0      	b.n	8003df4 <_dtoa_r+0x6c4>
 8003e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e54:	2a00      	cmp	r2, #0
 8003e56:	f000 80ca 	beq.w	8003fee <_dtoa_r+0x8be>
 8003e5a:	9a07      	ldr	r2, [sp, #28]
 8003e5c:	2a01      	cmp	r2, #1
 8003e5e:	f300 80ad 	bgt.w	8003fbc <_dtoa_r+0x88c>
 8003e62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e64:	2a00      	cmp	r2, #0
 8003e66:	f000 80a5 	beq.w	8003fb4 <_dtoa_r+0x884>
 8003e6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003e6e:	9e08      	ldr	r6, [sp, #32]
 8003e70:	9d05      	ldr	r5, [sp, #20]
 8003e72:	9a05      	ldr	r2, [sp, #20]
 8003e74:	441a      	add	r2, r3
 8003e76:	9205      	str	r2, [sp, #20]
 8003e78:	9a06      	ldr	r2, [sp, #24]
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	441a      	add	r2, r3
 8003e7e:	4620      	mov	r0, r4
 8003e80:	9206      	str	r2, [sp, #24]
 8003e82:	f000 fc3d 	bl	8004700 <__i2b>
 8003e86:	4607      	mov	r7, r0
 8003e88:	b165      	cbz	r5, 8003ea4 <_dtoa_r+0x774>
 8003e8a:	9b06      	ldr	r3, [sp, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dd09      	ble.n	8003ea4 <_dtoa_r+0x774>
 8003e90:	42ab      	cmp	r3, r5
 8003e92:	9a05      	ldr	r2, [sp, #20]
 8003e94:	bfa8      	it	ge
 8003e96:	462b      	movge	r3, r5
 8003e98:	1ad2      	subs	r2, r2, r3
 8003e9a:	9205      	str	r2, [sp, #20]
 8003e9c:	9a06      	ldr	r2, [sp, #24]
 8003e9e:	1aed      	subs	r5, r5, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	9306      	str	r3, [sp, #24]
 8003ea4:	9b08      	ldr	r3, [sp, #32]
 8003ea6:	b1f3      	cbz	r3, 8003ee6 <_dtoa_r+0x7b6>
 8003ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80a3 	beq.w	8003ff6 <_dtoa_r+0x8c6>
 8003eb0:	2e00      	cmp	r6, #0
 8003eb2:	dd10      	ble.n	8003ed6 <_dtoa_r+0x7a6>
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	4632      	mov	r2, r6
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f000 fce1 	bl	8004880 <__pow5mult>
 8003ebe:	4652      	mov	r2, sl
 8003ec0:	4601      	mov	r1, r0
 8003ec2:	4607      	mov	r7, r0
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f000 fc31 	bl	800472c <__multiply>
 8003eca:	4651      	mov	r1, sl
 8003ecc:	4680      	mov	r8, r0
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f000 fb60 	bl	8004594 <_Bfree>
 8003ed4:	46c2      	mov	sl, r8
 8003ed6:	9b08      	ldr	r3, [sp, #32]
 8003ed8:	1b9a      	subs	r2, r3, r6
 8003eda:	d004      	beq.n	8003ee6 <_dtoa_r+0x7b6>
 8003edc:	4651      	mov	r1, sl
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f000 fcce 	bl	8004880 <__pow5mult>
 8003ee4:	4682      	mov	sl, r0
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f000 fc09 	bl	8004700 <__i2b>
 8003eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	f340 8081 	ble.w	8003ffa <_dtoa_r+0x8ca>
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4601      	mov	r1, r0
 8003efc:	4620      	mov	r0, r4
 8003efe:	f000 fcbf 	bl	8004880 <__pow5mult>
 8003f02:	9b07      	ldr	r3, [sp, #28]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	4606      	mov	r6, r0
 8003f08:	dd7a      	ble.n	8004000 <_dtoa_r+0x8d0>
 8003f0a:	f04f 0800 	mov.w	r8, #0
 8003f0e:	6933      	ldr	r3, [r6, #16]
 8003f10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003f14:	6918      	ldr	r0, [r3, #16]
 8003f16:	f000 fba5 	bl	8004664 <__hi0bits>
 8003f1a:	f1c0 0020 	rsb	r0, r0, #32
 8003f1e:	9b06      	ldr	r3, [sp, #24]
 8003f20:	4418      	add	r0, r3
 8003f22:	f010 001f 	ands.w	r0, r0, #31
 8003f26:	f000 8094 	beq.w	8004052 <_dtoa_r+0x922>
 8003f2a:	f1c0 0320 	rsb	r3, r0, #32
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	f340 8085 	ble.w	800403e <_dtoa_r+0x90e>
 8003f34:	9b05      	ldr	r3, [sp, #20]
 8003f36:	f1c0 001c 	rsb	r0, r0, #28
 8003f3a:	4403      	add	r3, r0
 8003f3c:	9305      	str	r3, [sp, #20]
 8003f3e:	9b06      	ldr	r3, [sp, #24]
 8003f40:	4403      	add	r3, r0
 8003f42:	4405      	add	r5, r0
 8003f44:	9306      	str	r3, [sp, #24]
 8003f46:	9b05      	ldr	r3, [sp, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	dd05      	ble.n	8003f58 <_dtoa_r+0x828>
 8003f4c:	4651      	mov	r1, sl
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 fcef 	bl	8004934 <__lshift>
 8003f56:	4682      	mov	sl, r0
 8003f58:	9b06      	ldr	r3, [sp, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	dd05      	ble.n	8003f6a <_dtoa_r+0x83a>
 8003f5e:	4631      	mov	r1, r6
 8003f60:	461a      	mov	r2, r3
 8003f62:	4620      	mov	r0, r4
 8003f64:	f000 fce6 	bl	8004934 <__lshift>
 8003f68:	4606      	mov	r6, r0
 8003f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d072      	beq.n	8004056 <_dtoa_r+0x926>
 8003f70:	4631      	mov	r1, r6
 8003f72:	4650      	mov	r0, sl
 8003f74:	f000 fd4a 	bl	8004a0c <__mcmp>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	da6c      	bge.n	8004056 <_dtoa_r+0x926>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4651      	mov	r1, sl
 8003f80:	220a      	movs	r2, #10
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 fb28 	bl	80045d8 <__multadd>
 8003f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f8e:	4682      	mov	sl, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 81b0 	beq.w	80042f6 <_dtoa_r+0xbc6>
 8003f96:	2300      	movs	r3, #0
 8003f98:	4639      	mov	r1, r7
 8003f9a:	220a      	movs	r2, #10
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f000 fb1b 	bl	80045d8 <__multadd>
 8003fa2:	9b01      	ldr	r3, [sp, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	4607      	mov	r7, r0
 8003fa8:	f300 8096 	bgt.w	80040d8 <_dtoa_r+0x9a8>
 8003fac:	9b07      	ldr	r3, [sp, #28]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	dc59      	bgt.n	8004066 <_dtoa_r+0x936>
 8003fb2:	e091      	b.n	80040d8 <_dtoa_r+0x9a8>
 8003fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003fb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003fba:	e758      	b.n	8003e6e <_dtoa_r+0x73e>
 8003fbc:	9b04      	ldr	r3, [sp, #16]
 8003fbe:	1e5e      	subs	r6, r3, #1
 8003fc0:	9b08      	ldr	r3, [sp, #32]
 8003fc2:	42b3      	cmp	r3, r6
 8003fc4:	bfbf      	itttt	lt
 8003fc6:	9b08      	ldrlt	r3, [sp, #32]
 8003fc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8003fca:	9608      	strlt	r6, [sp, #32]
 8003fcc:	1af3      	sublt	r3, r6, r3
 8003fce:	bfb4      	ite	lt
 8003fd0:	18d2      	addlt	r2, r2, r3
 8003fd2:	1b9e      	subge	r6, r3, r6
 8003fd4:	9b04      	ldr	r3, [sp, #16]
 8003fd6:	bfbc      	itt	lt
 8003fd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8003fda:	2600      	movlt	r6, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bfb7      	itett	lt
 8003fe0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8003fe4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003fe8:	1a9d      	sublt	r5, r3, r2
 8003fea:	2300      	movlt	r3, #0
 8003fec:	e741      	b.n	8003e72 <_dtoa_r+0x742>
 8003fee:	9e08      	ldr	r6, [sp, #32]
 8003ff0:	9d05      	ldr	r5, [sp, #20]
 8003ff2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003ff4:	e748      	b.n	8003e88 <_dtoa_r+0x758>
 8003ff6:	9a08      	ldr	r2, [sp, #32]
 8003ff8:	e770      	b.n	8003edc <_dtoa_r+0x7ac>
 8003ffa:	9b07      	ldr	r3, [sp, #28]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	dc19      	bgt.n	8004034 <_dtoa_r+0x904>
 8004000:	9b02      	ldr	r3, [sp, #8]
 8004002:	b9bb      	cbnz	r3, 8004034 <_dtoa_r+0x904>
 8004004:	9b03      	ldr	r3, [sp, #12]
 8004006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800400a:	b99b      	cbnz	r3, 8004034 <_dtoa_r+0x904>
 800400c:	9b03      	ldr	r3, [sp, #12]
 800400e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004012:	0d1b      	lsrs	r3, r3, #20
 8004014:	051b      	lsls	r3, r3, #20
 8004016:	b183      	cbz	r3, 800403a <_dtoa_r+0x90a>
 8004018:	9b05      	ldr	r3, [sp, #20]
 800401a:	3301      	adds	r3, #1
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	9b06      	ldr	r3, [sp, #24]
 8004020:	3301      	adds	r3, #1
 8004022:	9306      	str	r3, [sp, #24]
 8004024:	f04f 0801 	mov.w	r8, #1
 8004028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800402a:	2b00      	cmp	r3, #0
 800402c:	f47f af6f 	bne.w	8003f0e <_dtoa_r+0x7de>
 8004030:	2001      	movs	r0, #1
 8004032:	e774      	b.n	8003f1e <_dtoa_r+0x7ee>
 8004034:	f04f 0800 	mov.w	r8, #0
 8004038:	e7f6      	b.n	8004028 <_dtoa_r+0x8f8>
 800403a:	4698      	mov	r8, r3
 800403c:	e7f4      	b.n	8004028 <_dtoa_r+0x8f8>
 800403e:	d082      	beq.n	8003f46 <_dtoa_r+0x816>
 8004040:	9a05      	ldr	r2, [sp, #20]
 8004042:	331c      	adds	r3, #28
 8004044:	441a      	add	r2, r3
 8004046:	9205      	str	r2, [sp, #20]
 8004048:	9a06      	ldr	r2, [sp, #24]
 800404a:	441a      	add	r2, r3
 800404c:	441d      	add	r5, r3
 800404e:	9206      	str	r2, [sp, #24]
 8004050:	e779      	b.n	8003f46 <_dtoa_r+0x816>
 8004052:	4603      	mov	r3, r0
 8004054:	e7f4      	b.n	8004040 <_dtoa_r+0x910>
 8004056:	9b04      	ldr	r3, [sp, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	dc37      	bgt.n	80040cc <_dtoa_r+0x99c>
 800405c:	9b07      	ldr	r3, [sp, #28]
 800405e:	2b02      	cmp	r3, #2
 8004060:	dd34      	ble.n	80040cc <_dtoa_r+0x99c>
 8004062:	9b04      	ldr	r3, [sp, #16]
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	b963      	cbnz	r3, 8004084 <_dtoa_r+0x954>
 800406a:	4631      	mov	r1, r6
 800406c:	2205      	movs	r2, #5
 800406e:	4620      	mov	r0, r4
 8004070:	f000 fab2 	bl	80045d8 <__multadd>
 8004074:	4601      	mov	r1, r0
 8004076:	4606      	mov	r6, r0
 8004078:	4650      	mov	r0, sl
 800407a:	f000 fcc7 	bl	8004a0c <__mcmp>
 800407e:	2800      	cmp	r0, #0
 8004080:	f73f adbb 	bgt.w	8003bfa <_dtoa_r+0x4ca>
 8004084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004086:	9d00      	ldr	r5, [sp, #0]
 8004088:	ea6f 0b03 	mvn.w	fp, r3
 800408c:	f04f 0800 	mov.w	r8, #0
 8004090:	4631      	mov	r1, r6
 8004092:	4620      	mov	r0, r4
 8004094:	f000 fa7e 	bl	8004594 <_Bfree>
 8004098:	2f00      	cmp	r7, #0
 800409a:	f43f aeab 	beq.w	8003df4 <_dtoa_r+0x6c4>
 800409e:	f1b8 0f00 	cmp.w	r8, #0
 80040a2:	d005      	beq.n	80040b0 <_dtoa_r+0x980>
 80040a4:	45b8      	cmp	r8, r7
 80040a6:	d003      	beq.n	80040b0 <_dtoa_r+0x980>
 80040a8:	4641      	mov	r1, r8
 80040aa:	4620      	mov	r0, r4
 80040ac:	f000 fa72 	bl	8004594 <_Bfree>
 80040b0:	4639      	mov	r1, r7
 80040b2:	4620      	mov	r0, r4
 80040b4:	f000 fa6e 	bl	8004594 <_Bfree>
 80040b8:	e69c      	b.n	8003df4 <_dtoa_r+0x6c4>
 80040ba:	2600      	movs	r6, #0
 80040bc:	4637      	mov	r7, r6
 80040be:	e7e1      	b.n	8004084 <_dtoa_r+0x954>
 80040c0:	46bb      	mov	fp, r7
 80040c2:	4637      	mov	r7, r6
 80040c4:	e599      	b.n	8003bfa <_dtoa_r+0x4ca>
 80040c6:	bf00      	nop
 80040c8:	40240000 	.word	0x40240000
 80040cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80c8 	beq.w	8004264 <_dtoa_r+0xb34>
 80040d4:	9b04      	ldr	r3, [sp, #16]
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	2d00      	cmp	r5, #0
 80040da:	dd05      	ble.n	80040e8 <_dtoa_r+0x9b8>
 80040dc:	4639      	mov	r1, r7
 80040de:	462a      	mov	r2, r5
 80040e0:	4620      	mov	r0, r4
 80040e2:	f000 fc27 	bl	8004934 <__lshift>
 80040e6:	4607      	mov	r7, r0
 80040e8:	f1b8 0f00 	cmp.w	r8, #0
 80040ec:	d05b      	beq.n	80041a6 <_dtoa_r+0xa76>
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4620      	mov	r0, r4
 80040f2:	f000 fa0f 	bl	8004514 <_Balloc>
 80040f6:	4605      	mov	r5, r0
 80040f8:	b928      	cbnz	r0, 8004106 <_dtoa_r+0x9d6>
 80040fa:	4b83      	ldr	r3, [pc, #524]	; (8004308 <_dtoa_r+0xbd8>)
 80040fc:	4602      	mov	r2, r0
 80040fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004102:	f7ff bb2e 	b.w	8003762 <_dtoa_r+0x32>
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	3202      	adds	r2, #2
 800410a:	0092      	lsls	r2, r2, #2
 800410c:	f107 010c 	add.w	r1, r7, #12
 8004110:	300c      	adds	r0, #12
 8004112:	f000 ffab 	bl	800506c <memcpy>
 8004116:	2201      	movs	r2, #1
 8004118:	4629      	mov	r1, r5
 800411a:	4620      	mov	r0, r4
 800411c:	f000 fc0a 	bl	8004934 <__lshift>
 8004120:	9b00      	ldr	r3, [sp, #0]
 8004122:	3301      	adds	r3, #1
 8004124:	9304      	str	r3, [sp, #16]
 8004126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800412a:	4413      	add	r3, r2
 800412c:	9308      	str	r3, [sp, #32]
 800412e:	9b02      	ldr	r3, [sp, #8]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	46b8      	mov	r8, r7
 8004136:	9306      	str	r3, [sp, #24]
 8004138:	4607      	mov	r7, r0
 800413a:	9b04      	ldr	r3, [sp, #16]
 800413c:	4631      	mov	r1, r6
 800413e:	3b01      	subs	r3, #1
 8004140:	4650      	mov	r0, sl
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	f7ff fa69 	bl	800361a <quorem>
 8004148:	4641      	mov	r1, r8
 800414a:	9002      	str	r0, [sp, #8]
 800414c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004150:	4650      	mov	r0, sl
 8004152:	f000 fc5b 	bl	8004a0c <__mcmp>
 8004156:	463a      	mov	r2, r7
 8004158:	9005      	str	r0, [sp, #20]
 800415a:	4631      	mov	r1, r6
 800415c:	4620      	mov	r0, r4
 800415e:	f000 fc71 	bl	8004a44 <__mdiff>
 8004162:	68c2      	ldr	r2, [r0, #12]
 8004164:	4605      	mov	r5, r0
 8004166:	bb02      	cbnz	r2, 80041aa <_dtoa_r+0xa7a>
 8004168:	4601      	mov	r1, r0
 800416a:	4650      	mov	r0, sl
 800416c:	f000 fc4e 	bl	8004a0c <__mcmp>
 8004170:	4602      	mov	r2, r0
 8004172:	4629      	mov	r1, r5
 8004174:	4620      	mov	r0, r4
 8004176:	9209      	str	r2, [sp, #36]	; 0x24
 8004178:	f000 fa0c 	bl	8004594 <_Bfree>
 800417c:	9b07      	ldr	r3, [sp, #28]
 800417e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004180:	9d04      	ldr	r5, [sp, #16]
 8004182:	ea43 0102 	orr.w	r1, r3, r2
 8004186:	9b06      	ldr	r3, [sp, #24]
 8004188:	4319      	orrs	r1, r3
 800418a:	d110      	bne.n	80041ae <_dtoa_r+0xa7e>
 800418c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004190:	d029      	beq.n	80041e6 <_dtoa_r+0xab6>
 8004192:	9b05      	ldr	r3, [sp, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	dd02      	ble.n	800419e <_dtoa_r+0xa6e>
 8004198:	9b02      	ldr	r3, [sp, #8]
 800419a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800419e:	9b01      	ldr	r3, [sp, #4]
 80041a0:	f883 9000 	strb.w	r9, [r3]
 80041a4:	e774      	b.n	8004090 <_dtoa_r+0x960>
 80041a6:	4638      	mov	r0, r7
 80041a8:	e7ba      	b.n	8004120 <_dtoa_r+0x9f0>
 80041aa:	2201      	movs	r2, #1
 80041ac:	e7e1      	b.n	8004172 <_dtoa_r+0xa42>
 80041ae:	9b05      	ldr	r3, [sp, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db04      	blt.n	80041be <_dtoa_r+0xa8e>
 80041b4:	9907      	ldr	r1, [sp, #28]
 80041b6:	430b      	orrs	r3, r1
 80041b8:	9906      	ldr	r1, [sp, #24]
 80041ba:	430b      	orrs	r3, r1
 80041bc:	d120      	bne.n	8004200 <_dtoa_r+0xad0>
 80041be:	2a00      	cmp	r2, #0
 80041c0:	dded      	ble.n	800419e <_dtoa_r+0xa6e>
 80041c2:	4651      	mov	r1, sl
 80041c4:	2201      	movs	r2, #1
 80041c6:	4620      	mov	r0, r4
 80041c8:	f000 fbb4 	bl	8004934 <__lshift>
 80041cc:	4631      	mov	r1, r6
 80041ce:	4682      	mov	sl, r0
 80041d0:	f000 fc1c 	bl	8004a0c <__mcmp>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	dc03      	bgt.n	80041e0 <_dtoa_r+0xab0>
 80041d8:	d1e1      	bne.n	800419e <_dtoa_r+0xa6e>
 80041da:	f019 0f01 	tst.w	r9, #1
 80041de:	d0de      	beq.n	800419e <_dtoa_r+0xa6e>
 80041e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80041e4:	d1d8      	bne.n	8004198 <_dtoa_r+0xa68>
 80041e6:	9a01      	ldr	r2, [sp, #4]
 80041e8:	2339      	movs	r3, #57	; 0x39
 80041ea:	7013      	strb	r3, [r2, #0]
 80041ec:	462b      	mov	r3, r5
 80041ee:	461d      	mov	r5, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80041f6:	2a39      	cmp	r2, #57	; 0x39
 80041f8:	d06c      	beq.n	80042d4 <_dtoa_r+0xba4>
 80041fa:	3201      	adds	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e747      	b.n	8004090 <_dtoa_r+0x960>
 8004200:	2a00      	cmp	r2, #0
 8004202:	dd07      	ble.n	8004214 <_dtoa_r+0xae4>
 8004204:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004208:	d0ed      	beq.n	80041e6 <_dtoa_r+0xab6>
 800420a:	9a01      	ldr	r2, [sp, #4]
 800420c:	f109 0301 	add.w	r3, r9, #1
 8004210:	7013      	strb	r3, [r2, #0]
 8004212:	e73d      	b.n	8004090 <_dtoa_r+0x960>
 8004214:	9b04      	ldr	r3, [sp, #16]
 8004216:	9a08      	ldr	r2, [sp, #32]
 8004218:	f803 9c01 	strb.w	r9, [r3, #-1]
 800421c:	4293      	cmp	r3, r2
 800421e:	d043      	beq.n	80042a8 <_dtoa_r+0xb78>
 8004220:	4651      	mov	r1, sl
 8004222:	2300      	movs	r3, #0
 8004224:	220a      	movs	r2, #10
 8004226:	4620      	mov	r0, r4
 8004228:	f000 f9d6 	bl	80045d8 <__multadd>
 800422c:	45b8      	cmp	r8, r7
 800422e:	4682      	mov	sl, r0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	f04f 020a 	mov.w	r2, #10
 8004238:	4641      	mov	r1, r8
 800423a:	4620      	mov	r0, r4
 800423c:	d107      	bne.n	800424e <_dtoa_r+0xb1e>
 800423e:	f000 f9cb 	bl	80045d8 <__multadd>
 8004242:	4680      	mov	r8, r0
 8004244:	4607      	mov	r7, r0
 8004246:	9b04      	ldr	r3, [sp, #16]
 8004248:	3301      	adds	r3, #1
 800424a:	9304      	str	r3, [sp, #16]
 800424c:	e775      	b.n	800413a <_dtoa_r+0xa0a>
 800424e:	f000 f9c3 	bl	80045d8 <__multadd>
 8004252:	4639      	mov	r1, r7
 8004254:	4680      	mov	r8, r0
 8004256:	2300      	movs	r3, #0
 8004258:	220a      	movs	r2, #10
 800425a:	4620      	mov	r0, r4
 800425c:	f000 f9bc 	bl	80045d8 <__multadd>
 8004260:	4607      	mov	r7, r0
 8004262:	e7f0      	b.n	8004246 <_dtoa_r+0xb16>
 8004264:	9b04      	ldr	r3, [sp, #16]
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	9d00      	ldr	r5, [sp, #0]
 800426a:	4631      	mov	r1, r6
 800426c:	4650      	mov	r0, sl
 800426e:	f7ff f9d4 	bl	800361a <quorem>
 8004272:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004276:	9b00      	ldr	r3, [sp, #0]
 8004278:	f805 9b01 	strb.w	r9, [r5], #1
 800427c:	1aea      	subs	r2, r5, r3
 800427e:	9b01      	ldr	r3, [sp, #4]
 8004280:	4293      	cmp	r3, r2
 8004282:	dd07      	ble.n	8004294 <_dtoa_r+0xb64>
 8004284:	4651      	mov	r1, sl
 8004286:	2300      	movs	r3, #0
 8004288:	220a      	movs	r2, #10
 800428a:	4620      	mov	r0, r4
 800428c:	f000 f9a4 	bl	80045d8 <__multadd>
 8004290:	4682      	mov	sl, r0
 8004292:	e7ea      	b.n	800426a <_dtoa_r+0xb3a>
 8004294:	9b01      	ldr	r3, [sp, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	bfc8      	it	gt
 800429a:	461d      	movgt	r5, r3
 800429c:	9b00      	ldr	r3, [sp, #0]
 800429e:	bfd8      	it	le
 80042a0:	2501      	movle	r5, #1
 80042a2:	441d      	add	r5, r3
 80042a4:	f04f 0800 	mov.w	r8, #0
 80042a8:	4651      	mov	r1, sl
 80042aa:	2201      	movs	r2, #1
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fb41 	bl	8004934 <__lshift>
 80042b2:	4631      	mov	r1, r6
 80042b4:	4682      	mov	sl, r0
 80042b6:	f000 fba9 	bl	8004a0c <__mcmp>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	dc96      	bgt.n	80041ec <_dtoa_r+0xabc>
 80042be:	d102      	bne.n	80042c6 <_dtoa_r+0xb96>
 80042c0:	f019 0f01 	tst.w	r9, #1
 80042c4:	d192      	bne.n	80041ec <_dtoa_r+0xabc>
 80042c6:	462b      	mov	r3, r5
 80042c8:	461d      	mov	r5, r3
 80042ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80042ce:	2a30      	cmp	r2, #48	; 0x30
 80042d0:	d0fa      	beq.n	80042c8 <_dtoa_r+0xb98>
 80042d2:	e6dd      	b.n	8004090 <_dtoa_r+0x960>
 80042d4:	9a00      	ldr	r2, [sp, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d189      	bne.n	80041ee <_dtoa_r+0xabe>
 80042da:	f10b 0b01 	add.w	fp, fp, #1
 80042de:	2331      	movs	r3, #49	; 0x31
 80042e0:	e796      	b.n	8004210 <_dtoa_r+0xae0>
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <_dtoa_r+0xbdc>)
 80042e4:	f7ff ba99 	b.w	800381a <_dtoa_r+0xea>
 80042e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f47f aa6d 	bne.w	80037ca <_dtoa_r+0x9a>
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <_dtoa_r+0xbe0>)
 80042f2:	f7ff ba92 	b.w	800381a <_dtoa_r+0xea>
 80042f6:	9b01      	ldr	r3, [sp, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	dcb5      	bgt.n	8004268 <_dtoa_r+0xb38>
 80042fc:	9b07      	ldr	r3, [sp, #28]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	f73f aeb1 	bgt.w	8004066 <_dtoa_r+0x936>
 8004304:	e7b0      	b.n	8004268 <_dtoa_r+0xb38>
 8004306:	bf00      	nop
 8004308:	080057f0 	.word	0x080057f0
 800430c:	08005750 	.word	0x08005750
 8004310:	08005774 	.word	0x08005774

08004314 <_free_r>:
 8004314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004316:	2900      	cmp	r1, #0
 8004318:	d044      	beq.n	80043a4 <_free_r+0x90>
 800431a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800431e:	9001      	str	r0, [sp, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f1a1 0404 	sub.w	r4, r1, #4
 8004326:	bfb8      	it	lt
 8004328:	18e4      	addlt	r4, r4, r3
 800432a:	f000 f8e7 	bl	80044fc <__malloc_lock>
 800432e:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <_free_r+0x94>)
 8004330:	9801      	ldr	r0, [sp, #4]
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	b933      	cbnz	r3, 8004344 <_free_r+0x30>
 8004336:	6063      	str	r3, [r4, #4]
 8004338:	6014      	str	r4, [r2, #0]
 800433a:	b003      	add	sp, #12
 800433c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004340:	f000 b8e2 	b.w	8004508 <__malloc_unlock>
 8004344:	42a3      	cmp	r3, r4
 8004346:	d908      	bls.n	800435a <_free_r+0x46>
 8004348:	6825      	ldr	r5, [r4, #0]
 800434a:	1961      	adds	r1, r4, r5
 800434c:	428b      	cmp	r3, r1
 800434e:	bf01      	itttt	eq
 8004350:	6819      	ldreq	r1, [r3, #0]
 8004352:	685b      	ldreq	r3, [r3, #4]
 8004354:	1949      	addeq	r1, r1, r5
 8004356:	6021      	streq	r1, [r4, #0]
 8004358:	e7ed      	b.n	8004336 <_free_r+0x22>
 800435a:	461a      	mov	r2, r3
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	b10b      	cbz	r3, 8004364 <_free_r+0x50>
 8004360:	42a3      	cmp	r3, r4
 8004362:	d9fa      	bls.n	800435a <_free_r+0x46>
 8004364:	6811      	ldr	r1, [r2, #0]
 8004366:	1855      	adds	r5, r2, r1
 8004368:	42a5      	cmp	r5, r4
 800436a:	d10b      	bne.n	8004384 <_free_r+0x70>
 800436c:	6824      	ldr	r4, [r4, #0]
 800436e:	4421      	add	r1, r4
 8004370:	1854      	adds	r4, r2, r1
 8004372:	42a3      	cmp	r3, r4
 8004374:	6011      	str	r1, [r2, #0]
 8004376:	d1e0      	bne.n	800433a <_free_r+0x26>
 8004378:	681c      	ldr	r4, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	6053      	str	r3, [r2, #4]
 800437e:	440c      	add	r4, r1
 8004380:	6014      	str	r4, [r2, #0]
 8004382:	e7da      	b.n	800433a <_free_r+0x26>
 8004384:	d902      	bls.n	800438c <_free_r+0x78>
 8004386:	230c      	movs	r3, #12
 8004388:	6003      	str	r3, [r0, #0]
 800438a:	e7d6      	b.n	800433a <_free_r+0x26>
 800438c:	6825      	ldr	r5, [r4, #0]
 800438e:	1961      	adds	r1, r4, r5
 8004390:	428b      	cmp	r3, r1
 8004392:	bf04      	itt	eq
 8004394:	6819      	ldreq	r1, [r3, #0]
 8004396:	685b      	ldreq	r3, [r3, #4]
 8004398:	6063      	str	r3, [r4, #4]
 800439a:	bf04      	itt	eq
 800439c:	1949      	addeq	r1, r1, r5
 800439e:	6021      	streq	r1, [r4, #0]
 80043a0:	6054      	str	r4, [r2, #4]
 80043a2:	e7ca      	b.n	800433a <_free_r+0x26>
 80043a4:	b003      	add	sp, #12
 80043a6:	bd30      	pop	{r4, r5, pc}
 80043a8:	2000035c 	.word	0x2000035c

080043ac <malloc>:
 80043ac:	4b02      	ldr	r3, [pc, #8]	; (80043b8 <malloc+0xc>)
 80043ae:	4601      	mov	r1, r0
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	f000 b823 	b.w	80043fc <_malloc_r>
 80043b6:	bf00      	nop
 80043b8:	20000064 	.word	0x20000064

080043bc <sbrk_aligned>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4e0e      	ldr	r6, [pc, #56]	; (80043f8 <sbrk_aligned+0x3c>)
 80043c0:	460c      	mov	r4, r1
 80043c2:	6831      	ldr	r1, [r6, #0]
 80043c4:	4605      	mov	r5, r0
 80043c6:	b911      	cbnz	r1, 80043ce <sbrk_aligned+0x12>
 80043c8:	f000 fe40 	bl	800504c <_sbrk_r>
 80043cc:	6030      	str	r0, [r6, #0]
 80043ce:	4621      	mov	r1, r4
 80043d0:	4628      	mov	r0, r5
 80043d2:	f000 fe3b 	bl	800504c <_sbrk_r>
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	d00a      	beq.n	80043f0 <sbrk_aligned+0x34>
 80043da:	1cc4      	adds	r4, r0, #3
 80043dc:	f024 0403 	bic.w	r4, r4, #3
 80043e0:	42a0      	cmp	r0, r4
 80043e2:	d007      	beq.n	80043f4 <sbrk_aligned+0x38>
 80043e4:	1a21      	subs	r1, r4, r0
 80043e6:	4628      	mov	r0, r5
 80043e8:	f000 fe30 	bl	800504c <_sbrk_r>
 80043ec:	3001      	adds	r0, #1
 80043ee:	d101      	bne.n	80043f4 <sbrk_aligned+0x38>
 80043f0:	f04f 34ff 	mov.w	r4, #4294967295
 80043f4:	4620      	mov	r0, r4
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	20000360 	.word	0x20000360

080043fc <_malloc_r>:
 80043fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004400:	1ccd      	adds	r5, r1, #3
 8004402:	f025 0503 	bic.w	r5, r5, #3
 8004406:	3508      	adds	r5, #8
 8004408:	2d0c      	cmp	r5, #12
 800440a:	bf38      	it	cc
 800440c:	250c      	movcc	r5, #12
 800440e:	2d00      	cmp	r5, #0
 8004410:	4607      	mov	r7, r0
 8004412:	db01      	blt.n	8004418 <_malloc_r+0x1c>
 8004414:	42a9      	cmp	r1, r5
 8004416:	d905      	bls.n	8004424 <_malloc_r+0x28>
 8004418:	230c      	movs	r3, #12
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	2600      	movs	r6, #0
 800441e:	4630      	mov	r0, r6
 8004420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044f8 <_malloc_r+0xfc>
 8004428:	f000 f868 	bl	80044fc <__malloc_lock>
 800442c:	f8d8 3000 	ldr.w	r3, [r8]
 8004430:	461c      	mov	r4, r3
 8004432:	bb5c      	cbnz	r4, 800448c <_malloc_r+0x90>
 8004434:	4629      	mov	r1, r5
 8004436:	4638      	mov	r0, r7
 8004438:	f7ff ffc0 	bl	80043bc <sbrk_aligned>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	4604      	mov	r4, r0
 8004440:	d155      	bne.n	80044ee <_malloc_r+0xf2>
 8004442:	f8d8 4000 	ldr.w	r4, [r8]
 8004446:	4626      	mov	r6, r4
 8004448:	2e00      	cmp	r6, #0
 800444a:	d145      	bne.n	80044d8 <_malloc_r+0xdc>
 800444c:	2c00      	cmp	r4, #0
 800444e:	d048      	beq.n	80044e2 <_malloc_r+0xe6>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	4631      	mov	r1, r6
 8004454:	4638      	mov	r0, r7
 8004456:	eb04 0903 	add.w	r9, r4, r3
 800445a:	f000 fdf7 	bl	800504c <_sbrk_r>
 800445e:	4581      	cmp	r9, r0
 8004460:	d13f      	bne.n	80044e2 <_malloc_r+0xe6>
 8004462:	6821      	ldr	r1, [r4, #0]
 8004464:	1a6d      	subs	r5, r5, r1
 8004466:	4629      	mov	r1, r5
 8004468:	4638      	mov	r0, r7
 800446a:	f7ff ffa7 	bl	80043bc <sbrk_aligned>
 800446e:	3001      	adds	r0, #1
 8004470:	d037      	beq.n	80044e2 <_malloc_r+0xe6>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	442b      	add	r3, r5
 8004476:	6023      	str	r3, [r4, #0]
 8004478:	f8d8 3000 	ldr.w	r3, [r8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d038      	beq.n	80044f2 <_malloc_r+0xf6>
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	42a2      	cmp	r2, r4
 8004484:	d12b      	bne.n	80044de <_malloc_r+0xe2>
 8004486:	2200      	movs	r2, #0
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	e00f      	b.n	80044ac <_malloc_r+0xb0>
 800448c:	6822      	ldr	r2, [r4, #0]
 800448e:	1b52      	subs	r2, r2, r5
 8004490:	d41f      	bmi.n	80044d2 <_malloc_r+0xd6>
 8004492:	2a0b      	cmp	r2, #11
 8004494:	d917      	bls.n	80044c6 <_malloc_r+0xca>
 8004496:	1961      	adds	r1, r4, r5
 8004498:	42a3      	cmp	r3, r4
 800449a:	6025      	str	r5, [r4, #0]
 800449c:	bf18      	it	ne
 800449e:	6059      	strne	r1, [r3, #4]
 80044a0:	6863      	ldr	r3, [r4, #4]
 80044a2:	bf08      	it	eq
 80044a4:	f8c8 1000 	streq.w	r1, [r8]
 80044a8:	5162      	str	r2, [r4, r5]
 80044aa:	604b      	str	r3, [r1, #4]
 80044ac:	4638      	mov	r0, r7
 80044ae:	f104 060b 	add.w	r6, r4, #11
 80044b2:	f000 f829 	bl	8004508 <__malloc_unlock>
 80044b6:	f026 0607 	bic.w	r6, r6, #7
 80044ba:	1d23      	adds	r3, r4, #4
 80044bc:	1af2      	subs	r2, r6, r3
 80044be:	d0ae      	beq.n	800441e <_malloc_r+0x22>
 80044c0:	1b9b      	subs	r3, r3, r6
 80044c2:	50a3      	str	r3, [r4, r2]
 80044c4:	e7ab      	b.n	800441e <_malloc_r+0x22>
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	6862      	ldr	r2, [r4, #4]
 80044ca:	d1dd      	bne.n	8004488 <_malloc_r+0x8c>
 80044cc:	f8c8 2000 	str.w	r2, [r8]
 80044d0:	e7ec      	b.n	80044ac <_malloc_r+0xb0>
 80044d2:	4623      	mov	r3, r4
 80044d4:	6864      	ldr	r4, [r4, #4]
 80044d6:	e7ac      	b.n	8004432 <_malloc_r+0x36>
 80044d8:	4634      	mov	r4, r6
 80044da:	6876      	ldr	r6, [r6, #4]
 80044dc:	e7b4      	b.n	8004448 <_malloc_r+0x4c>
 80044de:	4613      	mov	r3, r2
 80044e0:	e7cc      	b.n	800447c <_malloc_r+0x80>
 80044e2:	230c      	movs	r3, #12
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	4638      	mov	r0, r7
 80044e8:	f000 f80e 	bl	8004508 <__malloc_unlock>
 80044ec:	e797      	b.n	800441e <_malloc_r+0x22>
 80044ee:	6025      	str	r5, [r4, #0]
 80044f0:	e7dc      	b.n	80044ac <_malloc_r+0xb0>
 80044f2:	605b      	str	r3, [r3, #4]
 80044f4:	deff      	udf	#255	; 0xff
 80044f6:	bf00      	nop
 80044f8:	2000035c 	.word	0x2000035c

080044fc <__malloc_lock>:
 80044fc:	4801      	ldr	r0, [pc, #4]	; (8004504 <__malloc_lock+0x8>)
 80044fe:	f7ff b88a 	b.w	8003616 <__retarget_lock_acquire_recursive>
 8004502:	bf00      	nop
 8004504:	20000358 	.word	0x20000358

08004508 <__malloc_unlock>:
 8004508:	4801      	ldr	r0, [pc, #4]	; (8004510 <__malloc_unlock+0x8>)
 800450a:	f7ff b885 	b.w	8003618 <__retarget_lock_release_recursive>
 800450e:	bf00      	nop
 8004510:	20000358 	.word	0x20000358

08004514 <_Balloc>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	69c6      	ldr	r6, [r0, #28]
 8004518:	4604      	mov	r4, r0
 800451a:	460d      	mov	r5, r1
 800451c:	b976      	cbnz	r6, 800453c <_Balloc+0x28>
 800451e:	2010      	movs	r0, #16
 8004520:	f7ff ff44 	bl	80043ac <malloc>
 8004524:	4602      	mov	r2, r0
 8004526:	61e0      	str	r0, [r4, #28]
 8004528:	b920      	cbnz	r0, 8004534 <_Balloc+0x20>
 800452a:	4b18      	ldr	r3, [pc, #96]	; (800458c <_Balloc+0x78>)
 800452c:	4818      	ldr	r0, [pc, #96]	; (8004590 <_Balloc+0x7c>)
 800452e:	216b      	movs	r1, #107	; 0x6b
 8004530:	f000 fdaa 	bl	8005088 <__assert_func>
 8004534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004538:	6006      	str	r6, [r0, #0]
 800453a:	60c6      	str	r6, [r0, #12]
 800453c:	69e6      	ldr	r6, [r4, #28]
 800453e:	68f3      	ldr	r3, [r6, #12]
 8004540:	b183      	cbz	r3, 8004564 <_Balloc+0x50>
 8004542:	69e3      	ldr	r3, [r4, #28]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800454a:	b9b8      	cbnz	r0, 800457c <_Balloc+0x68>
 800454c:	2101      	movs	r1, #1
 800454e:	fa01 f605 	lsl.w	r6, r1, r5
 8004552:	1d72      	adds	r2, r6, #5
 8004554:	0092      	lsls	r2, r2, #2
 8004556:	4620      	mov	r0, r4
 8004558:	f000 fdb4 	bl	80050c4 <_calloc_r>
 800455c:	b160      	cbz	r0, 8004578 <_Balloc+0x64>
 800455e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004562:	e00e      	b.n	8004582 <_Balloc+0x6e>
 8004564:	2221      	movs	r2, #33	; 0x21
 8004566:	2104      	movs	r1, #4
 8004568:	4620      	mov	r0, r4
 800456a:	f000 fdab 	bl	80050c4 <_calloc_r>
 800456e:	69e3      	ldr	r3, [r4, #28]
 8004570:	60f0      	str	r0, [r6, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e4      	bne.n	8004542 <_Balloc+0x2e>
 8004578:	2000      	movs	r0, #0
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	6802      	ldr	r2, [r0, #0]
 800457e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004582:	2300      	movs	r3, #0
 8004584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004588:	e7f7      	b.n	800457a <_Balloc+0x66>
 800458a:	bf00      	nop
 800458c:	08005781 	.word	0x08005781
 8004590:	08005801 	.word	0x08005801

08004594 <_Bfree>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	69c6      	ldr	r6, [r0, #28]
 8004598:	4605      	mov	r5, r0
 800459a:	460c      	mov	r4, r1
 800459c:	b976      	cbnz	r6, 80045bc <_Bfree+0x28>
 800459e:	2010      	movs	r0, #16
 80045a0:	f7ff ff04 	bl	80043ac <malloc>
 80045a4:	4602      	mov	r2, r0
 80045a6:	61e8      	str	r0, [r5, #28]
 80045a8:	b920      	cbnz	r0, 80045b4 <_Bfree+0x20>
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <_Bfree+0x3c>)
 80045ac:	4809      	ldr	r0, [pc, #36]	; (80045d4 <_Bfree+0x40>)
 80045ae:	218f      	movs	r1, #143	; 0x8f
 80045b0:	f000 fd6a 	bl	8005088 <__assert_func>
 80045b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045b8:	6006      	str	r6, [r0, #0]
 80045ba:	60c6      	str	r6, [r0, #12]
 80045bc:	b13c      	cbz	r4, 80045ce <_Bfree+0x3a>
 80045be:	69eb      	ldr	r3, [r5, #28]
 80045c0:	6862      	ldr	r2, [r4, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045c8:	6021      	str	r1, [r4, #0]
 80045ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	08005781 	.word	0x08005781
 80045d4:	08005801 	.word	0x08005801

080045d8 <__multadd>:
 80045d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045dc:	690d      	ldr	r5, [r1, #16]
 80045de:	4607      	mov	r7, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	461e      	mov	r6, r3
 80045e4:	f101 0c14 	add.w	ip, r1, #20
 80045e8:	2000      	movs	r0, #0
 80045ea:	f8dc 3000 	ldr.w	r3, [ip]
 80045ee:	b299      	uxth	r1, r3
 80045f0:	fb02 6101 	mla	r1, r2, r1, r6
 80045f4:	0c1e      	lsrs	r6, r3, #16
 80045f6:	0c0b      	lsrs	r3, r1, #16
 80045f8:	fb02 3306 	mla	r3, r2, r6, r3
 80045fc:	b289      	uxth	r1, r1
 80045fe:	3001      	adds	r0, #1
 8004600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004604:	4285      	cmp	r5, r0
 8004606:	f84c 1b04 	str.w	r1, [ip], #4
 800460a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800460e:	dcec      	bgt.n	80045ea <__multadd+0x12>
 8004610:	b30e      	cbz	r6, 8004656 <__multadd+0x7e>
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	42ab      	cmp	r3, r5
 8004616:	dc19      	bgt.n	800464c <__multadd+0x74>
 8004618:	6861      	ldr	r1, [r4, #4]
 800461a:	4638      	mov	r0, r7
 800461c:	3101      	adds	r1, #1
 800461e:	f7ff ff79 	bl	8004514 <_Balloc>
 8004622:	4680      	mov	r8, r0
 8004624:	b928      	cbnz	r0, 8004632 <__multadd+0x5a>
 8004626:	4602      	mov	r2, r0
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <__multadd+0x84>)
 800462a:	480d      	ldr	r0, [pc, #52]	; (8004660 <__multadd+0x88>)
 800462c:	21ba      	movs	r1, #186	; 0xba
 800462e:	f000 fd2b 	bl	8005088 <__assert_func>
 8004632:	6922      	ldr	r2, [r4, #16]
 8004634:	3202      	adds	r2, #2
 8004636:	f104 010c 	add.w	r1, r4, #12
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	300c      	adds	r0, #12
 800463e:	f000 fd15 	bl	800506c <memcpy>
 8004642:	4621      	mov	r1, r4
 8004644:	4638      	mov	r0, r7
 8004646:	f7ff ffa5 	bl	8004594 <_Bfree>
 800464a:	4644      	mov	r4, r8
 800464c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004650:	3501      	adds	r5, #1
 8004652:	615e      	str	r6, [r3, #20]
 8004654:	6125      	str	r5, [r4, #16]
 8004656:	4620      	mov	r0, r4
 8004658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800465c:	080057f0 	.word	0x080057f0
 8004660:	08005801 	.word	0x08005801

08004664 <__hi0bits>:
 8004664:	0c03      	lsrs	r3, r0, #16
 8004666:	041b      	lsls	r3, r3, #16
 8004668:	b9d3      	cbnz	r3, 80046a0 <__hi0bits+0x3c>
 800466a:	0400      	lsls	r0, r0, #16
 800466c:	2310      	movs	r3, #16
 800466e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004672:	bf04      	itt	eq
 8004674:	0200      	lsleq	r0, r0, #8
 8004676:	3308      	addeq	r3, #8
 8004678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800467c:	bf04      	itt	eq
 800467e:	0100      	lsleq	r0, r0, #4
 8004680:	3304      	addeq	r3, #4
 8004682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004686:	bf04      	itt	eq
 8004688:	0080      	lsleq	r0, r0, #2
 800468a:	3302      	addeq	r3, #2
 800468c:	2800      	cmp	r0, #0
 800468e:	db05      	blt.n	800469c <__hi0bits+0x38>
 8004690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004694:	f103 0301 	add.w	r3, r3, #1
 8004698:	bf08      	it	eq
 800469a:	2320      	moveq	r3, #32
 800469c:	4618      	mov	r0, r3
 800469e:	4770      	bx	lr
 80046a0:	2300      	movs	r3, #0
 80046a2:	e7e4      	b.n	800466e <__hi0bits+0xa>

080046a4 <__lo0bits>:
 80046a4:	6803      	ldr	r3, [r0, #0]
 80046a6:	f013 0207 	ands.w	r2, r3, #7
 80046aa:	d00c      	beq.n	80046c6 <__lo0bits+0x22>
 80046ac:	07d9      	lsls	r1, r3, #31
 80046ae:	d422      	bmi.n	80046f6 <__lo0bits+0x52>
 80046b0:	079a      	lsls	r2, r3, #30
 80046b2:	bf49      	itett	mi
 80046b4:	085b      	lsrmi	r3, r3, #1
 80046b6:	089b      	lsrpl	r3, r3, #2
 80046b8:	6003      	strmi	r3, [r0, #0]
 80046ba:	2201      	movmi	r2, #1
 80046bc:	bf5c      	itt	pl
 80046be:	6003      	strpl	r3, [r0, #0]
 80046c0:	2202      	movpl	r2, #2
 80046c2:	4610      	mov	r0, r2
 80046c4:	4770      	bx	lr
 80046c6:	b299      	uxth	r1, r3
 80046c8:	b909      	cbnz	r1, 80046ce <__lo0bits+0x2a>
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	2210      	movs	r2, #16
 80046ce:	b2d9      	uxtb	r1, r3
 80046d0:	b909      	cbnz	r1, 80046d6 <__lo0bits+0x32>
 80046d2:	3208      	adds	r2, #8
 80046d4:	0a1b      	lsrs	r3, r3, #8
 80046d6:	0719      	lsls	r1, r3, #28
 80046d8:	bf04      	itt	eq
 80046da:	091b      	lsreq	r3, r3, #4
 80046dc:	3204      	addeq	r2, #4
 80046de:	0799      	lsls	r1, r3, #30
 80046e0:	bf04      	itt	eq
 80046e2:	089b      	lsreq	r3, r3, #2
 80046e4:	3202      	addeq	r2, #2
 80046e6:	07d9      	lsls	r1, r3, #31
 80046e8:	d403      	bmi.n	80046f2 <__lo0bits+0x4e>
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	f102 0201 	add.w	r2, r2, #1
 80046f0:	d003      	beq.n	80046fa <__lo0bits+0x56>
 80046f2:	6003      	str	r3, [r0, #0]
 80046f4:	e7e5      	b.n	80046c2 <__lo0bits+0x1e>
 80046f6:	2200      	movs	r2, #0
 80046f8:	e7e3      	b.n	80046c2 <__lo0bits+0x1e>
 80046fa:	2220      	movs	r2, #32
 80046fc:	e7e1      	b.n	80046c2 <__lo0bits+0x1e>
	...

08004700 <__i2b>:
 8004700:	b510      	push	{r4, lr}
 8004702:	460c      	mov	r4, r1
 8004704:	2101      	movs	r1, #1
 8004706:	f7ff ff05 	bl	8004514 <_Balloc>
 800470a:	4602      	mov	r2, r0
 800470c:	b928      	cbnz	r0, 800471a <__i2b+0x1a>
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <__i2b+0x24>)
 8004710:	4805      	ldr	r0, [pc, #20]	; (8004728 <__i2b+0x28>)
 8004712:	f240 1145 	movw	r1, #325	; 0x145
 8004716:	f000 fcb7 	bl	8005088 <__assert_func>
 800471a:	2301      	movs	r3, #1
 800471c:	6144      	str	r4, [r0, #20]
 800471e:	6103      	str	r3, [r0, #16]
 8004720:	bd10      	pop	{r4, pc}
 8004722:	bf00      	nop
 8004724:	080057f0 	.word	0x080057f0
 8004728:	08005801 	.word	0x08005801

0800472c <__multiply>:
 800472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004730:	4691      	mov	r9, r2
 8004732:	690a      	ldr	r2, [r1, #16]
 8004734:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004738:	429a      	cmp	r2, r3
 800473a:	bfb8      	it	lt
 800473c:	460b      	movlt	r3, r1
 800473e:	460c      	mov	r4, r1
 8004740:	bfbc      	itt	lt
 8004742:	464c      	movlt	r4, r9
 8004744:	4699      	movlt	r9, r3
 8004746:	6927      	ldr	r7, [r4, #16]
 8004748:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800474c:	68a3      	ldr	r3, [r4, #8]
 800474e:	6861      	ldr	r1, [r4, #4]
 8004750:	eb07 060a 	add.w	r6, r7, sl
 8004754:	42b3      	cmp	r3, r6
 8004756:	b085      	sub	sp, #20
 8004758:	bfb8      	it	lt
 800475a:	3101      	addlt	r1, #1
 800475c:	f7ff feda 	bl	8004514 <_Balloc>
 8004760:	b930      	cbnz	r0, 8004770 <__multiply+0x44>
 8004762:	4602      	mov	r2, r0
 8004764:	4b44      	ldr	r3, [pc, #272]	; (8004878 <__multiply+0x14c>)
 8004766:	4845      	ldr	r0, [pc, #276]	; (800487c <__multiply+0x150>)
 8004768:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800476c:	f000 fc8c 	bl	8005088 <__assert_func>
 8004770:	f100 0514 	add.w	r5, r0, #20
 8004774:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004778:	462b      	mov	r3, r5
 800477a:	2200      	movs	r2, #0
 800477c:	4543      	cmp	r3, r8
 800477e:	d321      	bcc.n	80047c4 <__multiply+0x98>
 8004780:	f104 0314 	add.w	r3, r4, #20
 8004784:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004788:	f109 0314 	add.w	r3, r9, #20
 800478c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004790:	9202      	str	r2, [sp, #8]
 8004792:	1b3a      	subs	r2, r7, r4
 8004794:	3a15      	subs	r2, #21
 8004796:	f022 0203 	bic.w	r2, r2, #3
 800479a:	3204      	adds	r2, #4
 800479c:	f104 0115 	add.w	r1, r4, #21
 80047a0:	428f      	cmp	r7, r1
 80047a2:	bf38      	it	cc
 80047a4:	2204      	movcc	r2, #4
 80047a6:	9201      	str	r2, [sp, #4]
 80047a8:	9a02      	ldr	r2, [sp, #8]
 80047aa:	9303      	str	r3, [sp, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d80c      	bhi.n	80047ca <__multiply+0x9e>
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	dd03      	ble.n	80047bc <__multiply+0x90>
 80047b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d05b      	beq.n	8004874 <__multiply+0x148>
 80047bc:	6106      	str	r6, [r0, #16]
 80047be:	b005      	add	sp, #20
 80047c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c4:	f843 2b04 	str.w	r2, [r3], #4
 80047c8:	e7d8      	b.n	800477c <__multiply+0x50>
 80047ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80047ce:	f1ba 0f00 	cmp.w	sl, #0
 80047d2:	d024      	beq.n	800481e <__multiply+0xf2>
 80047d4:	f104 0e14 	add.w	lr, r4, #20
 80047d8:	46a9      	mov	r9, r5
 80047da:	f04f 0c00 	mov.w	ip, #0
 80047de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80047e2:	f8d9 1000 	ldr.w	r1, [r9]
 80047e6:	fa1f fb82 	uxth.w	fp, r2
 80047ea:	b289      	uxth	r1, r1
 80047ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80047f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80047f4:	f8d9 2000 	ldr.w	r2, [r9]
 80047f8:	4461      	add	r1, ip
 80047fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80047fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8004802:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004806:	b289      	uxth	r1, r1
 8004808:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800480c:	4577      	cmp	r7, lr
 800480e:	f849 1b04 	str.w	r1, [r9], #4
 8004812:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004816:	d8e2      	bhi.n	80047de <__multiply+0xb2>
 8004818:	9a01      	ldr	r2, [sp, #4]
 800481a:	f845 c002 	str.w	ip, [r5, r2]
 800481e:	9a03      	ldr	r2, [sp, #12]
 8004820:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004824:	3304      	adds	r3, #4
 8004826:	f1b9 0f00 	cmp.w	r9, #0
 800482a:	d021      	beq.n	8004870 <__multiply+0x144>
 800482c:	6829      	ldr	r1, [r5, #0]
 800482e:	f104 0c14 	add.w	ip, r4, #20
 8004832:	46ae      	mov	lr, r5
 8004834:	f04f 0a00 	mov.w	sl, #0
 8004838:	f8bc b000 	ldrh.w	fp, [ip]
 800483c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004840:	fb09 220b 	mla	r2, r9, fp, r2
 8004844:	4452      	add	r2, sl
 8004846:	b289      	uxth	r1, r1
 8004848:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800484c:	f84e 1b04 	str.w	r1, [lr], #4
 8004850:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004854:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004858:	f8be 1000 	ldrh.w	r1, [lr]
 800485c:	fb09 110a 	mla	r1, r9, sl, r1
 8004860:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004864:	4567      	cmp	r7, ip
 8004866:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800486a:	d8e5      	bhi.n	8004838 <__multiply+0x10c>
 800486c:	9a01      	ldr	r2, [sp, #4]
 800486e:	50a9      	str	r1, [r5, r2]
 8004870:	3504      	adds	r5, #4
 8004872:	e799      	b.n	80047a8 <__multiply+0x7c>
 8004874:	3e01      	subs	r6, #1
 8004876:	e79b      	b.n	80047b0 <__multiply+0x84>
 8004878:	080057f0 	.word	0x080057f0
 800487c:	08005801 	.word	0x08005801

08004880 <__pow5mult>:
 8004880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004884:	4615      	mov	r5, r2
 8004886:	f012 0203 	ands.w	r2, r2, #3
 800488a:	4606      	mov	r6, r0
 800488c:	460f      	mov	r7, r1
 800488e:	d007      	beq.n	80048a0 <__pow5mult+0x20>
 8004890:	4c25      	ldr	r4, [pc, #148]	; (8004928 <__pow5mult+0xa8>)
 8004892:	3a01      	subs	r2, #1
 8004894:	2300      	movs	r3, #0
 8004896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800489a:	f7ff fe9d 	bl	80045d8 <__multadd>
 800489e:	4607      	mov	r7, r0
 80048a0:	10ad      	asrs	r5, r5, #2
 80048a2:	d03d      	beq.n	8004920 <__pow5mult+0xa0>
 80048a4:	69f4      	ldr	r4, [r6, #28]
 80048a6:	b97c      	cbnz	r4, 80048c8 <__pow5mult+0x48>
 80048a8:	2010      	movs	r0, #16
 80048aa:	f7ff fd7f 	bl	80043ac <malloc>
 80048ae:	4602      	mov	r2, r0
 80048b0:	61f0      	str	r0, [r6, #28]
 80048b2:	b928      	cbnz	r0, 80048c0 <__pow5mult+0x40>
 80048b4:	4b1d      	ldr	r3, [pc, #116]	; (800492c <__pow5mult+0xac>)
 80048b6:	481e      	ldr	r0, [pc, #120]	; (8004930 <__pow5mult+0xb0>)
 80048b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80048bc:	f000 fbe4 	bl	8005088 <__assert_func>
 80048c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048c4:	6004      	str	r4, [r0, #0]
 80048c6:	60c4      	str	r4, [r0, #12]
 80048c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80048cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048d0:	b94c      	cbnz	r4, 80048e6 <__pow5mult+0x66>
 80048d2:	f240 2171 	movw	r1, #625	; 0x271
 80048d6:	4630      	mov	r0, r6
 80048d8:	f7ff ff12 	bl	8004700 <__i2b>
 80048dc:	2300      	movs	r3, #0
 80048de:	f8c8 0008 	str.w	r0, [r8, #8]
 80048e2:	4604      	mov	r4, r0
 80048e4:	6003      	str	r3, [r0, #0]
 80048e6:	f04f 0900 	mov.w	r9, #0
 80048ea:	07eb      	lsls	r3, r5, #31
 80048ec:	d50a      	bpl.n	8004904 <__pow5mult+0x84>
 80048ee:	4639      	mov	r1, r7
 80048f0:	4622      	mov	r2, r4
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7ff ff1a 	bl	800472c <__multiply>
 80048f8:	4639      	mov	r1, r7
 80048fa:	4680      	mov	r8, r0
 80048fc:	4630      	mov	r0, r6
 80048fe:	f7ff fe49 	bl	8004594 <_Bfree>
 8004902:	4647      	mov	r7, r8
 8004904:	106d      	asrs	r5, r5, #1
 8004906:	d00b      	beq.n	8004920 <__pow5mult+0xa0>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	b938      	cbnz	r0, 800491c <__pow5mult+0x9c>
 800490c:	4622      	mov	r2, r4
 800490e:	4621      	mov	r1, r4
 8004910:	4630      	mov	r0, r6
 8004912:	f7ff ff0b 	bl	800472c <__multiply>
 8004916:	6020      	str	r0, [r4, #0]
 8004918:	f8c0 9000 	str.w	r9, [r0]
 800491c:	4604      	mov	r4, r0
 800491e:	e7e4      	b.n	80048ea <__pow5mult+0x6a>
 8004920:	4638      	mov	r0, r7
 8004922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004926:	bf00      	nop
 8004928:	08005950 	.word	0x08005950
 800492c:	08005781 	.word	0x08005781
 8004930:	08005801 	.word	0x08005801

08004934 <__lshift>:
 8004934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	460c      	mov	r4, r1
 800493a:	6849      	ldr	r1, [r1, #4]
 800493c:	6923      	ldr	r3, [r4, #16]
 800493e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004942:	68a3      	ldr	r3, [r4, #8]
 8004944:	4607      	mov	r7, r0
 8004946:	4691      	mov	r9, r2
 8004948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800494c:	f108 0601 	add.w	r6, r8, #1
 8004950:	42b3      	cmp	r3, r6
 8004952:	db0b      	blt.n	800496c <__lshift+0x38>
 8004954:	4638      	mov	r0, r7
 8004956:	f7ff fddd 	bl	8004514 <_Balloc>
 800495a:	4605      	mov	r5, r0
 800495c:	b948      	cbnz	r0, 8004972 <__lshift+0x3e>
 800495e:	4602      	mov	r2, r0
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <__lshift+0xd0>)
 8004962:	4829      	ldr	r0, [pc, #164]	; (8004a08 <__lshift+0xd4>)
 8004964:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004968:	f000 fb8e 	bl	8005088 <__assert_func>
 800496c:	3101      	adds	r1, #1
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	e7ee      	b.n	8004950 <__lshift+0x1c>
 8004972:	2300      	movs	r3, #0
 8004974:	f100 0114 	add.w	r1, r0, #20
 8004978:	f100 0210 	add.w	r2, r0, #16
 800497c:	4618      	mov	r0, r3
 800497e:	4553      	cmp	r3, sl
 8004980:	db33      	blt.n	80049ea <__lshift+0xb6>
 8004982:	6920      	ldr	r0, [r4, #16]
 8004984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004988:	f104 0314 	add.w	r3, r4, #20
 800498c:	f019 091f 	ands.w	r9, r9, #31
 8004990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004998:	d02b      	beq.n	80049f2 <__lshift+0xbe>
 800499a:	f1c9 0e20 	rsb	lr, r9, #32
 800499e:	468a      	mov	sl, r1
 80049a0:	2200      	movs	r2, #0
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	fa00 f009 	lsl.w	r0, r0, r9
 80049a8:	4310      	orrs	r0, r2
 80049aa:	f84a 0b04 	str.w	r0, [sl], #4
 80049ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80049b2:	459c      	cmp	ip, r3
 80049b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80049b8:	d8f3      	bhi.n	80049a2 <__lshift+0x6e>
 80049ba:	ebac 0304 	sub.w	r3, ip, r4
 80049be:	3b15      	subs	r3, #21
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	3304      	adds	r3, #4
 80049c6:	f104 0015 	add.w	r0, r4, #21
 80049ca:	4584      	cmp	ip, r0
 80049cc:	bf38      	it	cc
 80049ce:	2304      	movcc	r3, #4
 80049d0:	50ca      	str	r2, [r1, r3]
 80049d2:	b10a      	cbz	r2, 80049d8 <__lshift+0xa4>
 80049d4:	f108 0602 	add.w	r6, r8, #2
 80049d8:	3e01      	subs	r6, #1
 80049da:	4638      	mov	r0, r7
 80049dc:	612e      	str	r6, [r5, #16]
 80049de:	4621      	mov	r1, r4
 80049e0:	f7ff fdd8 	bl	8004594 <_Bfree>
 80049e4:	4628      	mov	r0, r5
 80049e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80049ee:	3301      	adds	r3, #1
 80049f0:	e7c5      	b.n	800497e <__lshift+0x4a>
 80049f2:	3904      	subs	r1, #4
 80049f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80049fc:	459c      	cmp	ip, r3
 80049fe:	d8f9      	bhi.n	80049f4 <__lshift+0xc0>
 8004a00:	e7ea      	b.n	80049d8 <__lshift+0xa4>
 8004a02:	bf00      	nop
 8004a04:	080057f0 	.word	0x080057f0
 8004a08:	08005801 	.word	0x08005801

08004a0c <__mcmp>:
 8004a0c:	b530      	push	{r4, r5, lr}
 8004a0e:	6902      	ldr	r2, [r0, #16]
 8004a10:	690c      	ldr	r4, [r1, #16]
 8004a12:	1b12      	subs	r2, r2, r4
 8004a14:	d10e      	bne.n	8004a34 <__mcmp+0x28>
 8004a16:	f100 0314 	add.w	r3, r0, #20
 8004a1a:	3114      	adds	r1, #20
 8004a1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004a20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004a24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004a28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004a2c:	42a5      	cmp	r5, r4
 8004a2e:	d003      	beq.n	8004a38 <__mcmp+0x2c>
 8004a30:	d305      	bcc.n	8004a3e <__mcmp+0x32>
 8004a32:	2201      	movs	r2, #1
 8004a34:	4610      	mov	r0, r2
 8004a36:	bd30      	pop	{r4, r5, pc}
 8004a38:	4283      	cmp	r3, r0
 8004a3a:	d3f3      	bcc.n	8004a24 <__mcmp+0x18>
 8004a3c:	e7fa      	b.n	8004a34 <__mcmp+0x28>
 8004a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a42:	e7f7      	b.n	8004a34 <__mcmp+0x28>

08004a44 <__mdiff>:
 8004a44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	460c      	mov	r4, r1
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4690      	mov	r8, r2
 8004a52:	f7ff ffdb 	bl	8004a0c <__mcmp>
 8004a56:	1e05      	subs	r5, r0, #0
 8004a58:	d110      	bne.n	8004a7c <__mdiff+0x38>
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f7ff fd59 	bl	8004514 <_Balloc>
 8004a62:	b930      	cbnz	r0, 8004a72 <__mdiff+0x2e>
 8004a64:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <__mdiff+0x10c>)
 8004a66:	4602      	mov	r2, r0
 8004a68:	f240 2137 	movw	r1, #567	; 0x237
 8004a6c:	4839      	ldr	r0, [pc, #228]	; (8004b54 <__mdiff+0x110>)
 8004a6e:	f000 fb0b 	bl	8005088 <__assert_func>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7c:	bfa4      	itt	ge
 8004a7e:	4643      	movge	r3, r8
 8004a80:	46a0      	movge	r8, r4
 8004a82:	4630      	mov	r0, r6
 8004a84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004a88:	bfa6      	itte	ge
 8004a8a:	461c      	movge	r4, r3
 8004a8c:	2500      	movge	r5, #0
 8004a8e:	2501      	movlt	r5, #1
 8004a90:	f7ff fd40 	bl	8004514 <_Balloc>
 8004a94:	b920      	cbnz	r0, 8004aa0 <__mdiff+0x5c>
 8004a96:	4b2e      	ldr	r3, [pc, #184]	; (8004b50 <__mdiff+0x10c>)
 8004a98:	4602      	mov	r2, r0
 8004a9a:	f240 2145 	movw	r1, #581	; 0x245
 8004a9e:	e7e5      	b.n	8004a6c <__mdiff+0x28>
 8004aa0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004aa4:	6926      	ldr	r6, [r4, #16]
 8004aa6:	60c5      	str	r5, [r0, #12]
 8004aa8:	f104 0914 	add.w	r9, r4, #20
 8004aac:	f108 0514 	add.w	r5, r8, #20
 8004ab0:	f100 0e14 	add.w	lr, r0, #20
 8004ab4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004ab8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004abc:	f108 0210 	add.w	r2, r8, #16
 8004ac0:	46f2      	mov	sl, lr
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ac8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004acc:	fa11 f88b 	uxtah	r8, r1, fp
 8004ad0:	b299      	uxth	r1, r3
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	eba8 0801 	sub.w	r8, r8, r1
 8004ad8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004adc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004ae0:	fa1f f888 	uxth.w	r8, r8
 8004ae4:	1419      	asrs	r1, r3, #16
 8004ae6:	454e      	cmp	r6, r9
 8004ae8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004aec:	f84a 3b04 	str.w	r3, [sl], #4
 8004af0:	d8e8      	bhi.n	8004ac4 <__mdiff+0x80>
 8004af2:	1b33      	subs	r3, r6, r4
 8004af4:	3b15      	subs	r3, #21
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	3304      	adds	r3, #4
 8004afc:	3415      	adds	r4, #21
 8004afe:	42a6      	cmp	r6, r4
 8004b00:	bf38      	it	cc
 8004b02:	2304      	movcc	r3, #4
 8004b04:	441d      	add	r5, r3
 8004b06:	4473      	add	r3, lr
 8004b08:	469e      	mov	lr, r3
 8004b0a:	462e      	mov	r6, r5
 8004b0c:	4566      	cmp	r6, ip
 8004b0e:	d30e      	bcc.n	8004b2e <__mdiff+0xea>
 8004b10:	f10c 0203 	add.w	r2, ip, #3
 8004b14:	1b52      	subs	r2, r2, r5
 8004b16:	f022 0203 	bic.w	r2, r2, #3
 8004b1a:	3d03      	subs	r5, #3
 8004b1c:	45ac      	cmp	ip, r5
 8004b1e:	bf38      	it	cc
 8004b20:	2200      	movcc	r2, #0
 8004b22:	4413      	add	r3, r2
 8004b24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004b28:	b17a      	cbz	r2, 8004b4a <__mdiff+0x106>
 8004b2a:	6107      	str	r7, [r0, #16]
 8004b2c:	e7a4      	b.n	8004a78 <__mdiff+0x34>
 8004b2e:	f856 8b04 	ldr.w	r8, [r6], #4
 8004b32:	fa11 f288 	uxtah	r2, r1, r8
 8004b36:	1414      	asrs	r4, r2, #16
 8004b38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004b42:	f84e 2b04 	str.w	r2, [lr], #4
 8004b46:	1421      	asrs	r1, r4, #16
 8004b48:	e7e0      	b.n	8004b0c <__mdiff+0xc8>
 8004b4a:	3f01      	subs	r7, #1
 8004b4c:	e7ea      	b.n	8004b24 <__mdiff+0xe0>
 8004b4e:	bf00      	nop
 8004b50:	080057f0 	.word	0x080057f0
 8004b54:	08005801 	.word	0x08005801

08004b58 <__d2b>:
 8004b58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b5c:	460f      	mov	r7, r1
 8004b5e:	2101      	movs	r1, #1
 8004b60:	ec59 8b10 	vmov	r8, r9, d0
 8004b64:	4616      	mov	r6, r2
 8004b66:	f7ff fcd5 	bl	8004514 <_Balloc>
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	b930      	cbnz	r0, 8004b7c <__d2b+0x24>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <__d2b+0xac>)
 8004b72:	4825      	ldr	r0, [pc, #148]	; (8004c08 <__d2b+0xb0>)
 8004b74:	f240 310f 	movw	r1, #783	; 0x30f
 8004b78:	f000 fa86 	bl	8005088 <__assert_func>
 8004b7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004b80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b84:	bb2d      	cbnz	r5, 8004bd2 <__d2b+0x7a>
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	f1b8 0300 	subs.w	r3, r8, #0
 8004b8c:	d026      	beq.n	8004bdc <__d2b+0x84>
 8004b8e:	4668      	mov	r0, sp
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	f7ff fd87 	bl	80046a4 <__lo0bits>
 8004b96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004b9a:	b1e8      	cbz	r0, 8004bd8 <__d2b+0x80>
 8004b9c:	f1c0 0320 	rsb	r3, r0, #32
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	40c2      	lsrs	r2, r0
 8004ba8:	6163      	str	r3, [r4, #20]
 8004baa:	9201      	str	r2, [sp, #4]
 8004bac:	9b01      	ldr	r3, [sp, #4]
 8004bae:	61a3      	str	r3, [r4, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2202      	movne	r2, #2
 8004bb6:	2201      	moveq	r2, #1
 8004bb8:	6122      	str	r2, [r4, #16]
 8004bba:	b1bd      	cbz	r5, 8004bec <__d2b+0x94>
 8004bbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004bc0:	4405      	add	r5, r0
 8004bc2:	603d      	str	r5, [r7, #0]
 8004bc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004bc8:	6030      	str	r0, [r6, #0]
 8004bca:	4620      	mov	r0, r4
 8004bcc:	b003      	add	sp, #12
 8004bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd6:	e7d6      	b.n	8004b86 <__d2b+0x2e>
 8004bd8:	6161      	str	r1, [r4, #20]
 8004bda:	e7e7      	b.n	8004bac <__d2b+0x54>
 8004bdc:	a801      	add	r0, sp, #4
 8004bde:	f7ff fd61 	bl	80046a4 <__lo0bits>
 8004be2:	9b01      	ldr	r3, [sp, #4]
 8004be4:	6163      	str	r3, [r4, #20]
 8004be6:	3020      	adds	r0, #32
 8004be8:	2201      	movs	r2, #1
 8004bea:	e7e5      	b.n	8004bb8 <__d2b+0x60>
 8004bec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004bf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004bf4:	6038      	str	r0, [r7, #0]
 8004bf6:	6918      	ldr	r0, [r3, #16]
 8004bf8:	f7ff fd34 	bl	8004664 <__hi0bits>
 8004bfc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004c00:	e7e2      	b.n	8004bc8 <__d2b+0x70>
 8004c02:	bf00      	nop
 8004c04:	080057f0 	.word	0x080057f0
 8004c08:	08005801 	.word	0x08005801

08004c0c <__ssputs_r>:
 8004c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	688e      	ldr	r6, [r1, #8]
 8004c12:	461f      	mov	r7, r3
 8004c14:	42be      	cmp	r6, r7
 8004c16:	680b      	ldr	r3, [r1, #0]
 8004c18:	4682      	mov	sl, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	4690      	mov	r8, r2
 8004c1e:	d82c      	bhi.n	8004c7a <__ssputs_r+0x6e>
 8004c20:	898a      	ldrh	r2, [r1, #12]
 8004c22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c26:	d026      	beq.n	8004c76 <__ssputs_r+0x6a>
 8004c28:	6965      	ldr	r5, [r4, #20]
 8004c2a:	6909      	ldr	r1, [r1, #16]
 8004c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c30:	eba3 0901 	sub.w	r9, r3, r1
 8004c34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c38:	1c7b      	adds	r3, r7, #1
 8004c3a:	444b      	add	r3, r9
 8004c3c:	106d      	asrs	r5, r5, #1
 8004c3e:	429d      	cmp	r5, r3
 8004c40:	bf38      	it	cc
 8004c42:	461d      	movcc	r5, r3
 8004c44:	0553      	lsls	r3, r2, #21
 8004c46:	d527      	bpl.n	8004c98 <__ssputs_r+0x8c>
 8004c48:	4629      	mov	r1, r5
 8004c4a:	f7ff fbd7 	bl	80043fc <_malloc_r>
 8004c4e:	4606      	mov	r6, r0
 8004c50:	b360      	cbz	r0, 8004cac <__ssputs_r+0xa0>
 8004c52:	6921      	ldr	r1, [r4, #16]
 8004c54:	464a      	mov	r2, r9
 8004c56:	f000 fa09 	bl	800506c <memcpy>
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	6126      	str	r6, [r4, #16]
 8004c68:	6165      	str	r5, [r4, #20]
 8004c6a:	444e      	add	r6, r9
 8004c6c:	eba5 0509 	sub.w	r5, r5, r9
 8004c70:	6026      	str	r6, [r4, #0]
 8004c72:	60a5      	str	r5, [r4, #8]
 8004c74:	463e      	mov	r6, r7
 8004c76:	42be      	cmp	r6, r7
 8004c78:	d900      	bls.n	8004c7c <__ssputs_r+0x70>
 8004c7a:	463e      	mov	r6, r7
 8004c7c:	6820      	ldr	r0, [r4, #0]
 8004c7e:	4632      	mov	r2, r6
 8004c80:	4641      	mov	r1, r8
 8004c82:	f000 f9c9 	bl	8005018 <memmove>
 8004c86:	68a3      	ldr	r3, [r4, #8]
 8004c88:	1b9b      	subs	r3, r3, r6
 8004c8a:	60a3      	str	r3, [r4, #8]
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	4433      	add	r3, r6
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	2000      	movs	r0, #0
 8004c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c98:	462a      	mov	r2, r5
 8004c9a:	f000 fa3b 	bl	8005114 <_realloc_r>
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d1e0      	bne.n	8004c66 <__ssputs_r+0x5a>
 8004ca4:	6921      	ldr	r1, [r4, #16]
 8004ca6:	4650      	mov	r0, sl
 8004ca8:	f7ff fb34 	bl	8004314 <_free_r>
 8004cac:	230c      	movs	r3, #12
 8004cae:	f8ca 3000 	str.w	r3, [sl]
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb8:	81a3      	strh	r3, [r4, #12]
 8004cba:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbe:	e7e9      	b.n	8004c94 <__ssputs_r+0x88>

08004cc0 <_svfiprintf_r>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	4698      	mov	r8, r3
 8004cc6:	898b      	ldrh	r3, [r1, #12]
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	b09d      	sub	sp, #116	; 0x74
 8004ccc:	4607      	mov	r7, r0
 8004cce:	460d      	mov	r5, r1
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	d50e      	bpl.n	8004cf2 <_svfiprintf_r+0x32>
 8004cd4:	690b      	ldr	r3, [r1, #16]
 8004cd6:	b963      	cbnz	r3, 8004cf2 <_svfiprintf_r+0x32>
 8004cd8:	2140      	movs	r1, #64	; 0x40
 8004cda:	f7ff fb8f 	bl	80043fc <_malloc_r>
 8004cde:	6028      	str	r0, [r5, #0]
 8004ce0:	6128      	str	r0, [r5, #16]
 8004ce2:	b920      	cbnz	r0, 8004cee <_svfiprintf_r+0x2e>
 8004ce4:	230c      	movs	r3, #12
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	e0d0      	b.n	8004e90 <_svfiprintf_r+0x1d0>
 8004cee:	2340      	movs	r3, #64	; 0x40
 8004cf0:	616b      	str	r3, [r5, #20]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d00:	2330      	movs	r3, #48	; 0x30
 8004d02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ea8 <_svfiprintf_r+0x1e8>
 8004d06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d0a:	f04f 0901 	mov.w	r9, #1
 8004d0e:	4623      	mov	r3, r4
 8004d10:	469a      	mov	sl, r3
 8004d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d16:	b10a      	cbz	r2, 8004d1c <_svfiprintf_r+0x5c>
 8004d18:	2a25      	cmp	r2, #37	; 0x25
 8004d1a:	d1f9      	bne.n	8004d10 <_svfiprintf_r+0x50>
 8004d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d20:	d00b      	beq.n	8004d3a <_svfiprintf_r+0x7a>
 8004d22:	465b      	mov	r3, fp
 8004d24:	4622      	mov	r2, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff ff6f 	bl	8004c0c <__ssputs_r>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	f000 80a9 	beq.w	8004e86 <_svfiprintf_r+0x1c6>
 8004d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d36:	445a      	add	r2, fp
 8004d38:	9209      	str	r2, [sp, #36]	; 0x24
 8004d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80a1 	beq.w	8004e86 <_svfiprintf_r+0x1c6>
 8004d44:	2300      	movs	r3, #0
 8004d46:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d4e:	f10a 0a01 	add.w	sl, sl, #1
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	9307      	str	r3, [sp, #28]
 8004d56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d5a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d5c:	4654      	mov	r4, sl
 8004d5e:	2205      	movs	r2, #5
 8004d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d64:	4850      	ldr	r0, [pc, #320]	; (8004ea8 <_svfiprintf_r+0x1e8>)
 8004d66:	f7fb fa53 	bl	8000210 <memchr>
 8004d6a:	9a04      	ldr	r2, [sp, #16]
 8004d6c:	b9d8      	cbnz	r0, 8004da6 <_svfiprintf_r+0xe6>
 8004d6e:	06d0      	lsls	r0, r2, #27
 8004d70:	bf44      	itt	mi
 8004d72:	2320      	movmi	r3, #32
 8004d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d78:	0711      	lsls	r1, r2, #28
 8004d7a:	bf44      	itt	mi
 8004d7c:	232b      	movmi	r3, #43	; 0x2b
 8004d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d82:	f89a 3000 	ldrb.w	r3, [sl]
 8004d86:	2b2a      	cmp	r3, #42	; 0x2a
 8004d88:	d015      	beq.n	8004db6 <_svfiprintf_r+0xf6>
 8004d8a:	9a07      	ldr	r2, [sp, #28]
 8004d8c:	4654      	mov	r4, sl
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f04f 0c0a 	mov.w	ip, #10
 8004d94:	4621      	mov	r1, r4
 8004d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d9a:	3b30      	subs	r3, #48	; 0x30
 8004d9c:	2b09      	cmp	r3, #9
 8004d9e:	d94d      	bls.n	8004e3c <_svfiprintf_r+0x17c>
 8004da0:	b1b0      	cbz	r0, 8004dd0 <_svfiprintf_r+0x110>
 8004da2:	9207      	str	r2, [sp, #28]
 8004da4:	e014      	b.n	8004dd0 <_svfiprintf_r+0x110>
 8004da6:	eba0 0308 	sub.w	r3, r0, r8
 8004daa:	fa09 f303 	lsl.w	r3, r9, r3
 8004dae:	4313      	orrs	r3, r2
 8004db0:	9304      	str	r3, [sp, #16]
 8004db2:	46a2      	mov	sl, r4
 8004db4:	e7d2      	b.n	8004d5c <_svfiprintf_r+0x9c>
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	1d19      	adds	r1, r3, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	9103      	str	r1, [sp, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfbb      	ittet	lt
 8004dc2:	425b      	neglt	r3, r3
 8004dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc8:	9307      	strge	r3, [sp, #28]
 8004dca:	9307      	strlt	r3, [sp, #28]
 8004dcc:	bfb8      	it	lt
 8004dce:	9204      	strlt	r2, [sp, #16]
 8004dd0:	7823      	ldrb	r3, [r4, #0]
 8004dd2:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd4:	d10c      	bne.n	8004df0 <_svfiprintf_r+0x130>
 8004dd6:	7863      	ldrb	r3, [r4, #1]
 8004dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dda:	d134      	bne.n	8004e46 <_svfiprintf_r+0x186>
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	9203      	str	r2, [sp, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bfb8      	it	lt
 8004de8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dec:	3402      	adds	r4, #2
 8004dee:	9305      	str	r3, [sp, #20]
 8004df0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004eb8 <_svfiprintf_r+0x1f8>
 8004df4:	7821      	ldrb	r1, [r4, #0]
 8004df6:	2203      	movs	r2, #3
 8004df8:	4650      	mov	r0, sl
 8004dfa:	f7fb fa09 	bl	8000210 <memchr>
 8004dfe:	b138      	cbz	r0, 8004e10 <_svfiprintf_r+0x150>
 8004e00:	9b04      	ldr	r3, [sp, #16]
 8004e02:	eba0 000a 	sub.w	r0, r0, sl
 8004e06:	2240      	movs	r2, #64	; 0x40
 8004e08:	4082      	lsls	r2, r0
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	3401      	adds	r4, #1
 8004e0e:	9304      	str	r3, [sp, #16]
 8004e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e14:	4825      	ldr	r0, [pc, #148]	; (8004eac <_svfiprintf_r+0x1ec>)
 8004e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e1a:	2206      	movs	r2, #6
 8004e1c:	f7fb f9f8 	bl	8000210 <memchr>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d038      	beq.n	8004e96 <_svfiprintf_r+0x1d6>
 8004e24:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <_svfiprintf_r+0x1f0>)
 8004e26:	bb1b      	cbnz	r3, 8004e70 <_svfiprintf_r+0x1b0>
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	3307      	adds	r3, #7
 8004e2c:	f023 0307 	bic.w	r3, r3, #7
 8004e30:	3308      	adds	r3, #8
 8004e32:	9303      	str	r3, [sp, #12]
 8004e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e36:	4433      	add	r3, r6
 8004e38:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3a:	e768      	b.n	8004d0e <_svfiprintf_r+0x4e>
 8004e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e40:	460c      	mov	r4, r1
 8004e42:	2001      	movs	r0, #1
 8004e44:	e7a6      	b.n	8004d94 <_svfiprintf_r+0xd4>
 8004e46:	2300      	movs	r3, #0
 8004e48:	3401      	adds	r4, #1
 8004e4a:	9305      	str	r3, [sp, #20]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f04f 0c0a 	mov.w	ip, #10
 8004e52:	4620      	mov	r0, r4
 8004e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e58:	3a30      	subs	r2, #48	; 0x30
 8004e5a:	2a09      	cmp	r2, #9
 8004e5c:	d903      	bls.n	8004e66 <_svfiprintf_r+0x1a6>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0c6      	beq.n	8004df0 <_svfiprintf_r+0x130>
 8004e62:	9105      	str	r1, [sp, #20]
 8004e64:	e7c4      	b.n	8004df0 <_svfiprintf_r+0x130>
 8004e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e7f0      	b.n	8004e52 <_svfiprintf_r+0x192>
 8004e70:	ab03      	add	r3, sp, #12
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	462a      	mov	r2, r5
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <_svfiprintf_r+0x1f4>)
 8004e78:	a904      	add	r1, sp, #16
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	f7fd fe62 	bl	8002b44 <_printf_float>
 8004e80:	1c42      	adds	r2, r0, #1
 8004e82:	4606      	mov	r6, r0
 8004e84:	d1d6      	bne.n	8004e34 <_svfiprintf_r+0x174>
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	065b      	lsls	r3, r3, #25
 8004e8a:	f53f af2d 	bmi.w	8004ce8 <_svfiprintf_r+0x28>
 8004e8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e90:	b01d      	add	sp, #116	; 0x74
 8004e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e96:	ab03      	add	r3, sp, #12
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	462a      	mov	r2, r5
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <_svfiprintf_r+0x1f4>)
 8004e9e:	a904      	add	r1, sp, #16
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	f7fe f8f3 	bl	800308c <_printf_i>
 8004ea6:	e7eb      	b.n	8004e80 <_svfiprintf_r+0x1c0>
 8004ea8:	0800595c 	.word	0x0800595c
 8004eac:	08005966 	.word	0x08005966
 8004eb0:	08002b45 	.word	0x08002b45
 8004eb4:	08004c0d 	.word	0x08004c0d
 8004eb8:	08005962 	.word	0x08005962

08004ebc <__sflush_r>:
 8004ebc:	898a      	ldrh	r2, [r1, #12]
 8004ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec2:	4605      	mov	r5, r0
 8004ec4:	0710      	lsls	r0, r2, #28
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	d458      	bmi.n	8004f7c <__sflush_r+0xc0>
 8004eca:	684b      	ldr	r3, [r1, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dc05      	bgt.n	8004edc <__sflush_r+0x20>
 8004ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	dc02      	bgt.n	8004edc <__sflush_r+0x20>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	d0f9      	beq.n	8004ed6 <__sflush_r+0x1a>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ee8:	682f      	ldr	r7, [r5, #0]
 8004eea:	6a21      	ldr	r1, [r4, #32]
 8004eec:	602b      	str	r3, [r5, #0]
 8004eee:	d032      	beq.n	8004f56 <__sflush_r+0x9a>
 8004ef0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	075a      	lsls	r2, r3, #29
 8004ef6:	d505      	bpl.n	8004f04 <__sflush_r+0x48>
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	1ac0      	subs	r0, r0, r3
 8004efc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004efe:	b10b      	cbz	r3, 8004f04 <__sflush_r+0x48>
 8004f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f02:	1ac0      	subs	r0, r0, r3
 8004f04:	2300      	movs	r3, #0
 8004f06:	4602      	mov	r2, r0
 8004f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f0a:	6a21      	ldr	r1, [r4, #32]
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b0      	blx	r6
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	d106      	bne.n	8004f24 <__sflush_r+0x68>
 8004f16:	6829      	ldr	r1, [r5, #0]
 8004f18:	291d      	cmp	r1, #29
 8004f1a:	d82b      	bhi.n	8004f74 <__sflush_r+0xb8>
 8004f1c:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <__sflush_r+0x108>)
 8004f1e:	410a      	asrs	r2, r1
 8004f20:	07d6      	lsls	r6, r2, #31
 8004f22:	d427      	bmi.n	8004f74 <__sflush_r+0xb8>
 8004f24:	2200      	movs	r2, #0
 8004f26:	6062      	str	r2, [r4, #4]
 8004f28:	04d9      	lsls	r1, r3, #19
 8004f2a:	6922      	ldr	r2, [r4, #16]
 8004f2c:	6022      	str	r2, [r4, #0]
 8004f2e:	d504      	bpl.n	8004f3a <__sflush_r+0x7e>
 8004f30:	1c42      	adds	r2, r0, #1
 8004f32:	d101      	bne.n	8004f38 <__sflush_r+0x7c>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b903      	cbnz	r3, 8004f3a <__sflush_r+0x7e>
 8004f38:	6560      	str	r0, [r4, #84]	; 0x54
 8004f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3c:	602f      	str	r7, [r5, #0]
 8004f3e:	2900      	cmp	r1, #0
 8004f40:	d0c9      	beq.n	8004ed6 <__sflush_r+0x1a>
 8004f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f46:	4299      	cmp	r1, r3
 8004f48:	d002      	beq.n	8004f50 <__sflush_r+0x94>
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f7ff f9e2 	bl	8004314 <_free_r>
 8004f50:	2000      	movs	r0, #0
 8004f52:	6360      	str	r0, [r4, #52]	; 0x34
 8004f54:	e7c0      	b.n	8004ed8 <__sflush_r+0x1c>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4628      	mov	r0, r5
 8004f5a:	47b0      	blx	r6
 8004f5c:	1c41      	adds	r1, r0, #1
 8004f5e:	d1c8      	bne.n	8004ef2 <__sflush_r+0x36>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0c5      	beq.n	8004ef2 <__sflush_r+0x36>
 8004f66:	2b1d      	cmp	r3, #29
 8004f68:	d001      	beq.n	8004f6e <__sflush_r+0xb2>
 8004f6a:	2b16      	cmp	r3, #22
 8004f6c:	d101      	bne.n	8004f72 <__sflush_r+0xb6>
 8004f6e:	602f      	str	r7, [r5, #0]
 8004f70:	e7b1      	b.n	8004ed6 <__sflush_r+0x1a>
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	e7ad      	b.n	8004ed8 <__sflush_r+0x1c>
 8004f7c:	690f      	ldr	r7, [r1, #16]
 8004f7e:	2f00      	cmp	r7, #0
 8004f80:	d0a9      	beq.n	8004ed6 <__sflush_r+0x1a>
 8004f82:	0793      	lsls	r3, r2, #30
 8004f84:	680e      	ldr	r6, [r1, #0]
 8004f86:	bf08      	it	eq
 8004f88:	694b      	ldreq	r3, [r1, #20]
 8004f8a:	600f      	str	r7, [r1, #0]
 8004f8c:	bf18      	it	ne
 8004f8e:	2300      	movne	r3, #0
 8004f90:	eba6 0807 	sub.w	r8, r6, r7
 8004f94:	608b      	str	r3, [r1, #8]
 8004f96:	f1b8 0f00 	cmp.w	r8, #0
 8004f9a:	dd9c      	ble.n	8004ed6 <__sflush_r+0x1a>
 8004f9c:	6a21      	ldr	r1, [r4, #32]
 8004f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fa0:	4643      	mov	r3, r8
 8004fa2:	463a      	mov	r2, r7
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b0      	blx	r6
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	dc06      	bgt.n	8004fba <__sflush_r+0xfe>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	e78e      	b.n	8004ed8 <__sflush_r+0x1c>
 8004fba:	4407      	add	r7, r0
 8004fbc:	eba8 0800 	sub.w	r8, r8, r0
 8004fc0:	e7e9      	b.n	8004f96 <__sflush_r+0xda>
 8004fc2:	bf00      	nop
 8004fc4:	dfbffffe 	.word	0xdfbffffe

08004fc8 <_fflush_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	4605      	mov	r5, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	b913      	cbnz	r3, 8004fd8 <_fflush_r+0x10>
 8004fd2:	2500      	movs	r5, #0
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	b118      	cbz	r0, 8004fe2 <_fflush_r+0x1a>
 8004fda:	6a03      	ldr	r3, [r0, #32]
 8004fdc:	b90b      	cbnz	r3, 8004fe2 <_fflush_r+0x1a>
 8004fde:	f7fe fa03 	bl	80033e8 <__sinit>
 8004fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f3      	beq.n	8004fd2 <_fflush_r+0xa>
 8004fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fec:	07d0      	lsls	r0, r2, #31
 8004fee:	d404      	bmi.n	8004ffa <_fflush_r+0x32>
 8004ff0:	0599      	lsls	r1, r3, #22
 8004ff2:	d402      	bmi.n	8004ffa <_fflush_r+0x32>
 8004ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff6:	f7fe fb0e 	bl	8003616 <__retarget_lock_acquire_recursive>
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	f7ff ff5d 	bl	8004ebc <__sflush_r>
 8005002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005004:	07da      	lsls	r2, r3, #31
 8005006:	4605      	mov	r5, r0
 8005008:	d4e4      	bmi.n	8004fd4 <_fflush_r+0xc>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	059b      	lsls	r3, r3, #22
 800500e:	d4e1      	bmi.n	8004fd4 <_fflush_r+0xc>
 8005010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005012:	f7fe fb01 	bl	8003618 <__retarget_lock_release_recursive>
 8005016:	e7dd      	b.n	8004fd4 <_fflush_r+0xc>

08005018 <memmove>:
 8005018:	4288      	cmp	r0, r1
 800501a:	b510      	push	{r4, lr}
 800501c:	eb01 0402 	add.w	r4, r1, r2
 8005020:	d902      	bls.n	8005028 <memmove+0x10>
 8005022:	4284      	cmp	r4, r0
 8005024:	4623      	mov	r3, r4
 8005026:	d807      	bhi.n	8005038 <memmove+0x20>
 8005028:	1e43      	subs	r3, r0, #1
 800502a:	42a1      	cmp	r1, r4
 800502c:	d008      	beq.n	8005040 <memmove+0x28>
 800502e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005036:	e7f8      	b.n	800502a <memmove+0x12>
 8005038:	4402      	add	r2, r0
 800503a:	4601      	mov	r1, r0
 800503c:	428a      	cmp	r2, r1
 800503e:	d100      	bne.n	8005042 <memmove+0x2a>
 8005040:	bd10      	pop	{r4, pc}
 8005042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800504a:	e7f7      	b.n	800503c <memmove+0x24>

0800504c <_sbrk_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d06      	ldr	r5, [pc, #24]	; (8005068 <_sbrk_r+0x1c>)
 8005050:	2300      	movs	r3, #0
 8005052:	4604      	mov	r4, r0
 8005054:	4608      	mov	r0, r1
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	f7fc fb84 	bl	8001764 <_sbrk>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_sbrk_r+0x1a>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_sbrk_r+0x1a>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20000354 	.word	0x20000354

0800506c <memcpy>:
 800506c:	440a      	add	r2, r1
 800506e:	4291      	cmp	r1, r2
 8005070:	f100 33ff 	add.w	r3, r0, #4294967295
 8005074:	d100      	bne.n	8005078 <memcpy+0xc>
 8005076:	4770      	bx	lr
 8005078:	b510      	push	{r4, lr}
 800507a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005082:	4291      	cmp	r1, r2
 8005084:	d1f9      	bne.n	800507a <memcpy+0xe>
 8005086:	bd10      	pop	{r4, pc}

08005088 <__assert_func>:
 8005088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800508a:	4614      	mov	r4, r2
 800508c:	461a      	mov	r2, r3
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <__assert_func+0x2c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4605      	mov	r5, r0
 8005094:	68d8      	ldr	r0, [r3, #12]
 8005096:	b14c      	cbz	r4, 80050ac <__assert_func+0x24>
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <__assert_func+0x30>)
 800509a:	9100      	str	r1, [sp, #0]
 800509c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050a0:	4906      	ldr	r1, [pc, #24]	; (80050bc <__assert_func+0x34>)
 80050a2:	462b      	mov	r3, r5
 80050a4:	f000 f872 	bl	800518c <fiprintf>
 80050a8:	f000 f882 	bl	80051b0 <abort>
 80050ac:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <__assert_func+0x38>)
 80050ae:	461c      	mov	r4, r3
 80050b0:	e7f3      	b.n	800509a <__assert_func+0x12>
 80050b2:	bf00      	nop
 80050b4:	20000064 	.word	0x20000064
 80050b8:	08005977 	.word	0x08005977
 80050bc:	08005984 	.word	0x08005984
 80050c0:	080059b2 	.word	0x080059b2

080050c4 <_calloc_r>:
 80050c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050c6:	fba1 2402 	umull	r2, r4, r1, r2
 80050ca:	b94c      	cbnz	r4, 80050e0 <_calloc_r+0x1c>
 80050cc:	4611      	mov	r1, r2
 80050ce:	9201      	str	r2, [sp, #4]
 80050d0:	f7ff f994 	bl	80043fc <_malloc_r>
 80050d4:	9a01      	ldr	r2, [sp, #4]
 80050d6:	4605      	mov	r5, r0
 80050d8:	b930      	cbnz	r0, 80050e8 <_calloc_r+0x24>
 80050da:	4628      	mov	r0, r5
 80050dc:	b003      	add	sp, #12
 80050de:	bd30      	pop	{r4, r5, pc}
 80050e0:	220c      	movs	r2, #12
 80050e2:	6002      	str	r2, [r0, #0]
 80050e4:	2500      	movs	r5, #0
 80050e6:	e7f8      	b.n	80050da <_calloc_r+0x16>
 80050e8:	4621      	mov	r1, r4
 80050ea:	f7fe fa16 	bl	800351a <memset>
 80050ee:	e7f4      	b.n	80050da <_calloc_r+0x16>

080050f0 <__ascii_mbtowc>:
 80050f0:	b082      	sub	sp, #8
 80050f2:	b901      	cbnz	r1, 80050f6 <__ascii_mbtowc+0x6>
 80050f4:	a901      	add	r1, sp, #4
 80050f6:	b142      	cbz	r2, 800510a <__ascii_mbtowc+0x1a>
 80050f8:	b14b      	cbz	r3, 800510e <__ascii_mbtowc+0x1e>
 80050fa:	7813      	ldrb	r3, [r2, #0]
 80050fc:	600b      	str	r3, [r1, #0]
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	1e10      	subs	r0, r2, #0
 8005102:	bf18      	it	ne
 8005104:	2001      	movne	r0, #1
 8005106:	b002      	add	sp, #8
 8005108:	4770      	bx	lr
 800510a:	4610      	mov	r0, r2
 800510c:	e7fb      	b.n	8005106 <__ascii_mbtowc+0x16>
 800510e:	f06f 0001 	mvn.w	r0, #1
 8005112:	e7f8      	b.n	8005106 <__ascii_mbtowc+0x16>

08005114 <_realloc_r>:
 8005114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005118:	4680      	mov	r8, r0
 800511a:	4614      	mov	r4, r2
 800511c:	460e      	mov	r6, r1
 800511e:	b921      	cbnz	r1, 800512a <_realloc_r+0x16>
 8005120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005124:	4611      	mov	r1, r2
 8005126:	f7ff b969 	b.w	80043fc <_malloc_r>
 800512a:	b92a      	cbnz	r2, 8005138 <_realloc_r+0x24>
 800512c:	f7ff f8f2 	bl	8004314 <_free_r>
 8005130:	4625      	mov	r5, r4
 8005132:	4628      	mov	r0, r5
 8005134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005138:	f000 f841 	bl	80051be <_malloc_usable_size_r>
 800513c:	4284      	cmp	r4, r0
 800513e:	4607      	mov	r7, r0
 8005140:	d802      	bhi.n	8005148 <_realloc_r+0x34>
 8005142:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005146:	d812      	bhi.n	800516e <_realloc_r+0x5a>
 8005148:	4621      	mov	r1, r4
 800514a:	4640      	mov	r0, r8
 800514c:	f7ff f956 	bl	80043fc <_malloc_r>
 8005150:	4605      	mov	r5, r0
 8005152:	2800      	cmp	r0, #0
 8005154:	d0ed      	beq.n	8005132 <_realloc_r+0x1e>
 8005156:	42bc      	cmp	r4, r7
 8005158:	4622      	mov	r2, r4
 800515a:	4631      	mov	r1, r6
 800515c:	bf28      	it	cs
 800515e:	463a      	movcs	r2, r7
 8005160:	f7ff ff84 	bl	800506c <memcpy>
 8005164:	4631      	mov	r1, r6
 8005166:	4640      	mov	r0, r8
 8005168:	f7ff f8d4 	bl	8004314 <_free_r>
 800516c:	e7e1      	b.n	8005132 <_realloc_r+0x1e>
 800516e:	4635      	mov	r5, r6
 8005170:	e7df      	b.n	8005132 <_realloc_r+0x1e>

08005172 <__ascii_wctomb>:
 8005172:	b149      	cbz	r1, 8005188 <__ascii_wctomb+0x16>
 8005174:	2aff      	cmp	r2, #255	; 0xff
 8005176:	bf85      	ittet	hi
 8005178:	238a      	movhi	r3, #138	; 0x8a
 800517a:	6003      	strhi	r3, [r0, #0]
 800517c:	700a      	strbls	r2, [r1, #0]
 800517e:	f04f 30ff 	movhi.w	r0, #4294967295
 8005182:	bf98      	it	ls
 8005184:	2001      	movls	r0, #1
 8005186:	4770      	bx	lr
 8005188:	4608      	mov	r0, r1
 800518a:	4770      	bx	lr

0800518c <fiprintf>:
 800518c:	b40e      	push	{r1, r2, r3}
 800518e:	b503      	push	{r0, r1, lr}
 8005190:	4601      	mov	r1, r0
 8005192:	ab03      	add	r3, sp, #12
 8005194:	4805      	ldr	r0, [pc, #20]	; (80051ac <fiprintf+0x20>)
 8005196:	f853 2b04 	ldr.w	r2, [r3], #4
 800519a:	6800      	ldr	r0, [r0, #0]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	f000 f83f 	bl	8005220 <_vfiprintf_r>
 80051a2:	b002      	add	sp, #8
 80051a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a8:	b003      	add	sp, #12
 80051aa:	4770      	bx	lr
 80051ac:	20000064 	.word	0x20000064

080051b0 <abort>:
 80051b0:	b508      	push	{r3, lr}
 80051b2:	2006      	movs	r0, #6
 80051b4:	f000 fa0c 	bl	80055d0 <raise>
 80051b8:	2001      	movs	r0, #1
 80051ba:	f7fc fa5b 	bl	8001674 <_exit>

080051be <_malloc_usable_size_r>:
 80051be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c2:	1f18      	subs	r0, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bfbc      	itt	lt
 80051c8:	580b      	ldrlt	r3, [r1, r0]
 80051ca:	18c0      	addlt	r0, r0, r3
 80051cc:	4770      	bx	lr

080051ce <__sfputc_r>:
 80051ce:	6893      	ldr	r3, [r2, #8]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	b410      	push	{r4}
 80051d6:	6093      	str	r3, [r2, #8]
 80051d8:	da08      	bge.n	80051ec <__sfputc_r+0x1e>
 80051da:	6994      	ldr	r4, [r2, #24]
 80051dc:	42a3      	cmp	r3, r4
 80051de:	db01      	blt.n	80051e4 <__sfputc_r+0x16>
 80051e0:	290a      	cmp	r1, #10
 80051e2:	d103      	bne.n	80051ec <__sfputc_r+0x1e>
 80051e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051e8:	f000 b934 	b.w	8005454 <__swbuf_r>
 80051ec:	6813      	ldr	r3, [r2, #0]
 80051ee:	1c58      	adds	r0, r3, #1
 80051f0:	6010      	str	r0, [r2, #0]
 80051f2:	7019      	strb	r1, [r3, #0]
 80051f4:	4608      	mov	r0, r1
 80051f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <__sfputs_r>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	4606      	mov	r6, r0
 8005200:	460f      	mov	r7, r1
 8005202:	4614      	mov	r4, r2
 8005204:	18d5      	adds	r5, r2, r3
 8005206:	42ac      	cmp	r4, r5
 8005208:	d101      	bne.n	800520e <__sfputs_r+0x12>
 800520a:	2000      	movs	r0, #0
 800520c:	e007      	b.n	800521e <__sfputs_r+0x22>
 800520e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005212:	463a      	mov	r2, r7
 8005214:	4630      	mov	r0, r6
 8005216:	f7ff ffda 	bl	80051ce <__sfputc_r>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d1f3      	bne.n	8005206 <__sfputs_r+0xa>
 800521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005220 <_vfiprintf_r>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	460d      	mov	r5, r1
 8005226:	b09d      	sub	sp, #116	; 0x74
 8005228:	4614      	mov	r4, r2
 800522a:	4698      	mov	r8, r3
 800522c:	4606      	mov	r6, r0
 800522e:	b118      	cbz	r0, 8005238 <_vfiprintf_r+0x18>
 8005230:	6a03      	ldr	r3, [r0, #32]
 8005232:	b90b      	cbnz	r3, 8005238 <_vfiprintf_r+0x18>
 8005234:	f7fe f8d8 	bl	80033e8 <__sinit>
 8005238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800523a:	07d9      	lsls	r1, r3, #31
 800523c:	d405      	bmi.n	800524a <_vfiprintf_r+0x2a>
 800523e:	89ab      	ldrh	r3, [r5, #12]
 8005240:	059a      	lsls	r2, r3, #22
 8005242:	d402      	bmi.n	800524a <_vfiprintf_r+0x2a>
 8005244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005246:	f7fe f9e6 	bl	8003616 <__retarget_lock_acquire_recursive>
 800524a:	89ab      	ldrh	r3, [r5, #12]
 800524c:	071b      	lsls	r3, r3, #28
 800524e:	d501      	bpl.n	8005254 <_vfiprintf_r+0x34>
 8005250:	692b      	ldr	r3, [r5, #16]
 8005252:	b99b      	cbnz	r3, 800527c <_vfiprintf_r+0x5c>
 8005254:	4629      	mov	r1, r5
 8005256:	4630      	mov	r0, r6
 8005258:	f000 f93a 	bl	80054d0 <__swsetup_r>
 800525c:	b170      	cbz	r0, 800527c <_vfiprintf_r+0x5c>
 800525e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005260:	07dc      	lsls	r4, r3, #31
 8005262:	d504      	bpl.n	800526e <_vfiprintf_r+0x4e>
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	b01d      	add	sp, #116	; 0x74
 800526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	0598      	lsls	r0, r3, #22
 8005272:	d4f7      	bmi.n	8005264 <_vfiprintf_r+0x44>
 8005274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005276:	f7fe f9cf 	bl	8003618 <__retarget_lock_release_recursive>
 800527a:	e7f3      	b.n	8005264 <_vfiprintf_r+0x44>
 800527c:	2300      	movs	r3, #0
 800527e:	9309      	str	r3, [sp, #36]	; 0x24
 8005280:	2320      	movs	r3, #32
 8005282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005286:	f8cd 800c 	str.w	r8, [sp, #12]
 800528a:	2330      	movs	r3, #48	; 0x30
 800528c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005440 <_vfiprintf_r+0x220>
 8005290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005294:	f04f 0901 	mov.w	r9, #1
 8005298:	4623      	mov	r3, r4
 800529a:	469a      	mov	sl, r3
 800529c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052a0:	b10a      	cbz	r2, 80052a6 <_vfiprintf_r+0x86>
 80052a2:	2a25      	cmp	r2, #37	; 0x25
 80052a4:	d1f9      	bne.n	800529a <_vfiprintf_r+0x7a>
 80052a6:	ebba 0b04 	subs.w	fp, sl, r4
 80052aa:	d00b      	beq.n	80052c4 <_vfiprintf_r+0xa4>
 80052ac:	465b      	mov	r3, fp
 80052ae:	4622      	mov	r2, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff ffa2 	bl	80051fc <__sfputs_r>
 80052b8:	3001      	adds	r0, #1
 80052ba:	f000 80a9 	beq.w	8005410 <_vfiprintf_r+0x1f0>
 80052be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052c0:	445a      	add	r2, fp
 80052c2:	9209      	str	r2, [sp, #36]	; 0x24
 80052c4:	f89a 3000 	ldrb.w	r3, [sl]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80a1 	beq.w	8005410 <_vfiprintf_r+0x1f0>
 80052ce:	2300      	movs	r3, #0
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295
 80052d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d8:	f10a 0a01 	add.w	sl, sl, #1
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	9307      	str	r3, [sp, #28]
 80052e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052e4:	931a      	str	r3, [sp, #104]	; 0x68
 80052e6:	4654      	mov	r4, sl
 80052e8:	2205      	movs	r2, #5
 80052ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ee:	4854      	ldr	r0, [pc, #336]	; (8005440 <_vfiprintf_r+0x220>)
 80052f0:	f7fa ff8e 	bl	8000210 <memchr>
 80052f4:	9a04      	ldr	r2, [sp, #16]
 80052f6:	b9d8      	cbnz	r0, 8005330 <_vfiprintf_r+0x110>
 80052f8:	06d1      	lsls	r1, r2, #27
 80052fa:	bf44      	itt	mi
 80052fc:	2320      	movmi	r3, #32
 80052fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005302:	0713      	lsls	r3, r2, #28
 8005304:	bf44      	itt	mi
 8005306:	232b      	movmi	r3, #43	; 0x2b
 8005308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800530c:	f89a 3000 	ldrb.w	r3, [sl]
 8005310:	2b2a      	cmp	r3, #42	; 0x2a
 8005312:	d015      	beq.n	8005340 <_vfiprintf_r+0x120>
 8005314:	9a07      	ldr	r2, [sp, #28]
 8005316:	4654      	mov	r4, sl
 8005318:	2000      	movs	r0, #0
 800531a:	f04f 0c0a 	mov.w	ip, #10
 800531e:	4621      	mov	r1, r4
 8005320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005324:	3b30      	subs	r3, #48	; 0x30
 8005326:	2b09      	cmp	r3, #9
 8005328:	d94d      	bls.n	80053c6 <_vfiprintf_r+0x1a6>
 800532a:	b1b0      	cbz	r0, 800535a <_vfiprintf_r+0x13a>
 800532c:	9207      	str	r2, [sp, #28]
 800532e:	e014      	b.n	800535a <_vfiprintf_r+0x13a>
 8005330:	eba0 0308 	sub.w	r3, r0, r8
 8005334:	fa09 f303 	lsl.w	r3, r9, r3
 8005338:	4313      	orrs	r3, r2
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	46a2      	mov	sl, r4
 800533e:	e7d2      	b.n	80052e6 <_vfiprintf_r+0xc6>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	1d19      	adds	r1, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	9103      	str	r1, [sp, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	bfbb      	ittet	lt
 800534c:	425b      	neglt	r3, r3
 800534e:	f042 0202 	orrlt.w	r2, r2, #2
 8005352:	9307      	strge	r3, [sp, #28]
 8005354:	9307      	strlt	r3, [sp, #28]
 8005356:	bfb8      	it	lt
 8005358:	9204      	strlt	r2, [sp, #16]
 800535a:	7823      	ldrb	r3, [r4, #0]
 800535c:	2b2e      	cmp	r3, #46	; 0x2e
 800535e:	d10c      	bne.n	800537a <_vfiprintf_r+0x15a>
 8005360:	7863      	ldrb	r3, [r4, #1]
 8005362:	2b2a      	cmp	r3, #42	; 0x2a
 8005364:	d134      	bne.n	80053d0 <_vfiprintf_r+0x1b0>
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	1d1a      	adds	r2, r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	9203      	str	r2, [sp, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfb8      	it	lt
 8005372:	f04f 33ff 	movlt.w	r3, #4294967295
 8005376:	3402      	adds	r4, #2
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005450 <_vfiprintf_r+0x230>
 800537e:	7821      	ldrb	r1, [r4, #0]
 8005380:	2203      	movs	r2, #3
 8005382:	4650      	mov	r0, sl
 8005384:	f7fa ff44 	bl	8000210 <memchr>
 8005388:	b138      	cbz	r0, 800539a <_vfiprintf_r+0x17a>
 800538a:	9b04      	ldr	r3, [sp, #16]
 800538c:	eba0 000a 	sub.w	r0, r0, sl
 8005390:	2240      	movs	r2, #64	; 0x40
 8005392:	4082      	lsls	r2, r0
 8005394:	4313      	orrs	r3, r2
 8005396:	3401      	adds	r4, #1
 8005398:	9304      	str	r3, [sp, #16]
 800539a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800539e:	4829      	ldr	r0, [pc, #164]	; (8005444 <_vfiprintf_r+0x224>)
 80053a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053a4:	2206      	movs	r2, #6
 80053a6:	f7fa ff33 	bl	8000210 <memchr>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d03f      	beq.n	800542e <_vfiprintf_r+0x20e>
 80053ae:	4b26      	ldr	r3, [pc, #152]	; (8005448 <_vfiprintf_r+0x228>)
 80053b0:	bb1b      	cbnz	r3, 80053fa <_vfiprintf_r+0x1da>
 80053b2:	9b03      	ldr	r3, [sp, #12]
 80053b4:	3307      	adds	r3, #7
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	3308      	adds	r3, #8
 80053bc:	9303      	str	r3, [sp, #12]
 80053be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c0:	443b      	add	r3, r7
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	e768      	b.n	8005298 <_vfiprintf_r+0x78>
 80053c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80053ca:	460c      	mov	r4, r1
 80053cc:	2001      	movs	r0, #1
 80053ce:	e7a6      	b.n	800531e <_vfiprintf_r+0xfe>
 80053d0:	2300      	movs	r3, #0
 80053d2:	3401      	adds	r4, #1
 80053d4:	9305      	str	r3, [sp, #20]
 80053d6:	4619      	mov	r1, r3
 80053d8:	f04f 0c0a 	mov.w	ip, #10
 80053dc:	4620      	mov	r0, r4
 80053de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053e2:	3a30      	subs	r2, #48	; 0x30
 80053e4:	2a09      	cmp	r2, #9
 80053e6:	d903      	bls.n	80053f0 <_vfiprintf_r+0x1d0>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0c6      	beq.n	800537a <_vfiprintf_r+0x15a>
 80053ec:	9105      	str	r1, [sp, #20]
 80053ee:	e7c4      	b.n	800537a <_vfiprintf_r+0x15a>
 80053f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80053f4:	4604      	mov	r4, r0
 80053f6:	2301      	movs	r3, #1
 80053f8:	e7f0      	b.n	80053dc <_vfiprintf_r+0x1bc>
 80053fa:	ab03      	add	r3, sp, #12
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	462a      	mov	r2, r5
 8005400:	4b12      	ldr	r3, [pc, #72]	; (800544c <_vfiprintf_r+0x22c>)
 8005402:	a904      	add	r1, sp, #16
 8005404:	4630      	mov	r0, r6
 8005406:	f7fd fb9d 	bl	8002b44 <_printf_float>
 800540a:	4607      	mov	r7, r0
 800540c:	1c78      	adds	r0, r7, #1
 800540e:	d1d6      	bne.n	80053be <_vfiprintf_r+0x19e>
 8005410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005412:	07d9      	lsls	r1, r3, #31
 8005414:	d405      	bmi.n	8005422 <_vfiprintf_r+0x202>
 8005416:	89ab      	ldrh	r3, [r5, #12]
 8005418:	059a      	lsls	r2, r3, #22
 800541a:	d402      	bmi.n	8005422 <_vfiprintf_r+0x202>
 800541c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800541e:	f7fe f8fb 	bl	8003618 <__retarget_lock_release_recursive>
 8005422:	89ab      	ldrh	r3, [r5, #12]
 8005424:	065b      	lsls	r3, r3, #25
 8005426:	f53f af1d 	bmi.w	8005264 <_vfiprintf_r+0x44>
 800542a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800542c:	e71c      	b.n	8005268 <_vfiprintf_r+0x48>
 800542e:	ab03      	add	r3, sp, #12
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462a      	mov	r2, r5
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <_vfiprintf_r+0x22c>)
 8005436:	a904      	add	r1, sp, #16
 8005438:	4630      	mov	r0, r6
 800543a:	f7fd fe27 	bl	800308c <_printf_i>
 800543e:	e7e4      	b.n	800540a <_vfiprintf_r+0x1ea>
 8005440:	0800595c 	.word	0x0800595c
 8005444:	08005966 	.word	0x08005966
 8005448:	08002b45 	.word	0x08002b45
 800544c:	080051fd 	.word	0x080051fd
 8005450:	08005962 	.word	0x08005962

08005454 <__swbuf_r>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	460e      	mov	r6, r1
 8005458:	4614      	mov	r4, r2
 800545a:	4605      	mov	r5, r0
 800545c:	b118      	cbz	r0, 8005466 <__swbuf_r+0x12>
 800545e:	6a03      	ldr	r3, [r0, #32]
 8005460:	b90b      	cbnz	r3, 8005466 <__swbuf_r+0x12>
 8005462:	f7fd ffc1 	bl	80033e8 <__sinit>
 8005466:	69a3      	ldr	r3, [r4, #24]
 8005468:	60a3      	str	r3, [r4, #8]
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	071a      	lsls	r2, r3, #28
 800546e:	d525      	bpl.n	80054bc <__swbuf_r+0x68>
 8005470:	6923      	ldr	r3, [r4, #16]
 8005472:	b31b      	cbz	r3, 80054bc <__swbuf_r+0x68>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	6922      	ldr	r2, [r4, #16]
 8005478:	1a98      	subs	r0, r3, r2
 800547a:	6963      	ldr	r3, [r4, #20]
 800547c:	b2f6      	uxtb	r6, r6
 800547e:	4283      	cmp	r3, r0
 8005480:	4637      	mov	r7, r6
 8005482:	dc04      	bgt.n	800548e <__swbuf_r+0x3a>
 8005484:	4621      	mov	r1, r4
 8005486:	4628      	mov	r0, r5
 8005488:	f7ff fd9e 	bl	8004fc8 <_fflush_r>
 800548c:	b9e0      	cbnz	r0, 80054c8 <__swbuf_r+0x74>
 800548e:	68a3      	ldr	r3, [r4, #8]
 8005490:	3b01      	subs	r3, #1
 8005492:	60a3      	str	r3, [r4, #8]
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	6022      	str	r2, [r4, #0]
 800549a:	701e      	strb	r6, [r3, #0]
 800549c:	6962      	ldr	r2, [r4, #20]
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d004      	beq.n	80054ae <__swbuf_r+0x5a>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	07db      	lsls	r3, r3, #31
 80054a8:	d506      	bpl.n	80054b8 <__swbuf_r+0x64>
 80054aa:	2e0a      	cmp	r6, #10
 80054ac:	d104      	bne.n	80054b8 <__swbuf_r+0x64>
 80054ae:	4621      	mov	r1, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f7ff fd89 	bl	8004fc8 <_fflush_r>
 80054b6:	b938      	cbnz	r0, 80054c8 <__swbuf_r+0x74>
 80054b8:	4638      	mov	r0, r7
 80054ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 f806 	bl	80054d0 <__swsetup_r>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d0d5      	beq.n	8005474 <__swbuf_r+0x20>
 80054c8:	f04f 37ff 	mov.w	r7, #4294967295
 80054cc:	e7f4      	b.n	80054b8 <__swbuf_r+0x64>
	...

080054d0 <__swsetup_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4b2a      	ldr	r3, [pc, #168]	; (800557c <__swsetup_r+0xac>)
 80054d4:	4605      	mov	r5, r0
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	460c      	mov	r4, r1
 80054da:	b118      	cbz	r0, 80054e4 <__swsetup_r+0x14>
 80054dc:	6a03      	ldr	r3, [r0, #32]
 80054de:	b90b      	cbnz	r3, 80054e4 <__swsetup_r+0x14>
 80054e0:	f7fd ff82 	bl	80033e8 <__sinit>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054ea:	0718      	lsls	r0, r3, #28
 80054ec:	d422      	bmi.n	8005534 <__swsetup_r+0x64>
 80054ee:	06d9      	lsls	r1, r3, #27
 80054f0:	d407      	bmi.n	8005502 <__swsetup_r+0x32>
 80054f2:	2309      	movs	r3, #9
 80054f4:	602b      	str	r3, [r5, #0]
 80054f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054fa:	81a3      	strh	r3, [r4, #12]
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	e034      	b.n	800556c <__swsetup_r+0x9c>
 8005502:	0758      	lsls	r0, r3, #29
 8005504:	d512      	bpl.n	800552c <__swsetup_r+0x5c>
 8005506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005508:	b141      	cbz	r1, 800551c <__swsetup_r+0x4c>
 800550a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800550e:	4299      	cmp	r1, r3
 8005510:	d002      	beq.n	8005518 <__swsetup_r+0x48>
 8005512:	4628      	mov	r0, r5
 8005514:	f7fe fefe 	bl	8004314 <_free_r>
 8005518:	2300      	movs	r3, #0
 800551a:	6363      	str	r3, [r4, #52]	; 0x34
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005522:	81a3      	strh	r3, [r4, #12]
 8005524:	2300      	movs	r3, #0
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	6023      	str	r3, [r4, #0]
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	f043 0308 	orr.w	r3, r3, #8
 8005532:	81a3      	strh	r3, [r4, #12]
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	b94b      	cbnz	r3, 800554c <__swsetup_r+0x7c>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800553e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005542:	d003      	beq.n	800554c <__swsetup_r+0x7c>
 8005544:	4621      	mov	r1, r4
 8005546:	4628      	mov	r0, r5
 8005548:	f000 f884 	bl	8005654 <__smakebuf_r>
 800554c:	89a0      	ldrh	r0, [r4, #12]
 800554e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005552:	f010 0301 	ands.w	r3, r0, #1
 8005556:	d00a      	beq.n	800556e <__swsetup_r+0x9e>
 8005558:	2300      	movs	r3, #0
 800555a:	60a3      	str	r3, [r4, #8]
 800555c:	6963      	ldr	r3, [r4, #20]
 800555e:	425b      	negs	r3, r3
 8005560:	61a3      	str	r3, [r4, #24]
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	b943      	cbnz	r3, 8005578 <__swsetup_r+0xa8>
 8005566:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800556a:	d1c4      	bne.n	80054f6 <__swsetup_r+0x26>
 800556c:	bd38      	pop	{r3, r4, r5, pc}
 800556e:	0781      	lsls	r1, r0, #30
 8005570:	bf58      	it	pl
 8005572:	6963      	ldrpl	r3, [r4, #20]
 8005574:	60a3      	str	r3, [r4, #8]
 8005576:	e7f4      	b.n	8005562 <__swsetup_r+0x92>
 8005578:	2000      	movs	r0, #0
 800557a:	e7f7      	b.n	800556c <__swsetup_r+0x9c>
 800557c:	20000064 	.word	0x20000064

08005580 <_raise_r>:
 8005580:	291f      	cmp	r1, #31
 8005582:	b538      	push	{r3, r4, r5, lr}
 8005584:	4604      	mov	r4, r0
 8005586:	460d      	mov	r5, r1
 8005588:	d904      	bls.n	8005594 <_raise_r+0x14>
 800558a:	2316      	movs	r3, #22
 800558c:	6003      	str	r3, [r0, #0]
 800558e:	f04f 30ff 	mov.w	r0, #4294967295
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005596:	b112      	cbz	r2, 800559e <_raise_r+0x1e>
 8005598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800559c:	b94b      	cbnz	r3, 80055b2 <_raise_r+0x32>
 800559e:	4620      	mov	r0, r4
 80055a0:	f000 f830 	bl	8005604 <_getpid_r>
 80055a4:	462a      	mov	r2, r5
 80055a6:	4601      	mov	r1, r0
 80055a8:	4620      	mov	r0, r4
 80055aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055ae:	f000 b817 	b.w	80055e0 <_kill_r>
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d00a      	beq.n	80055cc <_raise_r+0x4c>
 80055b6:	1c59      	adds	r1, r3, #1
 80055b8:	d103      	bne.n	80055c2 <_raise_r+0x42>
 80055ba:	2316      	movs	r3, #22
 80055bc:	6003      	str	r3, [r0, #0]
 80055be:	2001      	movs	r0, #1
 80055c0:	e7e7      	b.n	8005592 <_raise_r+0x12>
 80055c2:	2400      	movs	r4, #0
 80055c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80055c8:	4628      	mov	r0, r5
 80055ca:	4798      	blx	r3
 80055cc:	2000      	movs	r0, #0
 80055ce:	e7e0      	b.n	8005592 <_raise_r+0x12>

080055d0 <raise>:
 80055d0:	4b02      	ldr	r3, [pc, #8]	; (80055dc <raise+0xc>)
 80055d2:	4601      	mov	r1, r0
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	f7ff bfd3 	b.w	8005580 <_raise_r>
 80055da:	bf00      	nop
 80055dc:	20000064 	.word	0x20000064

080055e0 <_kill_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d07      	ldr	r5, [pc, #28]	; (8005600 <_kill_r+0x20>)
 80055e4:	2300      	movs	r3, #0
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	602b      	str	r3, [r5, #0]
 80055ee:	f7fc f831 	bl	8001654 <_kill>
 80055f2:	1c43      	adds	r3, r0, #1
 80055f4:	d102      	bne.n	80055fc <_kill_r+0x1c>
 80055f6:	682b      	ldr	r3, [r5, #0]
 80055f8:	b103      	cbz	r3, 80055fc <_kill_r+0x1c>
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
 80055fe:	bf00      	nop
 8005600:	20000354 	.word	0x20000354

08005604 <_getpid_r>:
 8005604:	f7fc b81e 	b.w	8001644 <_getpid>

08005608 <__swhatbuf_r>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	460c      	mov	r4, r1
 800560c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005610:	2900      	cmp	r1, #0
 8005612:	b096      	sub	sp, #88	; 0x58
 8005614:	4615      	mov	r5, r2
 8005616:	461e      	mov	r6, r3
 8005618:	da0d      	bge.n	8005636 <__swhatbuf_r+0x2e>
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005620:	f04f 0100 	mov.w	r1, #0
 8005624:	bf0c      	ite	eq
 8005626:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800562a:	2340      	movne	r3, #64	; 0x40
 800562c:	2000      	movs	r0, #0
 800562e:	6031      	str	r1, [r6, #0]
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	b016      	add	sp, #88	; 0x58
 8005634:	bd70      	pop	{r4, r5, r6, pc}
 8005636:	466a      	mov	r2, sp
 8005638:	f000 f848 	bl	80056cc <_fstat_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	dbec      	blt.n	800561a <__swhatbuf_r+0x12>
 8005640:	9901      	ldr	r1, [sp, #4]
 8005642:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005646:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800564a:	4259      	negs	r1, r3
 800564c:	4159      	adcs	r1, r3
 800564e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005652:	e7eb      	b.n	800562c <__swhatbuf_r+0x24>

08005654 <__smakebuf_r>:
 8005654:	898b      	ldrh	r3, [r1, #12]
 8005656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005658:	079d      	lsls	r5, r3, #30
 800565a:	4606      	mov	r6, r0
 800565c:	460c      	mov	r4, r1
 800565e:	d507      	bpl.n	8005670 <__smakebuf_r+0x1c>
 8005660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	6123      	str	r3, [r4, #16]
 8005668:	2301      	movs	r3, #1
 800566a:	6163      	str	r3, [r4, #20]
 800566c:	b002      	add	sp, #8
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	ab01      	add	r3, sp, #4
 8005672:	466a      	mov	r2, sp
 8005674:	f7ff ffc8 	bl	8005608 <__swhatbuf_r>
 8005678:	9900      	ldr	r1, [sp, #0]
 800567a:	4605      	mov	r5, r0
 800567c:	4630      	mov	r0, r6
 800567e:	f7fe febd 	bl	80043fc <_malloc_r>
 8005682:	b948      	cbnz	r0, 8005698 <__smakebuf_r+0x44>
 8005684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005688:	059a      	lsls	r2, r3, #22
 800568a:	d4ef      	bmi.n	800566c <__smakebuf_r+0x18>
 800568c:	f023 0303 	bic.w	r3, r3, #3
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	81a3      	strh	r3, [r4, #12]
 8005696:	e7e3      	b.n	8005660 <__smakebuf_r+0xc>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	6020      	str	r0, [r4, #0]
 800569c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	9b00      	ldr	r3, [sp, #0]
 80056a4:	6163      	str	r3, [r4, #20]
 80056a6:	9b01      	ldr	r3, [sp, #4]
 80056a8:	6120      	str	r0, [r4, #16]
 80056aa:	b15b      	cbz	r3, 80056c4 <__smakebuf_r+0x70>
 80056ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056b0:	4630      	mov	r0, r6
 80056b2:	f000 f81d 	bl	80056f0 <_isatty_r>
 80056b6:	b128      	cbz	r0, 80056c4 <__smakebuf_r+0x70>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f023 0303 	bic.w	r3, r3, #3
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	431d      	orrs	r5, r3
 80056c8:	81a5      	strh	r5, [r4, #12]
 80056ca:	e7cf      	b.n	800566c <__smakebuf_r+0x18>

080056cc <_fstat_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4d07      	ldr	r5, [pc, #28]	; (80056ec <_fstat_r+0x20>)
 80056d0:	2300      	movs	r3, #0
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	602b      	str	r3, [r5, #0]
 80056da:	f7fc f81a 	bl	8001712 <_fstat>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d102      	bne.n	80056e8 <_fstat_r+0x1c>
 80056e2:	682b      	ldr	r3, [r5, #0]
 80056e4:	b103      	cbz	r3, 80056e8 <_fstat_r+0x1c>
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	bd38      	pop	{r3, r4, r5, pc}
 80056ea:	bf00      	nop
 80056ec:	20000354 	.word	0x20000354

080056f0 <_isatty_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4d06      	ldr	r5, [pc, #24]	; (800570c <_isatty_r+0x1c>)
 80056f4:	2300      	movs	r3, #0
 80056f6:	4604      	mov	r4, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	602b      	str	r3, [r5, #0]
 80056fc:	f7fc f819 	bl	8001732 <_isatty>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_isatty_r+0x1a>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_isatty_r+0x1a>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	20000354 	.word	0x20000354

08005710 <_init>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr

0800571c <_fini>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr
